import { ENetworks } from './utils/types';
export * from './utils/types';
export declare const ldk: {
    ldkEvent: () => void;
    logListeners: never[];
    reset: () => void;
};
declare const _default: {
    getBestBlock: () => void;
    getTransactionData: () => void;
    getTransactionPosition: () => void;
    getAddress: () => void;
    getScriptPubKeyHistory: () => void;
    getFees: () => void;
    broadcastTransaction: () => void;
    addPeer: () => void;
    removePeer: () => void;
    getPeers: () => void;
    importAccount: () => void;
    backupAccount: () => void;
    payWithTimeout: () => void;
    subscribeAndPay: () => void;
    subscribeToPaymentResponses: () => void;
    unsubscribeFromPaymentSubscriptions: () => void;
    getChangeDestinationScript: () => void;
    getLdkPaymentIds: () => void;
    removeLdkPaymentId: () => void;
    appendLdkPaymentId: () => void;
    getLdkUnconfirmedTxs: () => void;
    getLdkSpendableOutputs: () => void;
    saveUnconfirmedTxs: () => void;
    saveBroadcastedTxs: () => void;
    saveLdkPeerData: () => void;
    currentBlock: {
        height: number;
        hex: string;
        hash: string;
    };
    unconfirmedTxs: never[];
    watchTxs: never[];
    watchOutputs: never[];
    account: {
        name: string;
        seed: string;
    };
    backupSubscriptions: {};
    backupSubscriptionsId: number;
    backupSubscriptionsDebounceTimer: number;
    network: ENetworks;
    baseStoragePath: string;
    logFilePath: string;
};
export default _default;
