import { ENetworks, TLdkStart } from './types';
import { Result } from './result';
export declare const startParamCheck: ({ account, getBestBlock, getTransactionData, getTransactionPosition, broadcastTransaction, getAddress, getScriptPubKeyHistory, getFees, network, }: TLdkStart) => Promise<Result<string>>;
export declare const extractPaymentRequest: (paymentRequest: string) => string;
export declare const parseData: (data: string, fallback: any) => any;
export declare const appendPath: (path1: string, path2: string) => string;
export declare const promiseTimeout: <T>(ms: number, promise: Promise<any>) => Promise<T>;
declare type TFindOutputsFromRawTxsRes = {
    outputScriptPubKey: string;
    outputValue: number;
    outpointTxId: string;
    outpointIndex: number;
};
export declare const findOutputsFromRawTxs: (rawTxs: string[], txId: string, index: number) => TFindOutputsFromRawTxsRes | undefined;
export declare const getTxIdFromRawTx: (rawTx: string) => string;
export declare const sleep: (ms?: number) => Promise<void>;
export declare const isValidBech32mEncodedString: (address: string) => {
    isValid: boolean;
    network: ENetworks;
};
export {};
