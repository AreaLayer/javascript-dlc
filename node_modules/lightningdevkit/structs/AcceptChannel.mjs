import { Result_AcceptChannelDecodeErrorZ } from '../structs/Result_AcceptChannelDecodeErrorZ.mjs';
import { CommonAcceptChannelFields } from '../structs/CommonAcceptChannelFields.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An [`accept_channel`] message to be sent to or received from a peer.
 *
 * Used in V1 channel establishment
 *
 * [`accept_channel`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#the-accept_channel-message
 */
export class AcceptChannel extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.AcceptChannel_free);
    }
    /**
     * Common fields of `accept_channel(2)`-like messages
     */
    get_common_fields() {
        const ret = bindings.AcceptChannel_get_common_fields(this.ptr);
        const ret_hu_conv = new CommonAcceptChannelFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Common fields of `accept_channel(2)`-like messages
     */
    set_common_fields(val) {
        bindings.AcceptChannel_set_common_fields(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The minimum value unencumbered by HTLCs for the counterparty to keep in the channel
     */
    get_channel_reserve_satoshis() {
        const ret = bindings.AcceptChannel_get_channel_reserve_satoshis(this.ptr);
        return ret;
    }
    /**
     * The minimum value unencumbered by HTLCs for the counterparty to keep in the channel
     */
    set_channel_reserve_satoshis(val) {
        bindings.AcceptChannel_set_channel_reserve_satoshis(this.ptr, val);
    }
    /**
     * Constructs a new AcceptChannel given each field
     */
    static constructor_new(common_fields_arg, channel_reserve_satoshis_arg) {
        const ret = bindings.AcceptChannel_new(CommonBase.get_ptr_of(common_fields_arg), channel_reserve_satoshis_arg);
        const ret_hu_conv = new AcceptChannel(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.AcceptChannel_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the AcceptChannel
     */
    clone() {
        const ret = bindings.AcceptChannel_clone(this.ptr);
        const ret_hu_conv = new AcceptChannel(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the AcceptChannel.
     */
    hash() {
        const ret = bindings.AcceptChannel_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two AcceptChannels contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.AcceptChannel_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the AcceptChannel object into a byte array which can be read by AcceptChannel_read
     */
    write() {
        const ret = bindings.AcceptChannel_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a AcceptChannel from a byte array, created by AcceptChannel_write
     */
    static constructor_read(ser) {
        const ret = bindings.AcceptChannel_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_AcceptChannelDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=AcceptChannel.mjs.map