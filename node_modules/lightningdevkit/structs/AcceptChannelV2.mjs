import { Result_AcceptChannelV2DecodeErrorZ } from '../structs/Result_AcceptChannelV2DecodeErrorZ.mjs';
import { CommonAcceptChannelFields } from '../structs/CommonAcceptChannelFields.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An accept_channel2 message to be sent by or received from the channel accepter.
 *
 * Used in V2 channel establishment
 */
export class AcceptChannelV2 extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.AcceptChannelV2_free);
    }
    /**
     * Common fields of `accept_channel(2)`-like messages
     */
    get_common_fields() {
        const ret = bindings.AcceptChannelV2_get_common_fields(this.ptr);
        const ret_hu_conv = new CommonAcceptChannelFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Common fields of `accept_channel(2)`-like messages
     */
    set_common_fields(val) {
        bindings.AcceptChannelV2_set_common_fields(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Part of the channel value contributed by the channel acceptor
     */
    get_funding_satoshis() {
        const ret = bindings.AcceptChannelV2_get_funding_satoshis(this.ptr);
        return ret;
    }
    /**
     * Part of the channel value contributed by the channel acceptor
     */
    set_funding_satoshis(val) {
        bindings.AcceptChannelV2_set_funding_satoshis(this.ptr, val);
    }
    /**
     * The second to-be-broadcast-by-channel-acceptor transaction's per commitment point
     */
    get_second_per_commitment_point() {
        const ret = bindings.AcceptChannelV2_get_second_per_commitment_point(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The second to-be-broadcast-by-channel-acceptor transaction's per commitment point
     */
    set_second_per_commitment_point(val) {
        bindings.AcceptChannelV2_set_second_per_commitment_point(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Optionally, a requirement that only confirmed inputs can be added
     */
    get_require_confirmed_inputs() {
        const ret = bindings.AcceptChannelV2_get_require_confirmed_inputs(this.ptr);
        return ret;
    }
    /**
     * Optionally, a requirement that only confirmed inputs can be added
     */
    set_require_confirmed_inputs(val) {
        bindings.AcceptChannelV2_set_require_confirmed_inputs(this.ptr, val);
    }
    /**
     * Constructs a new AcceptChannelV2 given each field
     */
    static constructor_new(common_fields_arg, funding_satoshis_arg, second_per_commitment_point_arg, require_confirmed_inputs_arg) {
        const ret = bindings.AcceptChannelV2_new(CommonBase.get_ptr_of(common_fields_arg), funding_satoshis_arg, bindings.encodeUint8Array(bindings.check_arr_len(second_per_commitment_point_arg, 33)), require_confirmed_inputs_arg);
        const ret_hu_conv = new AcceptChannelV2(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.AcceptChannelV2_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the AcceptChannelV2
     */
    clone() {
        const ret = bindings.AcceptChannelV2_clone(this.ptr);
        const ret_hu_conv = new AcceptChannelV2(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the AcceptChannelV2.
     */
    hash() {
        const ret = bindings.AcceptChannelV2_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two AcceptChannelV2s contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.AcceptChannelV2_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the AcceptChannelV2 object into a byte array which can be read by AcceptChannelV2_read
     */
    write() {
        const ret = bindings.AcceptChannelV2_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a AcceptChannelV2 from a byte array, created by AcceptChannelV2_write
     */
    static constructor_read(ser) {
        const ret = bindings.AcceptChannelV2_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_AcceptChannelV2DecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=AcceptChannelV2.mjs.map