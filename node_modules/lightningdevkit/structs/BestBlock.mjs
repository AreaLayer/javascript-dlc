import { Result_BestBlockDecodeErrorZ } from '../structs/Result_BestBlockDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The best known block as identified by its hash and height.
 */
export class BestBlock extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.BestBlock_free);
    }
    /**
     * The block's hash
     */
    get_block_hash() {
        const ret = bindings.BestBlock_get_block_hash(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The block's hash
     */
    set_block_hash(val) {
        bindings.BestBlock_set_block_hash(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * The height at which the block was confirmed.
     */
    get_height() {
        const ret = bindings.BestBlock_get_height(this.ptr);
        return ret;
    }
    /**
     * The height at which the block was confirmed.
     */
    set_height(val) {
        bindings.BestBlock_set_height(this.ptr, val);
    }
    /**
     * Constructs a new BestBlock given each field
     */
    static constructor_new(block_hash_arg, height_arg) {
        const ret = bindings.BestBlock_new(bindings.encodeUint8Array(bindings.check_arr_len(block_hash_arg, 32)), height_arg);
        const ret_hu_conv = new BestBlock(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.BestBlock_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the BestBlock
     */
    clone() {
        const ret = bindings.BestBlock_clone(this.ptr);
        const ret_hu_conv = new BestBlock(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the BestBlock.
     */
    hash() {
        const ret = bindings.BestBlock_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two BestBlocks contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.BestBlock_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Constructs a `BestBlock` that represents the genesis block at height 0 of the given
     * network.
     */
    static constructor_from_network(network) {
        const ret = bindings.BestBlock_from_network(network);
        const ret_hu_conv = new BestBlock(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Serialize the BestBlock object into a byte array which can be read by BestBlock_read
     */
    write() {
        const ret = bindings.BestBlock_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a BestBlock from a byte array, created by BestBlock_write
     */
    static constructor_read(ser) {
        const ret = bindings.BestBlock_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_BestBlockDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=BestBlock.mjs.map