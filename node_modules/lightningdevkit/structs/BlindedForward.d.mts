import { BlindedFailure } from '../enums/BlindedFailure.mjs';
import { Result_BlindedForwardDecodeErrorZ } from '../structs/Result_BlindedForwardDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Information used to forward or fail this HTLC that is being forwarded within a blinded path.
 */
export declare class BlindedForward extends CommonBase {
    /**
     * The `blinding_point` that was set in the inbound [`msgs::UpdateAddHTLC`], or in the inbound
     * onion payload if we're the introduction node. Useful for calculating the next hop's
     * [`msgs::UpdateAddHTLC::blinding_point`].
     */
    get_inbound_blinding_point(): Uint8Array;
    /**
     * The `blinding_point` that was set in the inbound [`msgs::UpdateAddHTLC`], or in the inbound
     * onion payload if we're the introduction node. Useful for calculating the next hop's
     * [`msgs::UpdateAddHTLC::blinding_point`].
     */
    set_inbound_blinding_point(val: Uint8Array): void;
    /**
     * If needed, this determines how this HTLC should be failed backwards, based on whether we are
     * the introduction node.
     */
    get_failure(): BlindedFailure;
    /**
     * If needed, this determines how this HTLC should be failed backwards, based on whether we are
     * the introduction node.
     */
    set_failure(val: BlindedFailure): void;
    /**
     * Overrides the next hop's [`msgs::UpdateAddHTLC::blinding_point`]. Set if this HTLC is being
     * forwarded within a [`BlindedPaymentPath`] that was concatenated to another blinded path that
     * starts at the next hop.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_next_blinding_override(): Uint8Array;
    /**
     * Overrides the next hop's [`msgs::UpdateAddHTLC::blinding_point`]. Set if this HTLC is being
     * forwarded within a [`BlindedPaymentPath`] that was concatenated to another blinded path that
     * starts at the next hop.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_next_blinding_override(val: Uint8Array | null): void;
    /**
     * Constructs a new BlindedForward given each field
     *
     * Note that next_blinding_override_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(inbound_blinding_point_arg: Uint8Array, failure_arg: BlindedFailure, next_blinding_override_arg: Uint8Array | null): BlindedForward;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the BlindedForward
     */
    clone(): BlindedForward;
    /**
     * Generates a non-cryptographic 64-bit hash of the BlindedForward.
     */
    hash(): bigint;
    /**
     * Checks if two BlindedForwards contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: BlindedForward): boolean;
    /**
     * Serialize the BlindedForward object into a byte array which can be read by BlindedForward_read
     */
    write(): Uint8Array;
    /**
     * Read a BlindedForward from a byte array, created by BlindedForward_write
     */
    static constructor_read(ser: Uint8Array): Result_BlindedForwardDecodeErrorZ;
}
