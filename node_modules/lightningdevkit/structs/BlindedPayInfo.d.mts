import { BlindedHopFeatures } from '../structs/BlindedHopFeatures.mjs';
import { Result_BlindedPayInfoDecodeErrorZ } from '../structs/Result_BlindedPayInfoDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Information needed to route a payment across a [`BlindedPaymentPath`].
 */
export declare class BlindedPayInfo extends CommonBase {
    /**
     * Base fee charged (in millisatoshi) for the entire blinded path.
     */
    get_fee_base_msat(): number;
    /**
     * Base fee charged (in millisatoshi) for the entire blinded path.
     */
    set_fee_base_msat(val: number): void;
    /**
     * Liquidity fee charged (in millionths of the amount transferred) for the entire blinded path
     * (i.e., 10,000 is 1%).
     */
    get_fee_proportional_millionths(): number;
    /**
     * Liquidity fee charged (in millionths of the amount transferred) for the entire blinded path
     * (i.e., 10,000 is 1%).
     */
    set_fee_proportional_millionths(val: number): void;
    /**
     * Number of blocks subtracted from an incoming HTLC's `cltv_expiry` for the entire blinded
     * path.
     */
    get_cltv_expiry_delta(): number;
    /**
     * Number of blocks subtracted from an incoming HTLC's `cltv_expiry` for the entire blinded
     * path.
     */
    set_cltv_expiry_delta(val: number): void;
    /**
     * The minimum HTLC value (in millisatoshi) that is acceptable to all channel peers on the
     * blinded path from the introduction node to the recipient, accounting for any fees, i.e., as
     * seen by the recipient.
     */
    get_htlc_minimum_msat(): bigint;
    /**
     * The minimum HTLC value (in millisatoshi) that is acceptable to all channel peers on the
     * blinded path from the introduction node to the recipient, accounting for any fees, i.e., as
     * seen by the recipient.
     */
    set_htlc_minimum_msat(val: bigint): void;
    /**
     * The maximum HTLC value (in millisatoshi) that is acceptable to all channel peers on the
     * blinded path from the introduction node to the recipient, accounting for any fees, i.e., as
     * seen by the recipient.
     */
    get_htlc_maximum_msat(): bigint;
    /**
     * The maximum HTLC value (in millisatoshi) that is acceptable to all channel peers on the
     * blinded path from the introduction node to the recipient, accounting for any fees, i.e., as
     * seen by the recipient.
     */
    set_htlc_maximum_msat(val: bigint): void;
    /**
     * Features set in `encrypted_data_tlv` for the `encrypted_recipient_data` TLV record in an
     * onion payload.
     */
    get_features(): BlindedHopFeatures;
    /**
     * Features set in `encrypted_data_tlv` for the `encrypted_recipient_data` TLV record in an
     * onion payload.
     */
    set_features(val: BlindedHopFeatures): void;
    /**
     * Constructs a new BlindedPayInfo given each field
     */
    static constructor_new(fee_base_msat_arg: number, fee_proportional_millionths_arg: number, cltv_expiry_delta_arg: number, htlc_minimum_msat_arg: bigint, htlc_maximum_msat_arg: bigint, features_arg: BlindedHopFeatures): BlindedPayInfo;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the BlindedPayInfo
     */
    clone(): BlindedPayInfo;
    /**
     * Generates a non-cryptographic 64-bit hash of the BlindedPayInfo.
     */
    hash(): bigint;
    /**
     * Checks if two BlindedPayInfos contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: BlindedPayInfo): boolean;
    /**
     * Serialize the BlindedPayInfo object into a byte array which can be read by BlindedPayInfo_read
     */
    write(): Uint8Array;
    /**
     * Read a BlindedPayInfo from a byte array, created by BlindedPayInfo_write
     */
    static constructor_read(ser: Uint8Array): Result_BlindedPayInfoDecodeErrorZ;
}
