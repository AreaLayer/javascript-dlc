import { BlindedHop } from '../structs/BlindedHop.mjs';
import { Result_BlindedTailDecodeErrorZ } from '../structs/Result_BlindedTailDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * The blinded portion of a [`Path`], if we're routing to a recipient who provided blinded paths in
 * their [`Bolt12Invoice`].
 *
 * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
 */
export declare class BlindedTail extends CommonBase {
    /**
     * The hops of the [`BlindedPaymentPath`] provided by the recipient.
     */
    get_hops(): BlindedHop[];
    /**
     * The hops of the [`BlindedPaymentPath`] provided by the recipient.
     */
    set_hops(val: BlindedHop[]): void;
    /**
     * The blinding point of the [`BlindedPaymentPath`] provided by the recipient.
     */
    get_blinding_point(): Uint8Array;
    /**
     * The blinding point of the [`BlindedPaymentPath`] provided by the recipient.
     */
    set_blinding_point(val: Uint8Array): void;
    /**
     * Excess CLTV delta added to the recipient's CLTV expiry to deter intermediate nodes from
     * inferring the destination. May be 0.
     */
    get_excess_final_cltv_expiry_delta(): number;
    /**
     * Excess CLTV delta added to the recipient's CLTV expiry to deter intermediate nodes from
     * inferring the destination. May be 0.
     */
    set_excess_final_cltv_expiry_delta(val: number): void;
    /**
     * The total amount paid on this [`Path`], excluding the fees.
     */
    get_final_value_msat(): bigint;
    /**
     * The total amount paid on this [`Path`], excluding the fees.
     */
    set_final_value_msat(val: bigint): void;
    /**
     * Constructs a new BlindedTail given each field
     */
    static constructor_new(hops_arg: BlindedHop[], blinding_point_arg: Uint8Array, excess_final_cltv_expiry_delta_arg: number, final_value_msat_arg: bigint): BlindedTail;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the BlindedTail
     */
    clone(): BlindedTail;
    /**
     * Generates a non-cryptographic 64-bit hash of the BlindedTail.
     */
    hash(): bigint;
    /**
     * Checks if two BlindedTails contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: BlindedTail): boolean;
    /**
     * Serialize the BlindedTail object into a byte array which can be read by BlindedTail_read
     */
    write(): Uint8Array;
    /**
     * Read a BlindedTail from a byte array, created by BlindedTail_write
     */
    static constructor_read(ser: Uint8Array): Result_BlindedTailDecodeErrorZ;
}
