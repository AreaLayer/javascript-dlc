import { BlindedHop } from '../structs/BlindedHop.mjs';
import { Result_BlindedTailDecodeErrorZ } from '../structs/Result_BlindedTailDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The blinded portion of a [`Path`], if we're routing to a recipient who provided blinded paths in
 * their [`Bolt12Invoice`].
 *
 * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
 */
export class BlindedTail extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.BlindedTail_free);
    }
    /**
     * The hops of the [`BlindedPaymentPath`] provided by the recipient.
     */
    get_hops() {
        const ret = bindings.BlindedTail_get_hops(this.ptr);
        const ret_conv_12_len = bindings.getArrayLength(ret);
        const ret_conv_12_arr = new Array(ret_conv_12_len).fill(null);
        for (var m = 0; m < ret_conv_12_len; m++) {
            const ret_conv_12 = bindings.getU64ArrayElem(ret, m);
            const ret_conv_12_hu_conv = new BlindedHop(null, ret_conv_12);
            CommonBase.add_ref_from(ret_conv_12_hu_conv, this);
            ret_conv_12_arr[m] = ret_conv_12_hu_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_12_arr;
    }
    /**
     * The hops of the [`BlindedPaymentPath`] provided by the recipient.
     */
    set_hops(val) {
        bindings.BlindedTail_set_hops(this.ptr, bindings.encodeUint64Array(val.map(val_conv_12 => CommonBase.get_ptr_of(val_conv_12))));
    }
    /**
     * The blinding point of the [`BlindedPaymentPath`] provided by the recipient.
     */
    get_blinding_point() {
        const ret = bindings.BlindedTail_get_blinding_point(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The blinding point of the [`BlindedPaymentPath`] provided by the recipient.
     */
    set_blinding_point(val) {
        bindings.BlindedTail_set_blinding_point(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Excess CLTV delta added to the recipient's CLTV expiry to deter intermediate nodes from
     * inferring the destination. May be 0.
     */
    get_excess_final_cltv_expiry_delta() {
        const ret = bindings.BlindedTail_get_excess_final_cltv_expiry_delta(this.ptr);
        return ret;
    }
    /**
     * Excess CLTV delta added to the recipient's CLTV expiry to deter intermediate nodes from
     * inferring the destination. May be 0.
     */
    set_excess_final_cltv_expiry_delta(val) {
        bindings.BlindedTail_set_excess_final_cltv_expiry_delta(this.ptr, val);
    }
    /**
     * The total amount paid on this [`Path`], excluding the fees.
     */
    get_final_value_msat() {
        const ret = bindings.BlindedTail_get_final_value_msat(this.ptr);
        return ret;
    }
    /**
     * The total amount paid on this [`Path`], excluding the fees.
     */
    set_final_value_msat(val) {
        bindings.BlindedTail_set_final_value_msat(this.ptr, val);
    }
    /**
     * Constructs a new BlindedTail given each field
     */
    static constructor_new(hops_arg, blinding_point_arg, excess_final_cltv_expiry_delta_arg, final_value_msat_arg) {
        const ret = bindings.BlindedTail_new(bindings.encodeUint64Array(hops_arg.map(hops_arg_conv_12 => CommonBase.get_ptr_of(hops_arg_conv_12))), bindings.encodeUint8Array(bindings.check_arr_len(blinding_point_arg, 33)), excess_final_cltv_expiry_delta_arg, final_value_msat_arg);
        const ret_hu_conv = new BlindedTail(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.BlindedTail_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the BlindedTail
     */
    clone() {
        const ret = bindings.BlindedTail_clone(this.ptr);
        const ret_hu_conv = new BlindedTail(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the BlindedTail.
     */
    hash() {
        const ret = bindings.BlindedTail_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two BlindedTails contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.BlindedTail_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the BlindedTail object into a byte array which can be read by BlindedTail_read
     */
    write() {
        const ret = bindings.BlindedTail_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a BlindedTail from a byte array, created by BlindedTail_write
     */
    static constructor_read(ser) {
        const ret = bindings.BlindedTail_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_BlindedTailDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=BlindedTail.mjs.map