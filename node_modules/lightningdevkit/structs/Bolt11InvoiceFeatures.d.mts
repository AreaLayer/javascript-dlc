import { Result_NoneNoneZ } from '../structs/Result_NoneNoneZ.mjs';
import { Result_Bolt11InvoiceFeaturesDecodeErrorZ } from '../structs/Result_Bolt11InvoiceFeaturesDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Features used within an invoice.
 */
export declare class Bolt11InvoiceFeatures extends CommonBase {
    /**
     * Serialize the Bolt11InvoiceFeatures object into a byte array which can be read by Bolt11InvoiceFeatures_read
     */
    write(): Uint8Array;
    /**
     * Read a Bolt11InvoiceFeatures from a byte array, created by Bolt11InvoiceFeatures_write
     */
    static constructor_read(ser: Uint8Array): Result_Bolt11InvoiceFeaturesDecodeErrorZ;
    /**
     * Checks if two Bolt11InvoiceFeaturess contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: Bolt11InvoiceFeatures): boolean;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Bolt11InvoiceFeatures
     */
    clone(): Bolt11InvoiceFeatures;
    /**
     * Generates a non-cryptographic 64-bit hash of the Bolt11InvoiceFeatures.
     */
    hash(): bigint;
    /**
     * Getting a route for a keysend payment to a private node requires providing the payee's
     * features (since they were not announced in a node announcement). However, keysend payments
     * don't have an invoice to pull the payee's features from, so this method is provided for use
     * when a [`Bolt11InvoiceFeatures`] is required in a route.
     *
     * MPP keysend is not widely supported yet, so we parameterize support to allow the user to
     * choose whether their router should find multi-part routes.
     */
    static constructor_for_keysend(allow_mpp: boolean): Bolt11InvoiceFeatures;
    /**
     * Create a blank Features with no features set
     */
    static constructor_empty(): Bolt11InvoiceFeatures;
    /**
     * Returns the feature set as a list of bytes, in little-endian. This is in reverse byte order
     * from most on-the-wire encodings.
     */
    le_flags(): Uint8Array;
    /**
     * Returns true if this `Features` has any optional flags set
     */
    supports_any_optional_bits(): boolean;
    /**
     * Returns true if this `Features` object contains required features unknown by `other`.
     */
    requires_unknown_bits_from(other: Bolt11InvoiceFeatures): boolean;
    /**
     * Returns the set of required features unknown by `other`, as their bit position.
     */
    required_unknown_bits_from(other: Bolt11InvoiceFeatures): bigint[];
    /**
     * Returns true if this `Features` object contains unknown feature flags which are set as
     * \"required\".
     */
    requires_unknown_bits(): boolean;
    /**
     * Returns true if this `Features` supports any bits which we do not know of
     */
    supports_unknown_bits(): boolean;
    /**
     * Sets a required feature bit. Errors if `bit` is outside the feature range as defined
     * by [BOLT 9].
     *
     * Note: Required bits are even. If an odd bit is given, then the corresponding even bit will
     * be set instead (i.e., `bit - 1`).
     *
     * [BOLT 9]: https://github.com/lightning/bolts/blob/master/09-features.md
     */
    set_required_feature_bit(bit: number): Result_NoneNoneZ;
    /**
     * Sets an optional feature bit. Errors if `bit` is outside the feature range as defined
     * by [BOLT 9].
     *
     * Note: Optional bits are odd. If an even bit is given, then the corresponding odd bit will be
     * set instead (i.e., `bit + 1`).
     *
     * [BOLT 9]: https://github.com/lightning/bolts/blob/master/09-features.md
     */
    set_optional_feature_bit(bit: number): Result_NoneNoneZ;
    /**
     * Sets a required custom feature bit. Errors if `bit` is outside the custom range as defined
     * by [bLIP 2] or if it is a known `T` feature.
     *
     * Note: Required bits are even. If an odd bit is given, then the corresponding even bit will
     * be set instead (i.e., `bit - 1`).
     *
     * [bLIP 2]: https://github.com/lightning/blips/blob/master/blip-0002.md#feature-bits
     */
    set_required_custom_bit(bit: number): Result_NoneNoneZ;
    /**
     * Sets an optional custom feature bit. Errors if `bit` is outside the custom range as defined
     * by [bLIP 2] or if it is a known `T` feature.
     *
     * Note: Optional bits are odd. If an even bit is given, then the corresponding odd bit will be
     * set instead (i.e., `bit + 1`).
     *
     * [bLIP 2]: https://github.com/lightning/blips/blob/master/blip-0002.md#feature-bits
     */
    set_optional_custom_bit(bit: number): Result_NoneNoneZ;
    /**
     * Set this feature as optional.
     */
    set_variable_length_onion_optional(): void;
    /**
     * Set this feature as required.
     */
    set_variable_length_onion_required(): void;
    /**
     * Checks if this feature is supported.
     */
    supports_variable_length_onion(): boolean;
    /**
     * Checks if this feature is required.
     */
    requires_variable_length_onion(): boolean;
    /**
     * Set this feature as optional.
     */
    set_payment_secret_optional(): void;
    /**
     * Set this feature as required.
     */
    set_payment_secret_required(): void;
    /**
     * Checks if this feature is supported.
     */
    supports_payment_secret(): boolean;
    /**
     * Checks if this feature is required.
     */
    requires_payment_secret(): boolean;
    /**
     * Set this feature as optional.
     */
    set_basic_mpp_optional(): void;
    /**
     * Set this feature as required.
     */
    set_basic_mpp_required(): void;
    /**
     * Checks if this feature is supported.
     */
    supports_basic_mpp(): boolean;
    /**
     * Checks if this feature is required.
     */
    requires_basic_mpp(): boolean;
    /**
     * Set this feature as optional.
     */
    set_payment_metadata_optional(): void;
    /**
     * Set this feature as required.
     */
    set_payment_metadata_required(): void;
    /**
     * Checks if this feature is supported.
     */
    supports_payment_metadata(): boolean;
    /**
     * Checks if this feature is required.
     */
    requires_payment_metadata(): boolean;
    /**
     * Set this feature as optional.
     */
    set_trampoline_routing_optional(): void;
    /**
     * Set this feature as required.
     */
    set_trampoline_routing_required(): void;
    /**
     * Checks if this feature is supported.
     */
    supports_trampoline_routing(): boolean;
    /**
     * Checks if this feature is required.
     */
    requires_trampoline_routing(): boolean;
}
