import { OfferId } from '../structs/OfferId.mjs';
import { InvoiceRequestFields } from '../structs/InvoiceRequestFields.mjs';
import { Result_Bolt12OfferContextDecodeErrorZ } from '../structs/Result_Bolt12OfferContextDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The context of a payment made for an invoice requested from a BOLT 12 [`Offer`].
 *
 * [`Offer`]: crate::offers::offer::Offer
 */
export class Bolt12OfferContext extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Bolt12OfferContext_free);
    }
    /**
     * The identifier of the [`Offer`].
     *
     * [`Offer`]: crate::offers::offer::Offer
     */
    get_offer_id() {
        const ret = bindings.Bolt12OfferContext_get_offer_id(this.ptr);
        const ret_hu_conv = new OfferId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The identifier of the [`Offer`].
     *
     * [`Offer`]: crate::offers::offer::Offer
     */
    set_offer_id(val) {
        bindings.Bolt12OfferContext_set_offer_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Fields from an [`InvoiceRequest`] sent for a [`Bolt12Invoice`].
     *
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
     */
    get_invoice_request() {
        const ret = bindings.Bolt12OfferContext_get_invoice_request(this.ptr);
        const ret_hu_conv = new InvoiceRequestFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Fields from an [`InvoiceRequest`] sent for a [`Bolt12Invoice`].
     *
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
     */
    set_invoice_request(val) {
        bindings.Bolt12OfferContext_set_invoice_request(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new Bolt12OfferContext given each field
     */
    static constructor_new(offer_id_arg, invoice_request_arg) {
        const ret = bindings.Bolt12OfferContext_new(CommonBase.get_ptr_of(offer_id_arg), CommonBase.get_ptr_of(invoice_request_arg));
        const ret_hu_conv = new Bolt12OfferContext(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.Bolt12OfferContext_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Bolt12OfferContext
     */
    clone() {
        const ret = bindings.Bolt12OfferContext_clone(this.ptr);
        const ret_hu_conv = new Bolt12OfferContext(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two Bolt12OfferContexts contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.Bolt12OfferContext_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the Bolt12OfferContext object into a byte array which can be read by Bolt12OfferContext_read
     */
    write() {
        const ret = bindings.Bolt12OfferContext_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a Bolt12OfferContext from a byte array, created by Bolt12OfferContext_write
     */
    static constructor_read(ser) {
        const ret = bindings.Bolt12OfferContext_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_Bolt12OfferContextDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=Bolt12OfferContext.mjs.map