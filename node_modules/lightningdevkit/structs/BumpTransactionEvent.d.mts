import { HTLCDescriptor } from '../structs/HTLCDescriptor.mjs';
import { HTLCOutputInCommitment } from '../structs/HTLCOutputInCommitment.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { AnchorDescriptor } from '../structs/AnchorDescriptor.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Represents the different types of transactions, originating from LDK, to be bumped.
 */
export declare class BumpTransactionEvent extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the BumpTransactionEvent
     */
    clone(): BumpTransactionEvent;
    /**
     * Utility method to constructs a new ChannelClose-variant BumpTransactionEvent
     */
    static constructor_channel_close(channel_id: ChannelId, counterparty_node_id: Uint8Array, claim_id: Uint8Array, package_target_feerate_sat_per_1000_weight: number, commitment_tx: Uint8Array, commitment_tx_fee_satoshis: bigint, anchor_descriptor: AnchorDescriptor, pending_htlcs: HTLCOutputInCommitment[]): BumpTransactionEvent;
    /**
     * Utility method to constructs a new HTLCResolution-variant BumpTransactionEvent
     */
    static constructor_htlcresolution(channel_id: ChannelId, counterparty_node_id: Uint8Array, claim_id: Uint8Array, target_feerate_sat_per_1000_weight: number, htlc_descriptors: HTLCDescriptor[], tx_lock_time: number): BumpTransactionEvent;
    /**
     * Checks if two BumpTransactionEvents contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: BumpTransactionEvent): boolean;
}
/** A BumpTransactionEvent of type ChannelClose */
export declare class BumpTransactionEvent_ChannelClose extends BumpTransactionEvent {
    /**
     * The `channel_id` of the channel which has been closed.
     */
    channel_id: ChannelId;
    /**
     * Counterparty in the closed channel.
     */
    counterparty_node_id: Uint8Array;
    /**
     * The unique identifier for the claim of the anchor output in the commitment transaction.
     *
     * The identifier must map to the set of external UTXOs assigned to the claim, such that
     * they can be reused when a new claim with the same identifier needs to be made, resulting
     * in a fee-bumping attempt.
     */
    claim_id: Uint8Array;
    /**
     * The target feerate that the transaction package, which consists of the commitment
     * transaction and the to-be-crafted child anchor transaction, must meet.
     */
    package_target_feerate_sat_per_1000_weight: number;
    /**
     * The channel's commitment transaction to bump the fee of. This transaction should be
     * broadcast along with the anchor transaction constructed as a result of consuming this
     * event.
     */
    commitment_tx: Uint8Array;
    /**
     * The absolute fee in satoshis of the commitment transaction. This can be used along the
     * with weight of the commitment transaction to determine its feerate.
     */
    commitment_tx_fee_satoshis: bigint;
    /**
     * The descriptor to sign the anchor input of the anchor transaction constructed as a
     * result of consuming this event.
     */
    anchor_descriptor: AnchorDescriptor;
    /**
     * The set of pending HTLCs on the commitment transaction that need to be resolved once the
     * commitment transaction confirms.
     */
    pending_htlcs: HTLCOutputInCommitment[];
}
/** A BumpTransactionEvent of type HTLCResolution */
export declare class BumpTransactionEvent_HTLCResolution extends BumpTransactionEvent {
    /**
     * The `channel_id` of the channel which has been closed.
     */
    channel_id: ChannelId;
    /**
     * Counterparty in the closed channel.
     */
    counterparty_node_id: Uint8Array;
    /**
     * The unique identifier for the claim of the HTLCs in the confirmed commitment
     * transaction.
     *
     * The identifier must map to the set of external UTXOs assigned to the claim, such that
     * they can be reused when a new claim with the same identifier needs to be made, resulting
     * in a fee-bumping attempt.
     */
    claim_id: Uint8Array;
    /**
     * The target feerate that the resulting HTLC transaction must meet.
     */
    target_feerate_sat_per_1000_weight: number;
    /**
     * The set of pending HTLCs on the confirmed commitment that need to be claimed, preferably
     * by the same transaction.
     */
    htlc_descriptors: HTLCDescriptor[];
    /**
     * The locktime required for the resulting HTLC transaction.
     */
    tx_lock_time: number;
}
