import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A handler for [`Event::BumpTransaction`] events that sources confirmed UTXOs from a
 * [`CoinSelectionSource`] to fee bump transactions via Child-Pays-For-Parent (CPFP) or
 * Replace-By-Fee (RBF).
 *
 * [`Event::BumpTransaction`]: crate::events::Event::BumpTransaction
 */
export class BumpTransactionEventHandler extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.BumpTransactionEventHandler_free);
    }
    /**
     * Returns a new instance capable of handling [`Event::BumpTransaction`] events.
     *
     * [`Event::BumpTransaction`]: crate::events::Event::BumpTransaction
     */
    static constructor_new(broadcaster, utxo_source, signer_provider, logger) {
        const ret = bindings.BumpTransactionEventHandler_new(CommonBase.get_ptr_of(broadcaster), CommonBase.get_ptr_of(utxo_source), CommonBase.get_ptr_of(signer_provider), CommonBase.get_ptr_of(logger));
        const ret_hu_conv = new BumpTransactionEventHandler(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, broadcaster);
        CommonBase.add_ref_from(ret_hu_conv, utxo_source);
        CommonBase.add_ref_from(ret_hu_conv, signer_provider);
        CommonBase.add_ref_from(ret_hu_conv, logger);
        return ret_hu_conv;
    }
    /**
     * Handles all variants of [`BumpTransactionEvent`].
     */
    handle_event(event) {
        bindings.BumpTransactionEventHandler_handle_event(this.ptr, CommonBase.get_ptr_of(event));
    }
}
//# sourceMappingURL=BumpTransactionEventHandler.mjs.map