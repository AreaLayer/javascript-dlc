import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { NodeId } from '../structs/NodeId.mjs';
import { RoutingFees } from '../structs/RoutingFees.mjs';
import { FirstHopCandidate } from '../structs/FirstHopCandidate.mjs';
import { PublicHopCandidate } from '../structs/PublicHopCandidate.mjs';
import { PrivateHopCandidate } from '../structs/PrivateHopCandidate.mjs';
import { BlindedPathCandidate } from '../structs/BlindedPathCandidate.mjs';
import { OneHopBlindedPathCandidate } from '../structs/OneHopBlindedPathCandidate.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A wrapper around the various hop representations.
 *
 * Can be used to examine the properties of a hop,
 * potentially to decide whether to include it in a route.
 */
export declare class CandidateRouteHop extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the CandidateRouteHop
     */
    clone(): CandidateRouteHop;
    /**
     * Utility method to constructs a new FirstHop-variant CandidateRouteHop
     */
    static constructor_first_hop(a: FirstHopCandidate): CandidateRouteHop;
    /**
     * Utility method to constructs a new PublicHop-variant CandidateRouteHop
     */
    static constructor_public_hop(a: PublicHopCandidate): CandidateRouteHop;
    /**
     * Utility method to constructs a new PrivateHop-variant CandidateRouteHop
     */
    static constructor_private_hop(a: PrivateHopCandidate): CandidateRouteHop;
    /**
     * Utility method to constructs a new Blinded-variant CandidateRouteHop
     */
    static constructor_blinded(a: BlindedPathCandidate): CandidateRouteHop;
    /**
     * Utility method to constructs a new OneHopBlinded-variant CandidateRouteHop
     */
    static constructor_one_hop_blinded(a: OneHopBlindedPathCandidate): CandidateRouteHop;
    /**
     * Returns the globally unique short channel ID for this hop, if one is known.
     *
     * This only returns `Some` if the channel is public (either our own, or one we've learned
     * from the public network graph), and thus the short channel ID we have for this channel is
     * globally unique and identifies this channel in a global namespace.
     */
    globally_unique_short_channel_id(): Option_u64Z;
    /**
     * Returns the required difference in HTLC CLTV expiry between the [`Self::source`] and the
     * next-hop for an HTLC taking this hop.
     *
     * This is the time that the node(s) in this hop have to claim the HTLC on-chain if the
     * next-hop goes on chain with a payment preimage.
     */
    cltv_expiry_delta(): number;
    /**
     * Returns the minimum amount that can be sent over this hop, in millisatoshis.
     */
    htlc_minimum_msat(): bigint;
    /**
     * Returns the fees that must be paid to route an HTLC over this channel.
     */
    fees(): RoutingFees;
    /**
     * Returns the source node id of current hop.
     *
     * Source node id refers to the node forwarding the HTLC through this hop.
     *
     * For [`Self::FirstHop`] we return payer's node id.
     */
    source(): NodeId;
    /**
     * Returns the target node id of this hop, if known.
     *
     * Target node id refers to the node receiving the HTLC after this hop.
     *
     * For [`Self::Blinded`] we return `None` because the ultimate destination after the blinded
     * path is unknown.
     *
     * For [`Self::OneHopBlinded`] we return `None` because the target is the same as the source,
     * and such a return value would be somewhat nonsensical.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    target(): NodeId;
}
/** A CandidateRouteHop of type FirstHop */
export declare class CandidateRouteHop_FirstHop extends CandidateRouteHop {
    first_hop: FirstHopCandidate;
}
/** A CandidateRouteHop of type PublicHop */
export declare class CandidateRouteHop_PublicHop extends CandidateRouteHop {
    public_hop: PublicHopCandidate;
}
/** A CandidateRouteHop of type PrivateHop */
export declare class CandidateRouteHop_PrivateHop extends CandidateRouteHop {
    private_hop: PrivateHopCandidate;
}
/** A CandidateRouteHop of type Blinded */
export declare class CandidateRouteHop_Blinded extends CandidateRouteHop {
    blinded: BlindedPathCandidate;
}
/** A CandidateRouteHop of type OneHopBlinded */
export declare class CandidateRouteHop_OneHopBlinded extends CandidateRouteHop {
    one_hop_blinded: OneHopBlindedPathCandidate;
}
