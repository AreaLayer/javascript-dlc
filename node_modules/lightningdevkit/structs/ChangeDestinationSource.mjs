import { Result_CVec_u8ZNoneZ } from '../structs/Result_CVec_u8ZNoneZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
class LDKChangeDestinationSourceHolder {
    constructor() {
        this.held = null;
    }
}
/**
 * A helper trait that describes an on-chain wallet capable of returning a (change) destination
 * script.
 */
export class ChangeDestinationSource extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.ChangeDestinationSource_free);
        this.bindings_instance = null;
    }
    /** Creates a new instance of ChangeDestinationSource from a given implementation */
    static new_impl(arg) {
        const impl_holder = new LDKChangeDestinationSourceHolder();
        let structImplementation = {
            get_change_destination_script() {
                const ret = arg.get_change_destination_script();
                const result = ret.clone_ptr();
                return result;
            },
        };
        const ptr_idx = bindings.LDKChangeDestinationSource_new(structImplementation);
        impl_holder.held = new ChangeDestinationSource(null, ptr_idx[0]);
        impl_holder.held.instance_idx = ptr_idx[1];
        impl_holder.held.bindings_instance = structImplementation;
        return impl_holder.held;
    }
    /**
     * Returns a script pubkey which can be used as a change destination for
     * [`OutputSpender::spend_spendable_outputs`].
     *
     * This method should return a different value each time it is called, to avoid linking
     * on-chain funds controlled to the same user.
     */
    get_change_destination_script() {
        const ret = bindings.ChangeDestinationSource_get_change_destination_script(this.ptr);
        const ret_hu_conv = Result_CVec_u8ZNoneZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=ChangeDestinationSource.mjs.map