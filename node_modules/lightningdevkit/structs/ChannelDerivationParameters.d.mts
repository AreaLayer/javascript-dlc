import { Result_ChannelDerivationParametersDecodeErrorZ } from '../structs/Result_ChannelDerivationParametersDecodeErrorZ.mjs';
import { ChannelTransactionParameters } from '../structs/ChannelTransactionParameters.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * The parameters required to derive a channel signer via [`SignerProvider`].
 */
export declare class ChannelDerivationParameters extends CommonBase {
    /**
     * The value in satoshis of the channel we're attempting to spend the anchor output of.
     */
    get_value_satoshis(): bigint;
    /**
     * The value in satoshis of the channel we're attempting to spend the anchor output of.
     */
    set_value_satoshis(val: bigint): void;
    /**
     * The unique identifier to re-derive the signer for the associated channel.
     */
    get_keys_id(): Uint8Array;
    /**
     * The unique identifier to re-derive the signer for the associated channel.
     */
    set_keys_id(val: Uint8Array): void;
    /**
     * The necessary channel parameters that need to be provided to the re-derived signer through
     * [`ChannelSigner::provide_channel_parameters`].
     */
    get_transaction_parameters(): ChannelTransactionParameters;
    /**
     * The necessary channel parameters that need to be provided to the re-derived signer through
     * [`ChannelSigner::provide_channel_parameters`].
     */
    set_transaction_parameters(val: ChannelTransactionParameters): void;
    /**
     * Constructs a new ChannelDerivationParameters given each field
     */
    static constructor_new(value_satoshis_arg: bigint, keys_id_arg: Uint8Array, transaction_parameters_arg: ChannelTransactionParameters): ChannelDerivationParameters;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ChannelDerivationParameters
     */
    clone(): ChannelDerivationParameters;
    /**
     * Checks if two ChannelDerivationParameterss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: ChannelDerivationParameters): boolean;
    /**
     * Serialize the ChannelDerivationParameters object into a byte array which can be read by ChannelDerivationParameters_read
     */
    write(): Uint8Array;
    /**
     * Read a ChannelDerivationParameters from a byte array, created by ChannelDerivationParameters_write
     */
    static constructor_read(ser: Uint8Array): Result_ChannelDerivationParametersDecodeErrorZ;
}
