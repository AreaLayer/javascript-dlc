import { Result_ChannelDerivationParametersDecodeErrorZ } from '../structs/Result_ChannelDerivationParametersDecodeErrorZ.mjs';
import { ChannelTransactionParameters } from '../structs/ChannelTransactionParameters.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The parameters required to derive a channel signer via [`SignerProvider`].
 */
export class ChannelDerivationParameters extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.ChannelDerivationParameters_free);
    }
    /**
     * The value in satoshis of the channel we're attempting to spend the anchor output of.
     */
    get_value_satoshis() {
        const ret = bindings.ChannelDerivationParameters_get_value_satoshis(this.ptr);
        return ret;
    }
    /**
     * The value in satoshis of the channel we're attempting to spend the anchor output of.
     */
    set_value_satoshis(val) {
        bindings.ChannelDerivationParameters_set_value_satoshis(this.ptr, val);
    }
    /**
     * The unique identifier to re-derive the signer for the associated channel.
     */
    get_keys_id() {
        const ret = bindings.ChannelDerivationParameters_get_keys_id(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The unique identifier to re-derive the signer for the associated channel.
     */
    set_keys_id(val) {
        bindings.ChannelDerivationParameters_set_keys_id(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * The necessary channel parameters that need to be provided to the re-derived signer through
     * [`ChannelSigner::provide_channel_parameters`].
     */
    get_transaction_parameters() {
        const ret = bindings.ChannelDerivationParameters_get_transaction_parameters(this.ptr);
        const ret_hu_conv = new ChannelTransactionParameters(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The necessary channel parameters that need to be provided to the re-derived signer through
     * [`ChannelSigner::provide_channel_parameters`].
     */
    set_transaction_parameters(val) {
        bindings.ChannelDerivationParameters_set_transaction_parameters(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new ChannelDerivationParameters given each field
     */
    static constructor_new(value_satoshis_arg, keys_id_arg, transaction_parameters_arg) {
        const ret = bindings.ChannelDerivationParameters_new(value_satoshis_arg, bindings.encodeUint8Array(bindings.check_arr_len(keys_id_arg, 32)), CommonBase.get_ptr_of(transaction_parameters_arg));
        const ret_hu_conv = new ChannelDerivationParameters(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.ChannelDerivationParameters_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ChannelDerivationParameters
     */
    clone() {
        const ret = bindings.ChannelDerivationParameters_clone(this.ptr);
        const ret_hu_conv = new ChannelDerivationParameters(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two ChannelDerivationParameterss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.ChannelDerivationParameters_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the ChannelDerivationParameters object into a byte array which can be read by ChannelDerivationParameters_read
     */
    write() {
        const ret = bindings.ChannelDerivationParameters_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a ChannelDerivationParameters from a byte array, created by ChannelDerivationParameters_write
     */
    static constructor_read(ser) {
        const ret = bindings.ChannelDerivationParameters_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_ChannelDerivationParametersDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=ChannelDerivationParameters.mjs.map