import { CommonBase } from './CommonBase.mjs';
/**
 * A subset of [`CommonOpenChannelFields`], containing various parameters which are set by the
 * channel initiator and which are not part of the channel funding transaction.
 */
export declare class ChannelParameters extends CommonBase {
    /**
     * The threshold below which outputs on transactions broadcast by the channel initiator will be
     * omitted.
     */
    get_dust_limit_satoshis(): bigint;
    /**
     * The threshold below which outputs on transactions broadcast by the channel initiator will be
     * omitted.
     */
    set_dust_limit_satoshis(val: bigint): void;
    /**
     * The maximum inbound HTLC value in flight towards channel initiator, in milli-satoshi
     */
    get_max_htlc_value_in_flight_msat(): bigint;
    /**
     * The maximum inbound HTLC value in flight towards channel initiator, in milli-satoshi
     */
    set_max_htlc_value_in_flight_msat(val: bigint): void;
    /**
     * The minimum HTLC size for HTLCs towards the channel initiator, in milli-satoshi
     */
    get_htlc_minimum_msat(): bigint;
    /**
     * The minimum HTLC size for HTLCs towards the channel initiator, in milli-satoshi
     */
    set_htlc_minimum_msat(val: bigint): void;
    /**
     * The feerate for the commitment transaction set by the channel initiator until updated by
     * [`UpdateFee`]
     */
    get_commitment_feerate_sat_per_1000_weight(): number;
    /**
     * The feerate for the commitment transaction set by the channel initiator until updated by
     * [`UpdateFee`]
     */
    set_commitment_feerate_sat_per_1000_weight(val: number): void;
    /**
     * The number of blocks which the non-channel-initator will have to wait to claim on-chain
     * funds if they broadcast a commitment transaction.
     */
    get_to_self_delay(): number;
    /**
     * The number of blocks which the non-channel-initator will have to wait to claim on-chain
     * funds if they broadcast a commitment transaction.
     */
    set_to_self_delay(val: number): void;
    /**
     * The maximum number of pending HTLCs towards the channel initiator.
     */
    get_max_accepted_htlcs(): number;
    /**
     * The maximum number of pending HTLCs towards the channel initiator.
     */
    set_max_accepted_htlcs(val: number): void;
    /**
     * Constructs a new ChannelParameters given each field
     */
    static constructor_new(dust_limit_satoshis_arg: bigint, max_htlc_value_in_flight_msat_arg: bigint, htlc_minimum_msat_arg: bigint, commitment_feerate_sat_per_1000_weight_arg: number, to_self_delay_arg: number, max_accepted_htlcs_arg: number): ChannelParameters;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ChannelParameters
     */
    clone(): ChannelParameters;
    /**
     * Generates a non-cryptographic 64-bit hash of the ChannelParameters.
     */
    hash(): bigint;
    /**
     * Checks if two ChannelParameterss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: ChannelParameters): boolean;
}
