import { Option_ThirtyTwoBytesZ } from '../structs/Option_ThirtyTwoBytesZ.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_ChannelReestablishDecodeErrorZ } from '../structs/Result_ChannelReestablishDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A [`channel_reestablish`] message to be sent to or received from a peer.
 *
 * [`channel_reestablish`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#message-retransmission
 */
export declare class ChannelReestablish extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The next commitment number for the sender
     */
    get_next_local_commitment_number(): bigint;
    /**
     * The next commitment number for the sender
     */
    set_next_local_commitment_number(val: bigint): void;
    /**
     * The next commitment number for the recipient
     */
    get_next_remote_commitment_number(): bigint;
    /**
     * The next commitment number for the recipient
     */
    set_next_remote_commitment_number(val: bigint): void;
    /**
     * Proof that the sender knows the per-commitment secret of a specific commitment transaction
     * belonging to the recipient
     */
    get_your_last_per_commitment_secret(): Uint8Array;
    /**
     * Proof that the sender knows the per-commitment secret of a specific commitment transaction
     * belonging to the recipient
     */
    set_your_last_per_commitment_secret(val: Uint8Array): void;
    /**
     * The sender's per-commitment point for their current commitment transaction
     */
    get_my_current_per_commitment_point(): Uint8Array;
    /**
     * The sender's per-commitment point for their current commitment transaction
     */
    set_my_current_per_commitment_point(val: Uint8Array): void;
    /**
     * The next funding transaction ID
     */
    get_next_funding_txid(): Option_ThirtyTwoBytesZ;
    /**
     * The next funding transaction ID
     */
    set_next_funding_txid(val: Option_ThirtyTwoBytesZ): void;
    /**
     * Constructs a new ChannelReestablish given each field
     */
    static constructor_new(channel_id_arg: ChannelId, next_local_commitment_number_arg: bigint, next_remote_commitment_number_arg: bigint, your_last_per_commitment_secret_arg: Uint8Array, my_current_per_commitment_point_arg: Uint8Array, next_funding_txid_arg: Option_ThirtyTwoBytesZ): ChannelReestablish;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ChannelReestablish
     */
    clone(): ChannelReestablish;
    /**
     * Generates a non-cryptographic 64-bit hash of the ChannelReestablish.
     */
    hash(): bigint;
    /**
     * Checks if two ChannelReestablishs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: ChannelReestablish): boolean;
    /**
     * Serialize the ChannelReestablish object into a byte array which can be read by ChannelReestablish_read
     */
    write(): Uint8Array;
    /**
     * Read a ChannelReestablish from a byte array, created by ChannelReestablish_write
     */
    static constructor_read(ser: Uint8Array): Result_ChannelReestablishDecodeErrorZ;
}
