import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_ClosingSignedDecodeErrorZ } from '../structs/Result_ClosingSignedDecodeErrorZ.mjs';
import { ClosingSignedFeeRange } from '../structs/ClosingSignedFeeRange.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A [`closing_signed`] message to be sent to or received from a peer.
 *
 * [`closing_signed`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#closing-negotiation-closing_signed
 */
export declare class ClosingSigned extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The proposed total fee for the closing transaction
     */
    get_fee_satoshis(): bigint;
    /**
     * The proposed total fee for the closing transaction
     */
    set_fee_satoshis(val: bigint): void;
    /**
     * A signature on the closing transaction
     */
    get_signature(): Uint8Array;
    /**
     * A signature on the closing transaction
     */
    set_signature(val: Uint8Array): void;
    /**
     * The minimum and maximum fees which the sender is willing to accept, provided only by new
     * nodes.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_fee_range(): ClosingSignedFeeRange;
    /**
     * The minimum and maximum fees which the sender is willing to accept, provided only by new
     * nodes.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_fee_range(val: ClosingSignedFeeRange | null): void;
    /**
     * Constructs a new ClosingSigned given each field
     *
     * Note that fee_range_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(channel_id_arg: ChannelId, fee_satoshis_arg: bigint, signature_arg: Uint8Array, fee_range_arg: ClosingSignedFeeRange | null): ClosingSigned;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ClosingSigned
     */
    clone(): ClosingSigned;
    /**
     * Generates a non-cryptographic 64-bit hash of the ClosingSigned.
     */
    hash(): bigint;
    /**
     * Checks if two ClosingSigneds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: ClosingSigned): boolean;
    /**
     * Serialize the ClosingSigned object into a byte array which can be read by ClosingSigned_read
     */
    write(): Uint8Array;
    /**
     * Read a ClosingSigned from a byte array, created by ClosingSigned_write
     */
    static constructor_read(ser: Uint8Array): Result_ClosingSignedDecodeErrorZ;
}
