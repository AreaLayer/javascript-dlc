import { Result_CommitmentSignedBatchDecodeErrorZ } from '../structs/Result_CommitmentSignedBatchDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Optional batch parameters for `commitment_signed` message.
 */
export declare class CommitmentSignedBatch extends CommonBase {
    /**
     * Batch size N: all N `commitment_signed` messages must be received before being processed
     */
    get_batch_size(): number;
    /**
     * Batch size N: all N `commitment_signed` messages must be received before being processed
     */
    set_batch_size(val: number): void;
    /**
     * The funding transaction, to discriminate among multiple pending funding transactions (e.g. in case of splicing)
     */
    get_funding_txid(): Uint8Array;
    /**
     * The funding transaction, to discriminate among multiple pending funding transactions (e.g. in case of splicing)
     */
    set_funding_txid(val: Uint8Array): void;
    /**
     * Constructs a new CommitmentSignedBatch given each field
     */
    static constructor_new(batch_size_arg: number, funding_txid_arg: Uint8Array): CommitmentSignedBatch;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the CommitmentSignedBatch
     */
    clone(): CommitmentSignedBatch;
    /**
     * Generates a non-cryptographic 64-bit hash of the CommitmentSignedBatch.
     */
    hash(): bigint;
    /**
     * Checks if two CommitmentSignedBatchs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: CommitmentSignedBatch): boolean;
    /**
     * Serialize the CommitmentSignedBatch object into a byte array which can be read by CommitmentSignedBatch_read
     */
    write(): Uint8Array;
    /**
     * Read a CommitmentSignedBatch from a byte array, created by CommitmentSignedBatch_write
     */
    static constructor_read(ser: Uint8Array): Result_CommitmentSignedBatchDecodeErrorZ;
}
