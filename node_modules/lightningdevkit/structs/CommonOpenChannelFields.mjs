import { Option_CVec_u8ZZ } from '../structs/Option_CVec_u8ZZ.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { ChannelTypeFeatures } from '../structs/ChannelTypeFeatures.mjs';
import { ChannelParameters } from '../structs/ChannelParameters.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Contains fields that are both common to [`open_channel`] and `open_channel2` messages.
 *
 * [`open_channel`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#the-open_channel-message
 */
export class CommonOpenChannelFields extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.CommonOpenChannelFields_free);
    }
    /**
     * The genesis hash of the blockchain where the channel is to be opened
     */
    get_chain_hash() {
        const ret = bindings.CommonOpenChannelFields_get_chain_hash(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The genesis hash of the blockchain where the channel is to be opened
     */
    set_chain_hash(val) {
        bindings.CommonOpenChannelFields_set_chain_hash(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * A temporary channel ID
     * For V2 channels: derived using a zeroed out value for the channel acceptor's revocation basepoint
     * For V1 channels: a temporary channel ID, until the funding outpoint is announced
     */
    get_temporary_channel_id() {
        const ret = bindings.CommonOpenChannelFields_get_temporary_channel_id(this.ptr);
        const ret_hu_conv = new ChannelId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * A temporary channel ID
     * For V2 channels: derived using a zeroed out value for the channel acceptor's revocation basepoint
     * For V1 channels: a temporary channel ID, until the funding outpoint is announced
     */
    set_temporary_channel_id(val) {
        bindings.CommonOpenChannelFields_set_temporary_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * For V1 channels: The channel value
     * For V2 channels: Part of the channel value contributed by the channel initiator
     */
    get_funding_satoshis() {
        const ret = bindings.CommonOpenChannelFields_get_funding_satoshis(this.ptr);
        return ret;
    }
    /**
     * For V1 channels: The channel value
     * For V2 channels: Part of the channel value contributed by the channel initiator
     */
    set_funding_satoshis(val) {
        bindings.CommonOpenChannelFields_set_funding_satoshis(this.ptr, val);
    }
    /**
     * The threshold below which outputs on transactions broadcast by the channel initiator will be
     * omitted
     */
    get_dust_limit_satoshis() {
        const ret = bindings.CommonOpenChannelFields_get_dust_limit_satoshis(this.ptr);
        return ret;
    }
    /**
     * The threshold below which outputs on transactions broadcast by the channel initiator will be
     * omitted
     */
    set_dust_limit_satoshis(val) {
        bindings.CommonOpenChannelFields_set_dust_limit_satoshis(this.ptr, val);
    }
    /**
     * The maximum inbound HTLC value in flight towards channel initiator, in milli-satoshi
     */
    get_max_htlc_value_in_flight_msat() {
        const ret = bindings.CommonOpenChannelFields_get_max_htlc_value_in_flight_msat(this.ptr);
        return ret;
    }
    /**
     * The maximum inbound HTLC value in flight towards channel initiator, in milli-satoshi
     */
    set_max_htlc_value_in_flight_msat(val) {
        bindings.CommonOpenChannelFields_set_max_htlc_value_in_flight_msat(this.ptr, val);
    }
    /**
     * The minimum HTLC size incoming to channel initiator, in milli-satoshi
     */
    get_htlc_minimum_msat() {
        const ret = bindings.CommonOpenChannelFields_get_htlc_minimum_msat(this.ptr);
        return ret;
    }
    /**
     * The minimum HTLC size incoming to channel initiator, in milli-satoshi
     */
    set_htlc_minimum_msat(val) {
        bindings.CommonOpenChannelFields_set_htlc_minimum_msat(this.ptr, val);
    }
    /**
     * The feerate for the commitment transaction set by the channel initiator until updated by
     * [`UpdateFee`]
     */
    get_commitment_feerate_sat_per_1000_weight() {
        const ret = bindings.CommonOpenChannelFields_get_commitment_feerate_sat_per_1000_weight(this.ptr);
        return ret;
    }
    /**
     * The feerate for the commitment transaction set by the channel initiator until updated by
     * [`UpdateFee`]
     */
    set_commitment_feerate_sat_per_1000_weight(val) {
        bindings.CommonOpenChannelFields_set_commitment_feerate_sat_per_1000_weight(this.ptr, val);
    }
    /**
     * The number of blocks which the counterparty will have to wait to claim on-chain funds if they
     * broadcast a commitment transaction
     */
    get_to_self_delay() {
        const ret = bindings.CommonOpenChannelFields_get_to_self_delay(this.ptr);
        return ret;
    }
    /**
     * The number of blocks which the counterparty will have to wait to claim on-chain funds if they
     * broadcast a commitment transaction
     */
    set_to_self_delay(val) {
        bindings.CommonOpenChannelFields_set_to_self_delay(this.ptr, val);
    }
    /**
     * The maximum number of inbound HTLCs towards channel initiator
     */
    get_max_accepted_htlcs() {
        const ret = bindings.CommonOpenChannelFields_get_max_accepted_htlcs(this.ptr);
        return ret;
    }
    /**
     * The maximum number of inbound HTLCs towards channel initiator
     */
    set_max_accepted_htlcs(val) {
        bindings.CommonOpenChannelFields_set_max_accepted_htlcs(this.ptr, val);
    }
    /**
     * The channel initiator's key controlling the funding transaction
     */
    get_funding_pubkey() {
        const ret = bindings.CommonOpenChannelFields_get_funding_pubkey(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The channel initiator's key controlling the funding transaction
     */
    set_funding_pubkey(val) {
        bindings.CommonOpenChannelFields_set_funding_pubkey(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Used to derive a revocation key for transactions broadcast by counterparty
     */
    get_revocation_basepoint() {
        const ret = bindings.CommonOpenChannelFields_get_revocation_basepoint(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Used to derive a revocation key for transactions broadcast by counterparty
     */
    set_revocation_basepoint(val) {
        bindings.CommonOpenChannelFields_set_revocation_basepoint(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * A payment key to channel initiator for transactions broadcast by counterparty
     */
    get_payment_basepoint() {
        const ret = bindings.CommonOpenChannelFields_get_payment_basepoint(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * A payment key to channel initiator for transactions broadcast by counterparty
     */
    set_payment_basepoint(val) {
        bindings.CommonOpenChannelFields_set_payment_basepoint(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Used to derive a payment key to channel initiator for transactions broadcast by channel
     * initiator
     */
    get_delayed_payment_basepoint() {
        const ret = bindings.CommonOpenChannelFields_get_delayed_payment_basepoint(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Used to derive a payment key to channel initiator for transactions broadcast by channel
     * initiator
     */
    set_delayed_payment_basepoint(val) {
        bindings.CommonOpenChannelFields_set_delayed_payment_basepoint(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Used to derive an HTLC payment key to channel initiator
     */
    get_htlc_basepoint() {
        const ret = bindings.CommonOpenChannelFields_get_htlc_basepoint(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Used to derive an HTLC payment key to channel initiator
     */
    set_htlc_basepoint(val) {
        bindings.CommonOpenChannelFields_set_htlc_basepoint(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * The first to-be-broadcast-by-channel-initiator transaction's per commitment point
     */
    get_first_per_commitment_point() {
        const ret = bindings.CommonOpenChannelFields_get_first_per_commitment_point(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The first to-be-broadcast-by-channel-initiator transaction's per commitment point
     */
    set_first_per_commitment_point(val) {
        bindings.CommonOpenChannelFields_set_first_per_commitment_point(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * The channel flags to be used
     */
    get_channel_flags() {
        const ret = bindings.CommonOpenChannelFields_get_channel_flags(this.ptr);
        return ret;
    }
    /**
     * The channel flags to be used
     */
    set_channel_flags(val) {
        bindings.CommonOpenChannelFields_set_channel_flags(this.ptr, val);
    }
    /**
     * Optionally, a request to pre-set the to-channel-initiator output's scriptPubkey for when we
     * collaboratively close
     */
    get_shutdown_scriptpubkey() {
        const ret = bindings.CommonOpenChannelFields_get_shutdown_scriptpubkey(this.ptr);
        const ret_hu_conv = Option_CVec_u8ZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Optionally, a request to pre-set the to-channel-initiator output's scriptPubkey for when we
     * collaboratively close
     */
    set_shutdown_scriptpubkey(val) {
        bindings.CommonOpenChannelFields_set_shutdown_scriptpubkey(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The channel type that this channel will represent
     *
     * If this is `None`, we derive the channel type from the intersection of our
     * feature bits with our counterparty's feature bits from the [`Init`] message.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_channel_type() {
        const ret = bindings.CommonOpenChannelFields_get_channel_type(this.ptr);
        const ret_hu_conv = new ChannelTypeFeatures(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel type that this channel will represent
     *
     * If this is `None`, we derive the channel type from the intersection of our
     * feature bits with our counterparty's feature bits from the [`Init`] message.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_channel_type(val) {
        bindings.CommonOpenChannelFields_set_channel_type(this.ptr, val == null ? 0n : CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new CommonOpenChannelFields given each field
     *
     * Note that channel_type_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(chain_hash_arg, temporary_channel_id_arg, funding_satoshis_arg, dust_limit_satoshis_arg, max_htlc_value_in_flight_msat_arg, htlc_minimum_msat_arg, commitment_feerate_sat_per_1000_weight_arg, to_self_delay_arg, max_accepted_htlcs_arg, funding_pubkey_arg, revocation_basepoint_arg, payment_basepoint_arg, delayed_payment_basepoint_arg, htlc_basepoint_arg, first_per_commitment_point_arg, channel_flags_arg, shutdown_scriptpubkey_arg, channel_type_arg) {
        const ret = bindings.CommonOpenChannelFields_new(bindings.encodeUint8Array(bindings.check_arr_len(chain_hash_arg, 32)), CommonBase.get_ptr_of(temporary_channel_id_arg), funding_satoshis_arg, dust_limit_satoshis_arg, max_htlc_value_in_flight_msat_arg, htlc_minimum_msat_arg, commitment_feerate_sat_per_1000_weight_arg, to_self_delay_arg, max_accepted_htlcs_arg, bindings.encodeUint8Array(bindings.check_arr_len(funding_pubkey_arg, 33)), bindings.encodeUint8Array(bindings.check_arr_len(revocation_basepoint_arg, 33)), bindings.encodeUint8Array(bindings.check_arr_len(payment_basepoint_arg, 33)), bindings.encodeUint8Array(bindings.check_arr_len(delayed_payment_basepoint_arg, 33)), bindings.encodeUint8Array(bindings.check_arr_len(htlc_basepoint_arg, 33)), bindings.encodeUint8Array(bindings.check_arr_len(first_per_commitment_point_arg, 33)), channel_flags_arg, CommonBase.get_ptr_of(shutdown_scriptpubkey_arg), channel_type_arg == null ? 0n : CommonBase.get_ptr_of(channel_type_arg));
        const ret_hu_conv = new CommonOpenChannelFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.CommonOpenChannelFields_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the CommonOpenChannelFields
     */
    clone() {
        const ret = bindings.CommonOpenChannelFields_clone(this.ptr);
        const ret_hu_conv = new CommonOpenChannelFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the CommonOpenChannelFields.
     */
    hash() {
        const ret = bindings.CommonOpenChannelFields_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two CommonOpenChannelFieldss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.CommonOpenChannelFields_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * The [`ChannelParameters`] for this channel.
     */
    channel_parameters() {
        const ret = bindings.CommonOpenChannelFields_channel_parameters(this.ptr);
        const ret_hu_conv = new ChannelParameters(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=CommonOpenChannelFields.mjs.map