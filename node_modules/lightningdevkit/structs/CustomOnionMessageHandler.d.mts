import { Option_CVec_u8ZZ } from '../structs/Option_CVec_u8ZZ.mjs';
import { OnionMessageContents } from '../structs/OnionMessageContents.mjs';
import { Option_C2Tuple_OnionMessageContentsResponseInstructionZZ } from '../structs/Option_C2Tuple_OnionMessageContentsResponseInstructionZZ.mjs';
import { Result_COption_OnionMessageContentsZDecodeErrorZ } from '../structs/Result_COption_OnionMessageContentsZDecodeErrorZ.mjs';
import { TwoTuple_OnionMessageContentsMessageSendInstructionsZ } from '../structs/TwoTuple_OnionMessageContentsMessageSendInstructionsZ.mjs';
import { Responder } from '../structs/Responder.mjs';
import { CommonBase } from './CommonBase.mjs';
/** An implementation of CustomOnionMessageHandler */
export interface CustomOnionMessageHandlerInterface {
    /**Called with the custom message that was received, returning a response to send, if any.
     *
     * The returned [`Self::CustomMessage`], if any, is enqueued to be sent by [`OnionMessenger`].
     *
     * Note that responder (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    handle_custom_message(message: OnionMessageContents, context: Option_CVec_u8ZZ, responder: Responder): Option_C2Tuple_OnionMessageContentsResponseInstructionZZ;
    /**Read a custom message of type `message_type` from `buffer`, returning `Ok(None)` if the
     * message type is unknown.
     */
    read_custom_message(message_type: bigint, buffer: Uint8Array): Result_COption_OnionMessageContentsZDecodeErrorZ;
    /**Releases any [`Self::CustomMessage`]s that need to be sent.
     *
     * Typically, this is used for messages initiating a message flow rather than in response to
     * another message. The latter should use the return value of [`Self::handle_custom_message`].
     */
    release_pending_custom_messages(): TwoTuple_OnionMessageContentsMessageSendInstructionsZ[];
}
/**
 * Handler for custom onion messages. If you are using [`SimpleArcOnionMessenger`],
 * [`SimpleRefOnionMessenger`], or prefer to ignore inbound custom onion messages,
 * [`IgnoringMessageHandler`] must be provided to [`OnionMessenger::new`]. Otherwise, a custom
 * implementation of this trait must be provided, with [`CustomMessage`] specifying the supported
 * message types.
 *
 * See [`OnionMessenger`] for example usage.
 *
 * [`IgnoringMessageHandler`]: crate::ln::peer_handler::IgnoringMessageHandler
 * [`CustomMessage`]: Self::CustomMessage
 */
export declare class CustomOnionMessageHandler extends CommonBase {
    /** Creates a new instance of CustomOnionMessageHandler from a given implementation */
    static new_impl(arg: CustomOnionMessageHandlerInterface): CustomOnionMessageHandler;
    /**
     * Called with the custom message that was received, returning a response to send, if any.
     *
     * The returned [`Self::CustomMessage`], if any, is enqueued to be sent by [`OnionMessenger`].
     *
     * Note that responder (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    handle_custom_message(message: OnionMessageContents, context: Option_CVec_u8ZZ, responder: Responder | null): Option_C2Tuple_OnionMessageContentsResponseInstructionZZ;
    /**
     * Read a custom message of type `message_type` from `buffer`, returning `Ok(None)` if the
     * message type is unknown.
     */
    read_custom_message(message_type: bigint, buffer: Uint8Array): Result_COption_OnionMessageContentsZDecodeErrorZ;
    /**
     * Releases any [`Self::CustomMessage`]s that need to be sent.
     *
     * Typically, this is used for messages initiating a message flow rather than in response to
     * another message. The latter should use the return value of [`Self::handle_custom_message`].
     */
    release_pending_custom_messages(): TwoTuple_OnionMessageContentsMessageSendInstructionsZ[];
}
