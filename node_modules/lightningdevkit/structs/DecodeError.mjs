import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An error in decoding a message or struct.
 */
export class DecodeError extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.DecodeError_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKDecodeError_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new DecodeError_UnknownVersion(ptr);
            case 1: return new DecodeError_UnknownRequiredFeature(ptr);
            case 2: return new DecodeError_InvalidValue(ptr);
            case 3: return new DecodeError_ShortRead(ptr);
            case 4: return new DecodeError_BadLengthDescriptor(ptr);
            case 5: return new DecodeError_Io(ptr);
            case 6: return new DecodeError_UnsupportedCompression(ptr);
            case 7: return new DecodeError_DangerousValue(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.DecodeError_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the DecodeError
     */
    clone() {
        const ret = bindings.DecodeError_clone(this.ptr);
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new UnknownVersion-variant DecodeError
     */
    static constructor_unknown_version() {
        const ret = bindings.DecodeError_unknown_version();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new UnknownRequiredFeature-variant DecodeError
     */
    static constructor_unknown_required_feature() {
        const ret = bindings.DecodeError_unknown_required_feature();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new InvalidValue-variant DecodeError
     */
    static constructor_invalid_value() {
        const ret = bindings.DecodeError_invalid_value();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new ShortRead-variant DecodeError
     */
    static constructor_short_read() {
        const ret = bindings.DecodeError_short_read();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new BadLengthDescriptor-variant DecodeError
     */
    static constructor_bad_length_descriptor() {
        const ret = bindings.DecodeError_bad_length_descriptor();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Io-variant DecodeError
     */
    static constructor_io(a) {
        const ret = bindings.DecodeError_io(a);
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new UnsupportedCompression-variant DecodeError
     */
    static constructor_unsupported_compression() {
        const ret = bindings.DecodeError_unsupported_compression();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new DangerousValue-variant DecodeError
     */
    static constructor_dangerous_value() {
        const ret = bindings.DecodeError_dangerous_value();
        const ret_hu_conv = DecodeError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the DecodeError.
     */
    hash() {
        const ret = bindings.DecodeError_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two DecodeErrors contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b) {
        const ret = bindings.DecodeError_eq(this.ptr, CommonBase.get_ptr_of(b));
        return ret;
    }
    /**
     * Get the string representation of a DecodeError object
     */
    to_str() {
        const ret = bindings.DecodeError_to_str(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
}
/** A DecodeError of type UnknownVersion */
export class DecodeError_UnknownVersion extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A DecodeError of type UnknownRequiredFeature */
export class DecodeError_UnknownRequiredFeature extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A DecodeError of type InvalidValue */
export class DecodeError_InvalidValue extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A DecodeError of type ShortRead */
export class DecodeError_ShortRead extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A DecodeError of type BadLengthDescriptor */
export class DecodeError_BadLengthDescriptor extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A DecodeError of type Io */
export class DecodeError_Io extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        this.io = bindings.LDKDecodeError_Io_get_io(ptr);
    }
}
/** A DecodeError of type UnsupportedCompression */
export class DecodeError_UnsupportedCompression extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A DecodeError of type DangerousValue */
export class DecodeError_DangerousValue extends DecodeError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
//# sourceMappingURL=DecodeError.mjs.map