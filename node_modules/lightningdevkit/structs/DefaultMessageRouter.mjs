import { MessageRouter } from '../structs/MessageRouter.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A [`MessageRouter`] that can only route to a directly connected [`Destination`].
 *
 * # Privacy
 *
 * Creating [`BlindedMessagePath`]s may affect privacy since, if a suitable path cannot be found,
 * it will create a one-hop path using the recipient as the introduction node if it is a announced
 * node. Otherwise, there is no way to find a path to the introduction node in order to send a
 * message, and thus an `Err` is returned.
 */
export class DefaultMessageRouter extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.DefaultMessageRouter_free);
    }
    /**
     * Creates a [`DefaultMessageRouter`] using the given [`NetworkGraph`].
     */
    static constructor_new(network_graph, entropy_source) {
        const ret = bindings.DefaultMessageRouter_new(CommonBase.get_ptr_of(network_graph), CommonBase.get_ptr_of(entropy_source));
        const ret_hu_conv = new DefaultMessageRouter(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, network_graph);
        CommonBase.add_ref_from(ret_hu_conv, entropy_source);
        return ret_hu_conv;
    }
    /**
     * Constructs a new MessageRouter which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned MessageRouter must be freed before this_arg is
     */
    as_MessageRouter() {
        const ret = bindings.DefaultMessageRouter_as_MessageRouter(this.ptr);
        const ret_hu_conv = new MessageRouter(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=DefaultMessageRouter.mjs.map