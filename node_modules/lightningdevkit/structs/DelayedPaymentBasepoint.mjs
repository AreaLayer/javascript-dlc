import { Result_DelayedPaymentBasepointDecodeErrorZ } from '../structs/Result_DelayedPaymentBasepointDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Base key used in conjunction with a `per_commitment_point` to generate a [`DelayedPaymentKey`].
 *
 * The delayed payment key is used to pay the commitment state broadcaster their
 * non-HTLC-encumbered funds after a delay to give their counterparty a chance to punish if the
 * state broadcasted was previously revoked.
 */
export class DelayedPaymentBasepoint extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.DelayedPaymentBasepoint_free);
    }
    get_a() {
        const ret = bindings.DelayedPaymentBasepoint_get_a(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    set_a(val) {
        bindings.DelayedPaymentBasepoint_set_a(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Constructs a new DelayedPaymentBasepoint given each field
     */
    static constructor_new(a_arg) {
        const ret = bindings.DelayedPaymentBasepoint_new(bindings.encodeUint8Array(bindings.check_arr_len(a_arg, 33)));
        const ret_hu_conv = new DelayedPaymentBasepoint(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two DelayedPaymentBasepoints contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.DelayedPaymentBasepoint_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    clone_ptr() {
        const ret = bindings.DelayedPaymentBasepoint_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the DelayedPaymentBasepoint
     */
    clone() {
        const ret = bindings.DelayedPaymentBasepoint_clone(this.ptr);
        const ret_hu_conv = new DelayedPaymentBasepoint(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the DelayedPaymentBasepoint.
     */
    hash() {
        const ret = bindings.DelayedPaymentBasepoint_hash(this.ptr);
        return ret;
    }
    /**
     * Get inner Public Key
     */
    to_public_key() {
        const ret = bindings.DelayedPaymentBasepoint_to_public_key(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Derives the \"tweak\" used in calculate [`DelayedPaymentKey::from_basepoint`].\n\n[`DelayedPaymentKey::from_basepoint`] calculates a private key as:\n`privkey = basepoint_secret + SHA256(per_commitment_point || basepoint)`\n\nThis calculates the hash part in the tweak derivation process, which is used to\nensure that each key is unique and cannot be guessed by an external party.
     */
    derive_add_tweak(per_commitment_point) {
        const ret = bindings.DelayedPaymentBasepoint_derive_add_tweak(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(per_commitment_point, 33)));
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Serialize the DelayedPaymentBasepoint object into a byte array which can be read by DelayedPaymentBasepoint_read
     */
    write() {
        const ret = bindings.DelayedPaymentBasepoint_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a DelayedPaymentBasepoint from a byte array, created by DelayedPaymentBasepoint_write
     */
    static constructor_read(ser) {
        const ret = bindings.DelayedPaymentBasepoint_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_DelayedPaymentBasepointDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=DelayedPaymentBasepoint.mjs.map