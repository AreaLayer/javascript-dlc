import { Result_DelayedPaymentKeyDecodeErrorZ } from '../structs/Result_DelayedPaymentKeyDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A derived key built from a [`DelayedPaymentBasepoint`] and `per_commitment_point`.
 *
 * The delayed payment key is used to pay the commitment state broadcaster their
 * non-HTLC-encumbered funds after a delay. This delay gives their counterparty a chance to
 * punish and claim all the channel funds if the state broadcasted was previously revoked.
 *
 * [See the BOLT specs]
 * <https://github.com/lightning/bolts/blob/master/03-transactions.md#localpubkey-local_htlcpubkey-remote_htlcpubkey-local_delayedpubkey-and-remote_delayedpubkey-derivation>
 * for more information on key derivation details.
 */
export class DelayedPaymentKey extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.DelayedPaymentKey_free);
    }
    get_a() {
        const ret = bindings.DelayedPaymentKey_get_a(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    set_a(val) {
        bindings.DelayedPaymentKey_set_a(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Constructs a new DelayedPaymentKey given each field
     */
    static constructor_new(a_arg) {
        const ret = bindings.DelayedPaymentKey_new(bindings.encodeUint8Array(bindings.check_arr_len(a_arg, 33)));
        const ret_hu_conv = new DelayedPaymentKey(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two DelayedPaymentKeys contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.DelayedPaymentKey_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    clone_ptr() {
        const ret = bindings.DelayedPaymentKey_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the DelayedPaymentKey
     */
    clone() {
        const ret = bindings.DelayedPaymentKey_clone(this.ptr);
        const ret_hu_conv = new DelayedPaymentKey(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Derive a public delayedpubkey using one node\'s `per_commitment_point` and its countersignatory\'s `basepoint`
     */
    static constructor_from_basepoint(countersignatory_basepoint, per_commitment_point) {
        const ret = bindings.DelayedPaymentKey_from_basepoint(CommonBase.get_ptr_of(countersignatory_basepoint), bindings.encodeUint8Array(bindings.check_arr_len(per_commitment_point, 33)));
        const ret_hu_conv = new DelayedPaymentKey(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, countersignatory_basepoint);
        return ret_hu_conv;
    }
    /**
     * Build a delayedpubkey directly from an already-derived private key
     */
    static constructor_from_secret_key(sk) {
        const ret = bindings.DelayedPaymentKey_from_secret_key(bindings.encodeUint8Array(bindings.check_arr_len(sk, 32)));
        const ret_hu_conv = new DelayedPaymentKey(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Get inner Public Key
     */
    to_public_key() {
        const ret = bindings.DelayedPaymentKey_to_public_key(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Serialize the DelayedPaymentKey object into a byte array which can be read by DelayedPaymentKey_read
     */
    write() {
        const ret = bindings.DelayedPaymentKey_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a DelayedPaymentKey from a byte array, created by DelayedPaymentKey_write
     */
    static constructor_read(ser) {
        const ret = bindings.DelayedPaymentKey_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_DelayedPaymentKeyDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=DelayedPaymentKey.mjs.map