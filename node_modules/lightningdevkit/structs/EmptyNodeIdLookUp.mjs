import { NodeIdLookUp } from '../structs/NodeIdLookUp.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A [`NodeIdLookUp`] that always returns `None`.
 */
export class EmptyNodeIdLookUp extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.EmptyNodeIdLookUp_free);
    }
    /**
     * Constructs a new EmptyNodeIdLookUp given each field
     */
    static constructor_new() {
        const ret = bindings.EmptyNodeIdLookUp_new();
        const ret_hu_conv = new EmptyNodeIdLookUp(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Constructs a new NodeIdLookUp which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned NodeIdLookUp must be freed before this_arg is
     */
    as_NodeIdLookUp() {
        const ret = bindings.EmptyNodeIdLookUp_as_NodeIdLookUp(this.ptr);
        const ret_hu_conv = new NodeIdLookUp(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=EmptyNodeIdLookUp.mjs.map