import { Option_C2Tuple_u64u16ZZ } from '../structs/Option_C2Tuple_u64u16ZZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * This enum is used to specify which error data to send to peers when failing back an HTLC
 * using [`ChannelManager::fail_htlc_backwards_with_reason`].
 *
 * For more info on failure codes, see <https://github.com/lightning/bolts/blob/master/04-onion-routing.md#failure-messages>.
 */
export class FailureCode extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.FailureCode_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKFailureCode_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new FailureCode_TemporaryNodeFailure(ptr);
            case 1: return new FailureCode_RequiredNodeFeatureMissing(ptr);
            case 2: return new FailureCode_IncorrectOrUnknownPaymentDetails(ptr);
            case 3: return new FailureCode_InvalidOnionPayload(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.FailureCode_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the FailureCode
     */
    clone() {
        const ret = bindings.FailureCode_clone(this.ptr);
        const ret_hu_conv = FailureCode.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new TemporaryNodeFailure-variant FailureCode
     */
    static constructor_temporary_node_failure() {
        const ret = bindings.FailureCode_temporary_node_failure();
        const ret_hu_conv = FailureCode.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new RequiredNodeFeatureMissing-variant FailureCode
     */
    static constructor_required_node_feature_missing() {
        const ret = bindings.FailureCode_required_node_feature_missing();
        const ret_hu_conv = FailureCode.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new IncorrectOrUnknownPaymentDetails-variant FailureCode
     */
    static constructor_incorrect_or_unknown_payment_details() {
        const ret = bindings.FailureCode_incorrect_or_unknown_payment_details();
        const ret_hu_conv = FailureCode.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new InvalidOnionPayload-variant FailureCode
     */
    static constructor_invalid_onion_payload(a) {
        const ret = bindings.FailureCode_invalid_onion_payload(CommonBase.get_ptr_of(a));
        const ret_hu_conv = FailureCode.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
}
/** A FailureCode of type TemporaryNodeFailure */
export class FailureCode_TemporaryNodeFailure extends FailureCode {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A FailureCode of type RequiredNodeFeatureMissing */
export class FailureCode_RequiredNodeFeatureMissing extends FailureCode {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A FailureCode of type IncorrectOrUnknownPaymentDetails */
export class FailureCode_IncorrectOrUnknownPaymentDetails extends FailureCode {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A FailureCode of type InvalidOnionPayload */
export class FailureCode_InvalidOnionPayload extends FailureCode {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const invalid_onion_payload = bindings.LDKFailureCode_InvalidOnionPayload_get_invalid_onion_payload(ptr);
        const invalid_onion_payload_hu_conv = Option_C2Tuple_u64u16ZZ.constr_from_ptr(invalid_onion_payload);
        CommonBase.add_ref_from(invalid_onion_payload_hu_conv, this);
        this.invalid_onion_payload = invalid_onion_payload_hu_conv;
    }
}
//# sourceMappingURL=FailureCode.mjs.map