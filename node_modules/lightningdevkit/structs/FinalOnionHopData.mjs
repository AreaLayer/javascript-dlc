import { Result_FinalOnionHopDataDecodeErrorZ } from '../structs/Result_FinalOnionHopDataDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Information communicated in the onion to the recipient for multi-part tracking and proof that
 * the payment is associated with an invoice.
 */
export class FinalOnionHopData extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.FinalOnionHopData_free);
    }
    /**
     * When sending a multi-part payment, this secret is used to identify a payment across HTLCs.
     * Because it is generated by the recipient and included in the invoice, it also provides
     * proof to the recipient that the payment was sent by someone with the generated invoice.
     */
    get_payment_secret() {
        const ret = bindings.FinalOnionHopData_get_payment_secret(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * When sending a multi-part payment, this secret is used to identify a payment across HTLCs.
     * Because it is generated by the recipient and included in the invoice, it also provides
     * proof to the recipient that the payment was sent by someone with the generated invoice.
     */
    set_payment_secret(val) {
        bindings.FinalOnionHopData_set_payment_secret(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * The intended total amount that this payment is for.
     *
     * Message serialization may panic if this value is more than 21 million Bitcoin.
     */
    get_total_msat() {
        const ret = bindings.FinalOnionHopData_get_total_msat(this.ptr);
        return ret;
    }
    /**
     * The intended total amount that this payment is for.
     *
     * Message serialization may panic if this value is more than 21 million Bitcoin.
     */
    set_total_msat(val) {
        bindings.FinalOnionHopData_set_total_msat(this.ptr, val);
    }
    /**
     * Constructs a new FinalOnionHopData given each field
     */
    static constructor_new(payment_secret_arg, total_msat_arg) {
        const ret = bindings.FinalOnionHopData_new(bindings.encodeUint8Array(bindings.check_arr_len(payment_secret_arg, 32)), total_msat_arg);
        const ret_hu_conv = new FinalOnionHopData(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.FinalOnionHopData_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the FinalOnionHopData
     */
    clone() {
        const ret = bindings.FinalOnionHopData_clone(this.ptr);
        const ret_hu_conv = new FinalOnionHopData(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the FinalOnionHopData object into a byte array which can be read by FinalOnionHopData_read
     */
    write() {
        const ret = bindings.FinalOnionHopData_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a FinalOnionHopData from a byte array, created by FinalOnionHopData_write
     */
    static constructor_read(ser) {
        const ret = bindings.FinalOnionHopData_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_FinalOnionHopDataDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=FinalOnionHopData.mjs.map