import { BlindedHopFeatures } from '../structs/BlindedHopFeatures.mjs';
import { PaymentRelay } from '../structs/PaymentRelay.mjs';
import { PaymentConstraints } from '../structs/PaymentConstraints.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Data to construct a [`BlindedHop`] for forwarding a payment.
 */
export declare class ForwardTlvs extends CommonBase {
    /**
     * The short channel id this payment should be forwarded out over.
     */
    get_short_channel_id(): bigint;
    /**
     * The short channel id this payment should be forwarded out over.
     */
    set_short_channel_id(val: bigint): void;
    /**
     * Payment parameters for relaying over [`Self::short_channel_id`].
     */
    get_payment_relay(): PaymentRelay;
    /**
     * Payment parameters for relaying over [`Self::short_channel_id`].
     */
    set_payment_relay(val: PaymentRelay): void;
    /**
     * Payment constraints for relaying over [`Self::short_channel_id`].
     */
    get_payment_constraints(): PaymentConstraints;
    /**
     * Payment constraints for relaying over [`Self::short_channel_id`].
     */
    set_payment_constraints(val: PaymentConstraints): void;
    /**
     * Supported and required features when relaying a payment onion containing this object's
     * corresponding [`BlindedHop::encrypted_payload`].
     *
     * [`BlindedHop::encrypted_payload`]: crate::blinded_path::BlindedHop::encrypted_payload
     */
    get_features(): BlindedHopFeatures;
    /**
     * Supported and required features when relaying a payment onion containing this object's
     * corresponding [`BlindedHop::encrypted_payload`].
     *
     * [`BlindedHop::encrypted_payload`]: crate::blinded_path::BlindedHop::encrypted_payload
     */
    set_features(val: BlindedHopFeatures): void;
    /**
     * Set if this [`BlindedPaymentPath`] is concatenated to another, to indicate the
     * [`BlindedPaymentPath::blinding_point`] of the appended blinded path.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_next_blinding_override(): Uint8Array;
    /**
     * Set if this [`BlindedPaymentPath`] is concatenated to another, to indicate the
     * [`BlindedPaymentPath::blinding_point`] of the appended blinded path.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_next_blinding_override(val: Uint8Array | null): void;
    /**
     * Constructs a new ForwardTlvs given each field
     *
     * Note that next_blinding_override_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(short_channel_id_arg: bigint, payment_relay_arg: PaymentRelay, payment_constraints_arg: PaymentConstraints, features_arg: BlindedHopFeatures, next_blinding_override_arg: Uint8Array | null): ForwardTlvs;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ForwardTlvs
     */
    clone(): ForwardTlvs;
    /**
     * Serialize the ForwardTlvs object into a byte array which can be read by ForwardTlvs_read
     */
    write(): Uint8Array;
}
