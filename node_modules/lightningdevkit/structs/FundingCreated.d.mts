import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_FundingCreatedDecodeErrorZ } from '../structs/Result_FundingCreatedDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A [`funding_created`] message to be sent to or received from a peer.
 *
 * Used in V1 channel establishment
 *
 * [`funding_created`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#the-funding_created-message
 */
export declare class FundingCreated extends CommonBase {
    /**
     * A temporary channel ID, until the funding is established
     */
    get_temporary_channel_id(): ChannelId;
    /**
     * A temporary channel ID, until the funding is established
     */
    set_temporary_channel_id(val: ChannelId): void;
    /**
     * The funding transaction ID
     */
    get_funding_txid(): Uint8Array;
    /**
     * The funding transaction ID
     */
    set_funding_txid(val: Uint8Array): void;
    /**
     * The specific output index funding this channel
     */
    get_funding_output_index(): number;
    /**
     * The specific output index funding this channel
     */
    set_funding_output_index(val: number): void;
    /**
     * The signature of the channel initiator (funder) on the initial commitment transaction
     */
    get_signature(): Uint8Array;
    /**
     * The signature of the channel initiator (funder) on the initial commitment transaction
     */
    set_signature(val: Uint8Array): void;
    /**
     * Constructs a new FundingCreated given each field
     */
    static constructor_new(temporary_channel_id_arg: ChannelId, funding_txid_arg: Uint8Array, funding_output_index_arg: number, signature_arg: Uint8Array): FundingCreated;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the FundingCreated
     */
    clone(): FundingCreated;
    /**
     * Generates a non-cryptographic 64-bit hash of the FundingCreated.
     */
    hash(): bigint;
    /**
     * Checks if two FundingCreateds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: FundingCreated): boolean;
    /**
     * Serialize the FundingCreated object into a byte array which can be read by FundingCreated_read
     */
    write(): Uint8Array;
    /**
     * Read a FundingCreated from a byte array, created by FundingCreated_write
     */
    static constructor_read(ser: Uint8Array): Result_FundingCreatedDecodeErrorZ;
}
