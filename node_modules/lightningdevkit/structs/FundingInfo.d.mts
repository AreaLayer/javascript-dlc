import { OutPoint } from '../structs/OutPoint.mjs';
import { Result_FundingInfoDecodeErrorZ } from '../structs/Result_FundingInfoDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * `FundingInfo` holds information about a channel's funding transaction.
 *
 * When LDK is set to manual propagation of the funding transaction
 * (via [`ChannelManager::unsafe_manual_funding_transaction_generated`),
 * LDK does not have the full transaction data. Instead, the `OutPoint`
 * for the funding is provided here.
 *
 * [`ChannelManager::unsafe_manual_funding_transaction_generated`]: crate::ln::channelmanager::ChannelManager::unsafe_manual_funding_transaction_generated
 */
export declare class FundingInfo extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the FundingInfo
     */
    clone(): FundingInfo;
    /**
     * Utility method to constructs a new Tx-variant FundingInfo
     */
    static constructor_tx(transaction: Uint8Array): FundingInfo;
    /**
     * Utility method to constructs a new OutPoint-variant FundingInfo
     */
    static constructor_out_point(outpoint: OutPoint): FundingInfo;
    /**
     * Checks if two FundingInfos contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: FundingInfo): boolean;
    /**
     * Serialize the FundingInfo object into a byte array which can be read by FundingInfo_read
     */
    write(): Uint8Array;
    /**
     * Read a FundingInfo from a byte array, created by FundingInfo_write
     */
    static constructor_read(ser: Uint8Array): Result_FundingInfoDecodeErrorZ;
}
/** A FundingInfo of type Tx */
export declare class FundingInfo_Tx extends FundingInfo {
    /**
     * The funding transaction
     */
    transaction: Uint8Array;
}
/** A FundingInfo of type OutPoint */
export declare class FundingInfo_OutPoint extends FundingInfo {
    /**
     * The outpoint of the funding
     */
    outpoint: OutPoint;
}
