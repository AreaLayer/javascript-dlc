import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_FundingSignedDecodeErrorZ } from '../structs/Result_FundingSignedDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A [`funding_signed`] message to be sent to or received from a peer.
 *
 * Used in V1 channel establishment
 *
 * [`funding_signed`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#the-funding_signed-message
 */
export declare class FundingSigned extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The signature of the channel acceptor (fundee) on the initial commitment transaction
     */
    get_signature(): Uint8Array;
    /**
     * The signature of the channel acceptor (fundee) on the initial commitment transaction
     */
    set_signature(val: Uint8Array): void;
    /**
     * Constructs a new FundingSigned given each field
     */
    static constructor_new(channel_id_arg: ChannelId, signature_arg: Uint8Array): FundingSigned;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the FundingSigned
     */
    clone(): FundingSigned;
    /**
     * Generates a non-cryptographic 64-bit hash of the FundingSigned.
     */
    hash(): bigint;
    /**
     * Checks if two FundingSigneds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: FundingSigned): boolean;
    /**
     * Serialize the FundingSigned object into a byte array which can be read by FundingSigned_read
     */
    write(): Uint8Array;
    /**
     * Read a FundingSigned from a byte array, created by FundingSigned_write
     */
    static constructor_read(ser: Uint8Array): Result_FundingSignedDecodeErrorZ;
}
