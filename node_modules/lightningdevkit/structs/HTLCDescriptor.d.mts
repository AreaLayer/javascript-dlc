import { TxOut } from '../structs/TxOut.mjs';
import { TxIn } from '../structs/TxIn.mjs';
import { Option_ThirtyTwoBytesZ } from '../structs/Option_ThirtyTwoBytesZ.mjs';
import { OutPoint } from '../structs/OutPoint.mjs';
import { ChannelDerivationParameters } from '../structs/ChannelDerivationParameters.mjs';
import { Result_HTLCDescriptorDecodeErrorZ } from '../structs/Result_HTLCDescriptorDecodeErrorZ.mjs';
import { HTLCOutputInCommitment } from '../structs/HTLCOutputInCommitment.mjs';
import { EcdsaChannelSigner } from '../structs/EcdsaChannelSigner.mjs';
import { SignerProvider } from '../structs/SignerProvider.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A descriptor used to sign for a commitment transaction's HTLC output.
 */
export declare class HTLCDescriptor extends CommonBase {
    /**
     * The parameters required to derive the signer for the HTLC input.
     */
    get_channel_derivation_parameters(): ChannelDerivationParameters;
    /**
     * The parameters required to derive the signer for the HTLC input.
     */
    set_channel_derivation_parameters(val: ChannelDerivationParameters): void;
    /**
     * The txid of the commitment transaction in which the HTLC output lives.
     */
    get_commitment_txid(): Uint8Array;
    /**
     * The txid of the commitment transaction in which the HTLC output lives.
     */
    set_commitment_txid(val: Uint8Array): void;
    /**
     * The number of the commitment transaction in which the HTLC output lives.
     */
    get_per_commitment_number(): bigint;
    /**
     * The number of the commitment transaction in which the HTLC output lives.
     */
    set_per_commitment_number(val: bigint): void;
    /**
     * The key tweak corresponding to the number of the commitment transaction in which the HTLC
     * output lives. This tweak is applied to all the basepoints for both parties in the channel to
     * arrive at unique keys per commitment.
     *
     * See <https://github.com/lightning/bolts/blob/master/03-transactions.md#keys> for more info.
     */
    get_per_commitment_point(): Uint8Array;
    /**
     * The key tweak corresponding to the number of the commitment transaction in which the HTLC
     * output lives. This tweak is applied to all the basepoints for both parties in the channel to
     * arrive at unique keys per commitment.
     *
     * See <https://github.com/lightning/bolts/blob/master/03-transactions.md#keys> for more info.
     */
    set_per_commitment_point(val: Uint8Array): void;
    /**
     * The feerate to use on the HTLC claiming transaction. This is always `0` for HTLCs
     * originating from a channel supporting anchor outputs, otherwise it is the channel's
     * negotiated feerate at the time the commitment transaction was built.
     */
    get_feerate_per_kw(): number;
    /**
     * The feerate to use on the HTLC claiming transaction. This is always `0` for HTLCs
     * originating from a channel supporting anchor outputs, otherwise it is the channel's
     * negotiated feerate at the time the commitment transaction was built.
     */
    set_feerate_per_kw(val: number): void;
    /**
     * The details of the HTLC as it appears in the commitment transaction.
     */
    get_htlc(): HTLCOutputInCommitment;
    /**
     * The details of the HTLC as it appears in the commitment transaction.
     */
    set_htlc(val: HTLCOutputInCommitment): void;
    /**
     * The preimage, if `Some`, to claim the HTLC output with. If `None`, the timeout path must be
     * taken.
     */
    get_preimage(): Option_ThirtyTwoBytesZ;
    /**
     * The preimage, if `Some`, to claim the HTLC output with. If `None`, the timeout path must be
     * taken.
     */
    set_preimage(val: Option_ThirtyTwoBytesZ): void;
    /**
     * The counterparty's signature required to spend the HTLC output.
     */
    get_counterparty_sig(): Uint8Array;
    /**
     * The counterparty's signature required to spend the HTLC output.
     */
    set_counterparty_sig(val: Uint8Array): void;
    /**
     * Constructs a new HTLCDescriptor given each field
     */
    static constructor_new(channel_derivation_parameters_arg: ChannelDerivationParameters, commitment_txid_arg: Uint8Array, per_commitment_number_arg: bigint, per_commitment_point_arg: Uint8Array, feerate_per_kw_arg: number, htlc_arg: HTLCOutputInCommitment, preimage_arg: Option_ThirtyTwoBytesZ, counterparty_sig_arg: Uint8Array): HTLCDescriptor;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the HTLCDescriptor
     */
    clone(): HTLCDescriptor;
    /**
     * Checks if two HTLCDescriptors contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: HTLCDescriptor): boolean;
    /**
     * Serialize the HTLCDescriptor object into a byte array which can be read by HTLCDescriptor_read
     */
    write(): Uint8Array;
    /**
     * Read a HTLCDescriptor from a byte array, created by HTLCDescriptor_write
     */
    static constructor_read(ser: Uint8Array): Result_HTLCDescriptorDecodeErrorZ;
    /**
     * Returns the outpoint of the HTLC output in the commitment transaction. This is the outpoint
     * being spent by the HTLC input in the HTLC transaction.
     */
    outpoint(): OutPoint;
    /**
     * Returns the UTXO to be spent by the HTLC input, which can be obtained via
     * [`Self::unsigned_tx_input`].
     */
    previous_utxo(): TxOut;
    /**
     * Returns the unsigned transaction input spending the HTLC output in the commitment
     * transaction.
     */
    unsigned_tx_input(): TxIn;
    /**
     * Returns the delayed output created as a result of spending the HTLC output in the commitment
     * transaction.
     */
    tx_output(): TxOut;
    /**
     * Returns the witness script of the HTLC output in the commitment transaction.
     */
    witness_script(): Uint8Array;
    /**
     * Returns the fully signed witness required to spend the HTLC output in the commitment
     * transaction.
     */
    tx_input_witness(signature: Uint8Array, witness_script: Uint8Array): Uint8Array;
    /**
     * Derives the channel signer required to sign the HTLC input.
     */
    derive_channel_signer(signer_provider: SignerProvider): EcdsaChannelSigner;
}
