import { Result_HeldHtlcAvailableDecodeErrorZ } from '../structs/Result_HeldHtlcAvailableDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An HTLC destined for the recipient of this message is being held upstream. The reply path
 * accompanying this onion message should be used to send a [`ReleaseHeldHtlc`] response, which
 * will cause the upstream HTLC to be released.
 */
export declare class HeldHtlcAvailable extends CommonBase {
    /**
     * The secret that will be used by the recipient of this message to release the held HTLC.
     */
    get_payment_release_secret(): Uint8Array;
    /**
     * The secret that will be used by the recipient of this message to release the held HTLC.
     */
    set_payment_release_secret(val: Uint8Array): void;
    /**
     * Constructs a new HeldHtlcAvailable given each field
     */
    static constructor_new(payment_release_secret_arg: Uint8Array): HeldHtlcAvailable;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the HeldHtlcAvailable
     */
    clone(): HeldHtlcAvailable;
    /**
     * Serialize the HeldHtlcAvailable object into a byte array which can be read by HeldHtlcAvailable_read
     */
    write(): Uint8Array;
    /**
     * Read a HeldHtlcAvailable from a byte array, created by HeldHtlcAvailable_write
     */
    static constructor_read(ser: Uint8Array): Result_HeldHtlcAvailableDecodeErrorZ;
}
