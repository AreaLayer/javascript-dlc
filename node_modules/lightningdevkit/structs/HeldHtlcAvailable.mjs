import { Result_HeldHtlcAvailableDecodeErrorZ } from '../structs/Result_HeldHtlcAvailableDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An HTLC destined for the recipient of this message is being held upstream. The reply path
 * accompanying this onion message should be used to send a [`ReleaseHeldHtlc`] response, which
 * will cause the upstream HTLC to be released.
 */
export class HeldHtlcAvailable extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.HeldHtlcAvailable_free);
    }
    /**
     * The secret that will be used by the recipient of this message to release the held HTLC.
     */
    get_payment_release_secret() {
        const ret = bindings.HeldHtlcAvailable_get_payment_release_secret(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The secret that will be used by the recipient of this message to release the held HTLC.
     */
    set_payment_release_secret(val) {
        bindings.HeldHtlcAvailable_set_payment_release_secret(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * Constructs a new HeldHtlcAvailable given each field
     */
    static constructor_new(payment_release_secret_arg) {
        const ret = bindings.HeldHtlcAvailable_new(bindings.encodeUint8Array(bindings.check_arr_len(payment_release_secret_arg, 32)));
        const ret_hu_conv = new HeldHtlcAvailable(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.HeldHtlcAvailable_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the HeldHtlcAvailable
     */
    clone() {
        const ret = bindings.HeldHtlcAvailable_clone(this.ptr);
        const ret_hu_conv = new HeldHtlcAvailable(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the HeldHtlcAvailable object into a byte array which can be read by HeldHtlcAvailable_read
     */
    write() {
        const ret = bindings.HeldHtlcAvailable_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a HeldHtlcAvailable from a byte array, created by HeldHtlcAvailable_write
     */
    static constructor_read(ser) {
        const ret = bindings.HeldHtlcAvailable_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_HeldHtlcAvailableDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=HeldHtlcAvailable.mjs.map