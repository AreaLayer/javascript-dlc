import { Result_HtlcBasepointDecodeErrorZ } from '../structs/Result_HtlcBasepointDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Base key used in conjunction with a `per_commitment_point` to generate an [`HtlcKey`].
 *
 * HTLC keys are used to ensure only the recipient of an HTLC can claim it on-chain with the HTLC
 * preimage and that only the sender of an HTLC can claim it on-chain after it has timed out.
 * Thus, both channel counterparties' HTLC keys will appears in each HTLC output's script.
 */
export declare class HtlcBasepoint extends CommonBase {
    get_a(): Uint8Array;
    set_a(val: Uint8Array): void;
    /**
     * Constructs a new HtlcBasepoint given each field
     */
    static constructor_new(a_arg: Uint8Array): HtlcBasepoint;
    /**
     * Checks if two HtlcBasepoints contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: HtlcBasepoint): boolean;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the HtlcBasepoint
     */
    clone(): HtlcBasepoint;
    /**
     * Generates a non-cryptographic 64-bit hash of the HtlcBasepoint.
     */
    hash(): bigint;
    /**
     * Get inner Public Key
     */
    to_public_key(): Uint8Array;
    /**
     * Derives the \"tweak\" used in calculate [`HtlcKey::from_basepoint`].\n\n[`HtlcKey::from_basepoint`] calculates a private key as:\n`privkey = basepoint_secret + SHA256(per_commitment_point || basepoint)`\n\nThis calculates the hash part in the tweak derivation process, which is used to\nensure that each key is unique and cannot be guessed by an external party.
     */
    derive_add_tweak(per_commitment_point: Uint8Array): Uint8Array;
    /**
     * Serialize the HtlcBasepoint object into a byte array which can be read by HtlcBasepoint_read
     */
    write(): Uint8Array;
    /**
     * Read a HtlcBasepoint from a byte array, created by HtlcBasepoint_write
     */
    static constructor_read(ser: Uint8Array): Result_HtlcBasepointDecodeErrorZ;
}
