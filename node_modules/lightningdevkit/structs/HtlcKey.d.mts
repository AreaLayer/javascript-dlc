import { HtlcBasepoint } from '../structs/HtlcBasepoint.mjs';
import { Result_HtlcKeyDecodeErrorZ } from '../structs/Result_HtlcKeyDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A derived key built from a [`HtlcBasepoint`] and `per_commitment_point`.
 *
 * HTLC keys are used to ensure only the recipient of an HTLC can claim it on-chain with the HTLC
 * preimage and that only the sender of an HTLC can claim it on-chain after it has timed out.
 * Thus, both channel counterparties' HTLC keys will appears in each HTLC output's script.
 *
 * [See the BOLT specs]
 * <https://github.com/lightning/bolts/blob/master/03-transactions.md#localpubkey-local_htlcpubkey-remote_htlcpubkey-local_delayedpubkey-and-remote_delayedpubkey-derivation>
 * for more information on key derivation details.
 */
export declare class HtlcKey extends CommonBase {
    get_a(): Uint8Array;
    set_a(val: Uint8Array): void;
    /**
     * Constructs a new HtlcKey given each field
     */
    static constructor_new(a_arg: Uint8Array): HtlcKey;
    /**
     * Checks if two HtlcKeys contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: HtlcKey): boolean;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the HtlcKey
     */
    clone(): HtlcKey;
    /**
     * Derive a public htlcpubkey using one node\'s `per_commitment_point` and its countersignatory\'s `basepoint`
     */
    static constructor_from_basepoint(countersignatory_basepoint: HtlcBasepoint, per_commitment_point: Uint8Array): HtlcKey;
    /**
     * Build a htlcpubkey directly from an already-derived private key
     */
    static constructor_from_secret_key(sk: Uint8Array): HtlcKey;
    /**
     * Get inner Public Key
     */
    to_public_key(): Uint8Array;
    /**
     * Serialize the HtlcKey object into a byte array which can be read by HtlcKey_read
     */
    write(): Uint8Array;
    /**
     * Read a HtlcKey from a byte array, created by HtlcKey_write
     */
    static constructor_read(ser: Uint8Array): Result_HtlcKeyDecodeErrorZ;
}
