import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { Result_InFlightHtlcsDecodeErrorZ } from '../structs/Result_InFlightHtlcsDecodeErrorZ.mjs';
import { Path } from '../structs/Path.mjs';
import { NodeId } from '../structs/NodeId.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A data structure for tracking in-flight HTLCs. May be used during pathfinding to account for
 * in-use channel liquidity.
 */
export declare class InFlightHtlcs extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the InFlightHtlcs
     */
    clone(): InFlightHtlcs;
    /**
     * Constructs an empty `InFlightHtlcs`.
     */
    static constructor_new(): InFlightHtlcs;
    /**
     * Takes in a path with payer's node id and adds the path's details to `InFlightHtlcs`.
     */
    process_path(path: Path, payer_node_id: Uint8Array): void;
    /**
     * Adds a known HTLC given the public key of the HTLC source, target, and short channel
     * id.
     */
    add_inflight_htlc(source: NodeId, target: NodeId, channel_scid: bigint, used_msat: bigint): void;
    /**
     * Returns liquidity in msat given the public key of the HTLC source, target, and short channel
     * id.
     */
    used_liquidity_msat(source: NodeId, target: NodeId, channel_scid: bigint): Option_u64Z;
    /**
     * Serialize the InFlightHtlcs object into a byte array which can be read by InFlightHtlcs_read
     */
    write(): Uint8Array;
    /**
     * Read a InFlightHtlcs from a byte array, created by InFlightHtlcs_write
     */
    static constructor_read(ser: Uint8Array): Result_InFlightHtlcsDecodeErrorZ;
}
