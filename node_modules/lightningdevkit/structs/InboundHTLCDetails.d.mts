import { Option_InboundHTLCStateDetailsZ } from '../structs/Option_InboundHTLCStateDetailsZ.mjs';
import { Result_InboundHTLCDetailsDecodeErrorZ } from '../structs/Result_InboundHTLCDetailsDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Exposes details around pending inbound HTLCs.
 */
export declare class InboundHTLCDetails extends CommonBase {
    /**
     * The HTLC ID.
     * The IDs are incremented by 1 starting from 0 for each offered HTLC.
     * They are unique per channel and inbound/outbound direction, unless an HTLC was only announced
     * and not part of any commitment transaction.
     */
    get_htlc_id(): bigint;
    /**
     * The HTLC ID.
     * The IDs are incremented by 1 starting from 0 for each offered HTLC.
     * They are unique per channel and inbound/outbound direction, unless an HTLC was only announced
     * and not part of any commitment transaction.
     */
    set_htlc_id(val: bigint): void;
    /**
     * The amount in msat.
     */
    get_amount_msat(): bigint;
    /**
     * The amount in msat.
     */
    set_amount_msat(val: bigint): void;
    /**
     * The block height at which this HTLC expires.
     */
    get_cltv_expiry(): number;
    /**
     * The block height at which this HTLC expires.
     */
    set_cltv_expiry(val: number): void;
    /**
     * The payment hash.
     */
    get_payment_hash(): Uint8Array;
    /**
     * The payment hash.
     */
    set_payment_hash(val: Uint8Array): void;
    /**
     * The state of the HTLC in the state machine.
     *
     * Determines on which commitment transactions the HTLC is included and what message the HTLC is
     * waiting for to advance to the next state.
     *
     * See [`InboundHTLCStateDetails`] for information on the specific states.
     *
     * LDK will always fill this field in, but when downgrading to prior versions of LDK, new
     * states may result in `None` here.
     */
    get_state(): Option_InboundHTLCStateDetailsZ;
    /**
     * The state of the HTLC in the state machine.
     *
     * Determines on which commitment transactions the HTLC is included and what message the HTLC is
     * waiting for to advance to the next state.
     *
     * See [`InboundHTLCStateDetails`] for information on the specific states.
     *
     * LDK will always fill this field in, but when downgrading to prior versions of LDK, new
     * states may result in `None` here.
     */
    set_state(val: Option_InboundHTLCStateDetailsZ): void;
    /**
     * Whether the HTLC has an output below the local dust limit. If so, the output will be trimmed
     * from the local commitment transaction and added to the commitment transaction fee.
     * For non-anchor channels, this takes into account the cost of the second-stage HTLC
     * transactions as well.
     *
     * When the local commitment transaction is broadcasted as part of a unilateral closure,
     * the value of this HTLC will therefore not be claimable but instead burned as a transaction
     * fee.
     *
     * Note that dust limits are specific to each party. An HTLC can be dust for the local
     * commitment transaction but not for the counterparty's commitment transaction and vice versa.
     */
    get_is_dust(): boolean;
    /**
     * Whether the HTLC has an output below the local dust limit. If so, the output will be trimmed
     * from the local commitment transaction and added to the commitment transaction fee.
     * For non-anchor channels, this takes into account the cost of the second-stage HTLC
     * transactions as well.
     *
     * When the local commitment transaction is broadcasted as part of a unilateral closure,
     * the value of this HTLC will therefore not be claimable but instead burned as a transaction
     * fee.
     *
     * Note that dust limits are specific to each party. An HTLC can be dust for the local
     * commitment transaction but not for the counterparty's commitment transaction and vice versa.
     */
    set_is_dust(val: boolean): void;
    /**
     * Constructs a new InboundHTLCDetails given each field
     */
    static constructor_new(htlc_id_arg: bigint, amount_msat_arg: bigint, cltv_expiry_arg: number, payment_hash_arg: Uint8Array, state_arg: Option_InboundHTLCStateDetailsZ, is_dust_arg: boolean): InboundHTLCDetails;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the InboundHTLCDetails
     */
    clone(): InboundHTLCDetails;
    /**
     * Serialize the InboundHTLCDetails object into a byte array which can be read by InboundHTLCDetails_read
     */
    write(): Uint8Array;
    /**
     * Read a InboundHTLCDetails from a byte array, created by InboundHTLCDetails_write
     */
    static constructor_read(ser: Uint8Array): Result_InboundHTLCDetailsDecodeErrorZ;
}
