import { Option_CVec_ThirtyTwoBytesZZ } from '../structs/Option_CVec_ThirtyTwoBytesZZ.mjs';
import { InitFeatures } from '../structs/InitFeatures.mjs';
import { Option_SocketAddressZ } from '../structs/Option_SocketAddressZ.mjs';
import { Result_InitDecodeErrorZ } from '../structs/Result_InitDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An [`init`] message to be sent to or received from a peer.
 *
 * [`init`]: https://github.com/lightning/bolts/blob/master/01-messaging.md#the-init-message
 */
export declare class Init extends CommonBase {
    /**
     * The relevant features which the sender supports.
     */
    get_features(): InitFeatures;
    /**
     * The relevant features which the sender supports.
     */
    set_features(val: InitFeatures): void;
    /**
     * Indicates chains the sender is interested in.
     *
     * If there are no common chains, the connection will be closed.
     *
     * Returns a copy of the field.
     */
    get_networks(): Option_CVec_ThirtyTwoBytesZZ;
    /**
     * Indicates chains the sender is interested in.
     *
     * If there are no common chains, the connection will be closed.
     */
    set_networks(val: Option_CVec_ThirtyTwoBytesZZ): void;
    /**
     * The receipient's network address.
     *
     * This adds the option to report a remote IP address back to a connecting peer using the init
     * message. A node can decide to use that information to discover a potential update to its
     * public IPv4 address (NAT) and use that for a [`NodeAnnouncement`] update message containing
     * the new address.
     */
    get_remote_network_address(): Option_SocketAddressZ;
    /**
     * The receipient's network address.
     *
     * This adds the option to report a remote IP address back to a connecting peer using the init
     * message. A node can decide to use that information to discover a potential update to its
     * public IPv4 address (NAT) and use that for a [`NodeAnnouncement`] update message containing
     * the new address.
     */
    set_remote_network_address(val: Option_SocketAddressZ): void;
    /**
     * Constructs a new Init given each field
     */
    static constructor_new(features_arg: InitFeatures, networks_arg: Option_CVec_ThirtyTwoBytesZZ, remote_network_address_arg: Option_SocketAddressZ): Init;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Init
     */
    clone(): Init;
    /**
     * Generates a non-cryptographic 64-bit hash of the Init.
     */
    hash(): bigint;
    /**
     * Checks if two Inits contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: Init): boolean;
    /**
     * Serialize the Init object into a byte array which can be read by Init_read
     */
    write(): Uint8Array;
    /**
     * Read a Init from a byte array, created by Init_write
     */
    static constructor_read(ser: Uint8Array): Result_InitDecodeErrorZ;
}
