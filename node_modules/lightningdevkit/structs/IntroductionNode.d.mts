import { Direction } from '../enums/Direction.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * The unblinded node in a blinded path.
 */
export declare class IntroductionNode extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the IntroductionNode
     */
    clone(): IntroductionNode;
    /**
     * Utility method to constructs a new NodeId-variant IntroductionNode
     */
    static constructor_node_id(a: Uint8Array): IntroductionNode;
    /**
     * Utility method to constructs a new DirectedShortChannelId-variant IntroductionNode
     */
    static constructor_directed_short_channel_id(a: Direction, b: bigint): IntroductionNode;
    /**
     * Generates a non-cryptographic 64-bit hash of the IntroductionNode.
     */
    hash(): bigint;
    /**
     * Checks if two IntroductionNodes contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: IntroductionNode): boolean;
}
/** A IntroductionNode of type NodeId */
export declare class IntroductionNode_NodeId extends IntroductionNode {
    node_id: Uint8Array;
}
/** A IntroductionNode of type DirectedShortChannelId */
export declare class IntroductionNode_DirectedShortChannelId extends IntroductionNode {
    _0: Direction;
    _1: bigint;
}
