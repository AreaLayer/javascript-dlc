import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { Option_CVec_u8ZZ } from '../structs/Option_CVec_u8ZZ.mjs';
import { Option_AmountZ } from '../structs/Option_AmountZ.mjs';
import { Quantity } from '../structs/Quantity.mjs';
import { BlindedPaymentPath } from '../structs/BlindedPaymentPath.mjs';
import { Nonce } from '../structs/Nonce.mjs';
import { Result_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ } from '../structs/Result_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ.mjs';
import { Result_VerifiedInvoiceRequestNoneZ } from '../structs/Result_VerifiedInvoiceRequestNoneZ.mjs';
import { ExpandedKey } from '../structs/ExpandedKey.mjs';
import { PrintableString } from '../structs/PrintableString.mjs';
import { OfferFeatures } from '../structs/OfferFeatures.mjs';
import { InvoiceRequestFeatures } from '../structs/InvoiceRequestFeatures.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An `InvoiceRequest` is a request for a [`Bolt12Invoice`] formulated from an [`Offer`].
 *
 * An offer may provide choices such as quantity, amount, chain, features, etc. An invoice request
 * specifies these such that its recipient can send an invoice for payment.
 *
 * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
 * [`Offer`]: crate::offers::offer::Offer
 */
export declare class InvoiceRequest extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the InvoiceRequest
     */
    clone(): InvoiceRequest;
    /**
     * The chains that may be used when paying a requested invoice (e.g., bitcoin mainnet).
     * Payments must be denominated in units of the minimal lightning-payable unit (e.g., msats)
     * for the selected chain.
     */
    chains(): Uint8Array[];
    /**
     * Opaque bytes set by the originator. Useful for authentication and validating fields since it
     * is reflected in `invoice_request` messages along with all the other fields from the `offer`.
     */
    metadata(): Option_CVec_u8ZZ;
    /**
     * The minimum amount required for a successful payment of a single item.
     */
    amount(): Option_AmountZ;
    /**
     * A complete description of the purpose of the payment. Intended to be displayed to the user
     * but with the caveat that it has not been verified in any way.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    description(): PrintableString;
    /**
     * Features pertaining to the offer.
     */
    offer_features(): OfferFeatures;
    /**
     * Duration since the Unix epoch when an invoice should no longer be requested.
     *
     * If `None`, the offer does not expire.
     */
    absolute_expiry(): Option_u64Z;
    /**
     * The issuer of the offer, possibly beginning with `user@domain` or `domain`. Intended to be
     * displayed to the user but with the caveat that it has not been verified in any way.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    issuer(): PrintableString;
    /**
     * Paths to the recipient originating from publicly reachable nodes. Blinded paths provide
     * recipient privacy by obfuscating its node id.
     */
    paths(): BlindedMessagePath[];
    /**
     * The quantity of items supported.
     */
    supported_quantity(): Quantity;
    /**
     * The public key used by the recipient to sign invoices.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    signing_pubkey(): Uint8Array;
    /**
     * An unpredictable series of bytes, typically containing information about the derivation of
     * [`payer_id`].
     *
     * [`payer_id`]: Self::payer_id
     */
    payer_metadata(): Uint8Array;
    /**
     * A chain from [`Offer::chains`] that the offer is valid for.
     */
    chain(): Uint8Array;
    /**
     * The amount to pay in msats (i.e., the minimum lightning-payable unit for [`chain`]), which
     * must be greater than or equal to [`Offer::amount`], converted if necessary.
     *
     * [`chain`]: Self::chain
     */
    amount_msats(): Option_u64Z;
    /**
     * Features pertaining to requesting an invoice.
     */
    invoice_request_features(): InvoiceRequestFeatures;
    /**
     * The quantity of the offer's item conforming to [`Offer::is_valid_quantity`].
     */
    quantity(): Option_u64Z;
    /**
     * A possibly transient pubkey used to sign the invoice request.
     */
    payer_id(): Uint8Array;
    /**
     * A payer-provided note which will be seen by the recipient and reflected back in the invoice
     * response.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    payer_note(): PrintableString;
    /**
     * Creates an [`InvoiceBuilder`] for the request with the given required fields.
     *
     * Unless [`InvoiceBuilder::relative_expiry`] is set, the invoice will expire two hours after
     * `created_at`, which is used to set [`Bolt12Invoice::created_at`]. Useful for `no-std` builds
     * where [`std::time::SystemTime`] is not available.
     *
     * The caller is expected to remember the preimage of `payment_hash` in order to claim a payment
     * for the invoice.
     *
     * The `payment_paths` parameter is useful for maintaining the payment recipient's privacy. It
     * must contain one or more elements ordered from most-preferred to least-preferred, if there's
     * a preference. Note, however, that any privacy is lost if a public node id was used for
     * [`Offer::signing_pubkey`].
     *
     * Errors if the request contains unknown required features.
     *
     * # Note
     *
     * If the originating [`Offer`] was created using [`OfferBuilder::deriving_signing_pubkey`],
     * then first use [`InvoiceRequest::verify_using_metadata`] or
     * [`InvoiceRequest::verify_using_recipient_data`] and then [`VerifiedInvoiceRequest`] methods
     * instead.
     *
     * [`Bolt12Invoice::created_at`]: crate::offers::invoice::Bolt12Invoice::created_at
     * [`OfferBuilder::deriving_signing_pubkey`]: crate::offers::offer::OfferBuilder::deriving_signing_pubkey
     */
    respond_with_no_std(payment_paths: BlindedPaymentPath[], payment_hash: Uint8Array, created_at: bigint): Result_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ;
    /**
     * Verifies that the request was for an offer created using the given key by checking the
     * metadata from the offer.
     *
     * Returns the verified request which contains the derived keys needed to sign a
     * [`Bolt12Invoice`] for the request if they could be extracted from the metadata.
     *
     * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
     */
    verify_using_metadata(key: ExpandedKey): Result_VerifiedInvoiceRequestNoneZ;
    /**
     * Verifies that the request was for an offer created using the given key by checking a nonce
     * included with the [`BlindedMessagePath`] for which the request was sent through.
     *
     * Returns the verified request which contains the derived keys needed to sign a
     * [`Bolt12Invoice`] for the request if they could be extracted from the metadata.
     *
     * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
     */
    verify_using_recipient_data(nonce: Nonce, key: ExpandedKey): Result_VerifiedInvoiceRequestNoneZ;
    /**
     * Signature of the invoice request using [`payer_id`].
     *
     * [`payer_id`]: Self::payer_id
     */
    signature(): Uint8Array;
    /**
     * Serialize the InvoiceRequest object into a byte array which can be read by InvoiceRequest_read
     */
    write(): Uint8Array;
}
