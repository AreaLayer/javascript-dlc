import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { UntrustedString } from '../structs/UntrustedString.mjs';
import { Result_InvoiceRequestFieldsDecodeErrorZ } from '../structs/Result_InvoiceRequestFieldsDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Fields sent in an [`InvoiceRequest`] message to include in [`PaymentContext::Bolt12Offer`].
 *
 * [`PaymentContext::Bolt12Offer`]: crate::blinded_path::payment::PaymentContext::Bolt12Offer
 */
export class InvoiceRequestFields extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.InvoiceRequestFields_free);
    }
    /**
     * A possibly transient pubkey used to sign the invoice request.
     */
    get_payer_id() {
        const ret = bindings.InvoiceRequestFields_get_payer_id(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * A possibly transient pubkey used to sign the invoice request.
     */
    set_payer_id(val) {
        bindings.InvoiceRequestFields_set_payer_id(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * The quantity of the offer's item conforming to [`Offer::is_valid_quantity`].
     */
    get_quantity() {
        const ret = bindings.InvoiceRequestFields_get_quantity(this.ptr);
        const ret_hu_conv = Option_u64Z.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The quantity of the offer's item conforming to [`Offer::is_valid_quantity`].
     */
    set_quantity(val) {
        bindings.InvoiceRequestFields_set_quantity(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * A payer-provided note which will be seen by the recipient and reflected back in the invoice
     * response. Truncated to [`PAYER_NOTE_LIMIT`] characters.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_payer_note_truncated() {
        const ret = bindings.InvoiceRequestFields_get_payer_note_truncated(this.ptr);
        const ret_hu_conv = new UntrustedString(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * A payer-provided note which will be seen by the recipient and reflected back in the invoice
     * response. Truncated to [`PAYER_NOTE_LIMIT`] characters.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_payer_note_truncated(val) {
        bindings.InvoiceRequestFields_set_payer_note_truncated(this.ptr, val == null ? 0n : CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new InvoiceRequestFields given each field
     *
     * Note that payer_note_truncated_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(payer_id_arg, quantity_arg, payer_note_truncated_arg) {
        const ret = bindings.InvoiceRequestFields_new(bindings.encodeUint8Array(bindings.check_arr_len(payer_id_arg, 33)), CommonBase.get_ptr_of(quantity_arg), payer_note_truncated_arg == null ? 0n : CommonBase.get_ptr_of(payer_note_truncated_arg));
        const ret_hu_conv = new InvoiceRequestFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.InvoiceRequestFields_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the InvoiceRequestFields
     */
    clone() {
        const ret = bindings.InvoiceRequestFields_clone(this.ptr);
        const ret_hu_conv = new InvoiceRequestFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two InvoiceRequestFieldss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.InvoiceRequestFields_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the InvoiceRequestFields object into a byte array which can be read by InvoiceRequestFields_read
     */
    write() {
        const ret = bindings.InvoiceRequestFields_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a InvoiceRequestFields from a byte array, created by InvoiceRequestFields_write
     */
    static constructor_read(ser) {
        const ret = bindings.InvoiceRequestFields_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_InvoiceRequestFieldsDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=InvoiceRequestFields.mjs.map