import { Result_MaxDustHTLCExposureDecodeErrorZ } from '../structs/Result_MaxDustHTLCExposureDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Options for how to set the max dust exposure allowed on a channel. See
 * [`ChannelConfig::max_dust_htlc_exposure`] for details.
 */
export declare class MaxDustHTLCExposure extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the MaxDustHTLCExposure
     */
    clone(): MaxDustHTLCExposure;
    /**
     * Utility method to constructs a new FixedLimitMsat-variant MaxDustHTLCExposure
     */
    static constructor_fixed_limit_msat(a: bigint): MaxDustHTLCExposure;
    /**
     * Utility method to constructs a new FeeRateMultiplier-variant MaxDustHTLCExposure
     */
    static constructor_fee_rate_multiplier(a: bigint): MaxDustHTLCExposure;
    /**
     * Checks if two MaxDustHTLCExposures contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: MaxDustHTLCExposure): boolean;
    /**
     * Serialize the MaxDustHTLCExposure object into a byte array which can be read by MaxDustHTLCExposure_read
     */
    write(): Uint8Array;
    /**
     * Read a MaxDustHTLCExposure from a byte array, created by MaxDustHTLCExposure_write
     */
    static constructor_read(ser: Uint8Array): Result_MaxDustHTLCExposureDecodeErrorZ;
}
/** A MaxDustHTLCExposure of type FixedLimitMsat */
export declare class MaxDustHTLCExposure_FixedLimitMsat extends MaxDustHTLCExposure {
    fixed_limit_msat: bigint;
}
/** A MaxDustHTLCExposure of type FeeRateMultiplier */
export declare class MaxDustHTLCExposure_FeeRateMultiplier extends MaxDustHTLCExposure {
    fee_rate_multiplier: bigint;
}
