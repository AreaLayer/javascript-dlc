import { Result_MaxDustHTLCExposureDecodeErrorZ } from '../structs/Result_MaxDustHTLCExposureDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Options for how to set the max dust exposure allowed on a channel. See
 * [`ChannelConfig::max_dust_htlc_exposure`] for details.
 */
export class MaxDustHTLCExposure extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.MaxDustHTLCExposure_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKMaxDustHTLCExposure_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new MaxDustHTLCExposure_FixedLimitMsat(ptr);
            case 1: return new MaxDustHTLCExposure_FeeRateMultiplier(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.MaxDustHTLCExposure_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the MaxDustHTLCExposure
     */
    clone() {
        const ret = bindings.MaxDustHTLCExposure_clone(this.ptr);
        const ret_hu_conv = MaxDustHTLCExposure.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new FixedLimitMsat-variant MaxDustHTLCExposure
     */
    static constructor_fixed_limit_msat(a) {
        const ret = bindings.MaxDustHTLCExposure_fixed_limit_msat(a);
        const ret_hu_conv = MaxDustHTLCExposure.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new FeeRateMultiplier-variant MaxDustHTLCExposure
     */
    static constructor_fee_rate_multiplier(a) {
        const ret = bindings.MaxDustHTLCExposure_fee_rate_multiplier(a);
        const ret_hu_conv = MaxDustHTLCExposure.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two MaxDustHTLCExposures contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b) {
        const ret = bindings.MaxDustHTLCExposure_eq(this.ptr, CommonBase.get_ptr_of(b));
        return ret;
    }
    /**
     * Serialize the MaxDustHTLCExposure object into a byte array which can be read by MaxDustHTLCExposure_read
     */
    write() {
        const ret = bindings.MaxDustHTLCExposure_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a MaxDustHTLCExposure from a byte array, created by MaxDustHTLCExposure_write
     */
    static constructor_read(ser) {
        const ret = bindings.MaxDustHTLCExposure_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_MaxDustHTLCExposureDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
/** A MaxDustHTLCExposure of type FixedLimitMsat */
export class MaxDustHTLCExposure_FixedLimitMsat extends MaxDustHTLCExposure {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        this.fixed_limit_msat = bindings.LDKMaxDustHTLCExposure_FixedLimitMsat_get_fixed_limit_msat(ptr);
    }
}
/** A MaxDustHTLCExposure of type FeeRateMultiplier */
export class MaxDustHTLCExposure_FeeRateMultiplier extends MaxDustHTLCExposure {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        this.fee_rate_multiplier = bindings.LDKMaxDustHTLCExposure_FeeRateMultiplier_get_fee_rate_multiplier(ptr);
    }
}
//# sourceMappingURL=MaxDustHTLCExposure.mjs.map