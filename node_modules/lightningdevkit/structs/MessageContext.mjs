import { OffersContext } from '../structs/OffersContext.mjs';
import { Result_MessageContextDecodeErrorZ } from '../structs/Result_MessageContextDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Additional data included by the recipient in a [`BlindedMessagePath`].
 *
 * This data is encrypted by the recipient and will be given to the corresponding message handler
 * when handling a message sent over the [`BlindedMessagePath`]. The recipient can use this data to
 * authenticate the message or for further processing if needed.
 */
export class MessageContext extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.MessageContext_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKMessageContext_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new MessageContext_Offers(ptr);
            case 1: return new MessageContext_Custom(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.MessageContext_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the MessageContext
     */
    clone() {
        const ret = bindings.MessageContext_clone(this.ptr);
        const ret_hu_conv = MessageContext.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Offers-variant MessageContext
     */
    static constructor_offers(a) {
        const ret = bindings.MessageContext_offers(CommonBase.get_ptr_of(a));
        const ret_hu_conv = MessageContext.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Custom-variant MessageContext
     */
    static constructor_custom(a) {
        const ret = bindings.MessageContext_custom(bindings.encodeUint8Array(a));
        const ret_hu_conv = MessageContext.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Serialize the MessageContext object into a byte array which can be read by MessageContext_read
     */
    write() {
        const ret = bindings.MessageContext_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a MessageContext from a byte array, created by MessageContext_write
     */
    static constructor_read(ser) {
        const ret = bindings.MessageContext_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_MessageContextDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
/** A MessageContext of type Offers */
export class MessageContext_Offers extends MessageContext {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const offers = bindings.LDKMessageContext_Offers_get_offers(ptr);
        const offers_hu_conv = OffersContext.constr_from_ptr(offers);
        CommonBase.add_ref_from(offers_hu_conv, this);
        this.offers = offers_hu_conv;
    }
}
/** A MessageContext of type Custom */
export class MessageContext_Custom extends MessageContext {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const custom = bindings.LDKMessageContext_Custom_get_custom(ptr);
        const custom_conv = bindings.decodeUint8Array(custom);
        this.custom = custom_conv;
    }
}
//# sourceMappingURL=MessageContext.mjs.map