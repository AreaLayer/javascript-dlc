import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An intermediate node, and possibly a short channel id leading to the next node.
 */
export declare class MessageForwardNode extends CommonBase {
    /**
     * This node's pubkey.
     */
    get_node_id(): Uint8Array;
    /**
     * This node's pubkey.
     */
    set_node_id(val: Uint8Array): void;
    /**
     * The channel between `node_id` and the next hop. If set, the constructed [`BlindedHop`]'s
     * `encrypted_payload` will use this instead of the next [`MessageForwardNode::node_id`] for a
     * more compact representation.
     */
    get_short_channel_id(): Option_u64Z;
    /**
     * The channel between `node_id` and the next hop. If set, the constructed [`BlindedHop`]'s
     * `encrypted_payload` will use this instead of the next [`MessageForwardNode::node_id`] for a
     * more compact representation.
     */
    set_short_channel_id(val: Option_u64Z): void;
    /**
     * Constructs a new MessageForwardNode given each field
     */
    static constructor_new(node_id_arg: Uint8Array, short_channel_id_arg: Option_u64Z): MessageForwardNode;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the MessageForwardNode
     */
    clone(): MessageForwardNode;
    /**
     * Generates a non-cryptographic 64-bit hash of the MessageForwardNode.
     */
    hash(): bigint;
    /**
     * Checks if two MessageForwardNodes contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: MessageForwardNode): boolean;
}
