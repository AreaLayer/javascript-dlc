import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An intermediate node, and possibly a short channel id leading to the next node.
 */
export class MessageForwardNode extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.MessageForwardNode_free);
    }
    /**
     * This node's pubkey.
     */
    get_node_id() {
        const ret = bindings.MessageForwardNode_get_node_id(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * This node's pubkey.
     */
    set_node_id(val) {
        bindings.MessageForwardNode_set_node_id(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * The channel between `node_id` and the next hop. If set, the constructed [`BlindedHop`]'s
     * `encrypted_payload` will use this instead of the next [`MessageForwardNode::node_id`] for a
     * more compact representation.
     */
    get_short_channel_id() {
        const ret = bindings.MessageForwardNode_get_short_channel_id(this.ptr);
        const ret_hu_conv = Option_u64Z.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel between `node_id` and the next hop. If set, the constructed [`BlindedHop`]'s
     * `encrypted_payload` will use this instead of the next [`MessageForwardNode::node_id`] for a
     * more compact representation.
     */
    set_short_channel_id(val) {
        bindings.MessageForwardNode_set_short_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new MessageForwardNode given each field
     */
    static constructor_new(node_id_arg, short_channel_id_arg) {
        const ret = bindings.MessageForwardNode_new(bindings.encodeUint8Array(bindings.check_arr_len(node_id_arg, 33)), CommonBase.get_ptr_of(short_channel_id_arg));
        const ret_hu_conv = new MessageForwardNode(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.MessageForwardNode_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the MessageForwardNode
     */
    clone() {
        const ret = bindings.MessageForwardNode_clone(this.ptr);
        const ret_hu_conv = new MessageForwardNode(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the MessageForwardNode.
     */
    hash() {
        const ret = bindings.MessageForwardNode_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two MessageForwardNodes contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.MessageForwardNode_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
}
//# sourceMappingURL=MessageForwardNode.mjs.map