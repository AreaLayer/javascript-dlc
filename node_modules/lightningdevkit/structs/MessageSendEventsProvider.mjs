import { MessageSendEvent } from '../structs/MessageSendEvent.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
class LDKMessageSendEventsProviderHolder {
    constructor() {
        this.held = null;
    }
}
/**
 * A trait indicating an object may generate message send events
 */
export class MessageSendEventsProvider extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.MessageSendEventsProvider_free);
        this.bindings_instance = null;
    }
    /** Creates a new instance of MessageSendEventsProvider from a given implementation */
    static new_impl(arg) {
        const impl_holder = new LDKMessageSendEventsProviderHolder();
        let structImplementation = {
            get_and_clear_pending_msg_events() {
                const ret = arg.get_and_clear_pending_msg_events();
                const result = bindings.encodeUint64Array(ret.map(ret_conv_18 => ret_conv_18.clone_ptr()));
                return result;
            },
        };
        const ptr_idx = bindings.LDKMessageSendEventsProvider_new(structImplementation);
        impl_holder.held = new MessageSendEventsProvider(null, ptr_idx[0]);
        impl_holder.held.instance_idx = ptr_idx[1];
        impl_holder.held.bindings_instance = structImplementation;
        return impl_holder.held;
    }
    /**
     * Gets the list of pending events which were generated by previous actions, clearing the list
     * in the process.
     */
    get_and_clear_pending_msg_events() {
        const ret = bindings.MessageSendEventsProvider_get_and_clear_pending_msg_events(this.ptr);
        const ret_conv_18_len = bindings.getArrayLength(ret);
        const ret_conv_18_arr = new Array(ret_conv_18_len).fill(null);
        for (var s = 0; s < ret_conv_18_len; s++) {
            const ret_conv_18 = bindings.getU64ArrayElem(ret, s);
            const ret_conv_18_hu_conv = MessageSendEvent.constr_from_ptr(ret_conv_18);
            CommonBase.add_ref_from(ret_conv_18_hu_conv, this);
            ret_conv_18_arr[s] = ret_conv_18_hu_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_18_arr;
    }
}
//# sourceMappingURL=MessageSendEventsProvider.mjs.map