import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { ResponseInstruction } from '../structs/ResponseInstruction.mjs';
import { Destination } from '../structs/Destination.mjs';
import { MessageContext } from '../structs/MessageContext.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Instructions for how and where to send a message.
 */
export declare class MessageSendInstructions extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the MessageSendInstructions
     */
    clone(): MessageSendInstructions;
    /**
     * Utility method to constructs a new WithSpecifiedReplyPath-variant MessageSendInstructions
     */
    static constructor_with_specified_reply_path(destination: Destination, reply_path: BlindedMessagePath): MessageSendInstructions;
    /**
     * Utility method to constructs a new WithReplyPath-variant MessageSendInstructions
     */
    static constructor_with_reply_path(destination: Destination, context: MessageContext): MessageSendInstructions;
    /**
     * Utility method to constructs a new WithoutReplyPath-variant MessageSendInstructions
     */
    static constructor_without_reply_path(destination: Destination): MessageSendInstructions;
    /**
     * Utility method to constructs a new ForReply-variant MessageSendInstructions
     */
    static constructor_for_reply(instructions: ResponseInstruction): MessageSendInstructions;
}
/** A MessageSendInstructions of type WithSpecifiedReplyPath */
export declare class MessageSendInstructions_WithSpecifiedReplyPath extends MessageSendInstructions {
    /**
     * The destination where we need to send our message.
     */
    destination: Destination;
    /**
     * The reply path which should be included in the message.
     */
    reply_path: BlindedMessagePath;
}
/** A MessageSendInstructions of type WithReplyPath */
export declare class MessageSendInstructions_WithReplyPath extends MessageSendInstructions {
    /**
     * The destination where we need to send our message.
     */
    destination: Destination;
    /**
     * The context to include in the reply path we'll give the recipient so they can respond
     * to us.
     */
    context: MessageContext;
}
/** A MessageSendInstructions of type WithoutReplyPath */
export declare class MessageSendInstructions_WithoutReplyPath extends MessageSendInstructions {
    /**
     * The destination where we need to send our message.
     */
    destination: Destination;
}
/** A MessageSendInstructions of type ForReply */
export declare class MessageSendInstructions_ForReply extends MessageSendInstructions {
    /**
     * The instructions provided by the [`Responder`].
     */
    instructions: ResponseInstruction;
}
