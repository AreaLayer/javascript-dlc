import { OutPoint } from '../structs/OutPoint.mjs';
import { HTLCUpdate } from '../structs/HTLCUpdate.mjs';
import { ClosureReason } from '../structs/ClosureReason.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An event to be processed by the ChannelManager.
 */
export class MonitorEvent extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.MonitorEvent_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKMonitorEvent_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new MonitorEvent_HTLCEvent(ptr);
            case 1: return new MonitorEvent_HolderForceClosedWithInfo(ptr);
            case 2: return new MonitorEvent_HolderForceClosed(ptr);
            case 3: return new MonitorEvent_Completed(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.MonitorEvent_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the MonitorEvent
     */
    clone() {
        const ret = bindings.MonitorEvent_clone(this.ptr);
        const ret_hu_conv = MonitorEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new HTLCEvent-variant MonitorEvent
     */
    static constructor_htlcevent(a) {
        const ret = bindings.MonitorEvent_htlcevent(CommonBase.get_ptr_of(a));
        const ret_hu_conv = MonitorEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new HolderForceClosedWithInfo-variant MonitorEvent
     */
    static constructor_holder_force_closed_with_info(reason, outpoint, channel_id) {
        const ret = bindings.MonitorEvent_holder_force_closed_with_info(CommonBase.get_ptr_of(reason), CommonBase.get_ptr_of(outpoint), CommonBase.get_ptr_of(channel_id));
        const ret_hu_conv = MonitorEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new HolderForceClosed-variant MonitorEvent
     */
    static constructor_holder_force_closed(a) {
        const ret = bindings.MonitorEvent_holder_force_closed(CommonBase.get_ptr_of(a));
        const ret_hu_conv = MonitorEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Completed-variant MonitorEvent
     */
    static constructor_completed(funding_txo, channel_id, monitor_update_id) {
        const ret = bindings.MonitorEvent_completed(CommonBase.get_ptr_of(funding_txo), CommonBase.get_ptr_of(channel_id), monitor_update_id);
        const ret_hu_conv = MonitorEvent.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two MonitorEvents contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b) {
        const ret = bindings.MonitorEvent_eq(this.ptr, CommonBase.get_ptr_of(b));
        return ret;
    }
    /**
     * Serialize the MonitorEvent object into a byte array which can be read by MonitorEvent_read
     */
    write() {
        const ret = bindings.MonitorEvent_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
}
/** A MonitorEvent of type HTLCEvent */
export class MonitorEvent_HTLCEvent extends MonitorEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const htlc_event = bindings.LDKMonitorEvent_HTLCEvent_get_htlc_event(ptr);
        const htlc_event_hu_conv = new HTLCUpdate(null, htlc_event);
        CommonBase.add_ref_from(htlc_event_hu_conv, this);
        this.htlc_event = htlc_event_hu_conv;
    }
}
/** A MonitorEvent of type HolderForceClosedWithInfo */
export class MonitorEvent_HolderForceClosedWithInfo extends MonitorEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const reason = bindings.LDKMonitorEvent_HolderForceClosedWithInfo_get_reason(ptr);
        const reason_hu_conv = ClosureReason.constr_from_ptr(reason);
        CommonBase.add_ref_from(reason_hu_conv, this);
        this.reason = reason_hu_conv;
        const outpoint = bindings.LDKMonitorEvent_HolderForceClosedWithInfo_get_outpoint(ptr);
        const outpoint_hu_conv = new OutPoint(null, outpoint);
        CommonBase.add_ref_from(outpoint_hu_conv, this);
        this.outpoint = outpoint_hu_conv;
        const channel_id = bindings.LDKMonitorEvent_HolderForceClosedWithInfo_get_channel_id(ptr);
        const channel_id_hu_conv = new ChannelId(null, channel_id);
        CommonBase.add_ref_from(channel_id_hu_conv, this);
        this.channel_id = channel_id_hu_conv;
    }
}
/** A MonitorEvent of type HolderForceClosed */
export class MonitorEvent_HolderForceClosed extends MonitorEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const holder_force_closed = bindings.LDKMonitorEvent_HolderForceClosed_get_holder_force_closed(ptr);
        const holder_force_closed_hu_conv = new OutPoint(null, holder_force_closed);
        CommonBase.add_ref_from(holder_force_closed_hu_conv, this);
        this.holder_force_closed = holder_force_closed_hu_conv;
    }
}
/** A MonitorEvent of type Completed */
export class MonitorEvent_Completed extends MonitorEvent {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const funding_txo = bindings.LDKMonitorEvent_Completed_get_funding_txo(ptr);
        const funding_txo_hu_conv = new OutPoint(null, funding_txo);
        CommonBase.add_ref_from(funding_txo_hu_conv, this);
        this.funding_txo = funding_txo_hu_conv;
        const channel_id = bindings.LDKMonitorEvent_Completed_get_channel_id(ptr);
        const channel_id_hu_conv = new ChannelId(null, channel_id);
        CommonBase.add_ref_from(channel_id_hu_conv, this);
        this.channel_id = channel_id_hu_conv;
        this.monitor_update_id = bindings.LDKMonitorEvent_Completed_get_monitor_update_id(ptr);
    }
}
//# sourceMappingURL=MonitorEvent.mjs.map