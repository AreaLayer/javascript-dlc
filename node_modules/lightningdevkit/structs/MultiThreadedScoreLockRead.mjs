import { ScoreLookUp } from '../structs/ScoreLookUp.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A locked `MultiThreadedLockableScore`.
 */
export class MultiThreadedScoreLockRead extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.MultiThreadedScoreLockRead_free);
    }
    /**
     * Constructs a new ScoreLookUp which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned ScoreLookUp must be freed before this_arg is
     */
    as_ScoreLookUp() {
        const ret = bindings.MultiThreadedScoreLockRead_as_ScoreLookUp(this.ptr);
        const ret_hu_conv = new ScoreLookUp(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=MultiThreadedScoreLockRead.mjs.map