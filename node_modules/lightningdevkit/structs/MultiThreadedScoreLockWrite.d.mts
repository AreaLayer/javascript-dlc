import { ScoreUpdate } from '../structs/ScoreUpdate.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A locked `MultiThreadedLockableScore`.
 */
export declare class MultiThreadedScoreLockWrite extends CommonBase {
    /**
     * Serialize the MultiThreadedScoreLockWrite object into a byte array which can be read by MultiThreadedScoreLockWrite_read
     */
    write(): Uint8Array;
    /**
     * Constructs a new ScoreUpdate which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned ScoreUpdate must be freed before this_arg is
     */
    as_ScoreUpdate(): ScoreUpdate;
}
