import { ScoreUpdate } from '../structs/ScoreUpdate.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A locked `MultiThreadedLockableScore`.
 */
export class MultiThreadedScoreLockWrite extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.MultiThreadedScoreLockWrite_free);
    }
    /**
     * Serialize the MultiThreadedScoreLockWrite object into a byte array which can be read by MultiThreadedScoreLockWrite_read
     */
    write() {
        const ret = bindings.MultiThreadedScoreLockWrite_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Constructs a new ScoreUpdate which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned ScoreUpdate must be freed before this_arg is
     */
    as_ScoreUpdate() {
        const ret = bindings.MultiThreadedScoreLockWrite_as_ScoreUpdate(this.ptr);
        const ret_hu_conv = new ScoreUpdate(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=MultiThreadedScoreLockWrite.mjs.map