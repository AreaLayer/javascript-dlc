import { NodeFeatures } from '../structs/NodeFeatures.mjs';
import { SocketAddress } from '../structs/SocketAddress.mjs';
import { NodeAlias } from '../structs/NodeAlias.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Non-relayable information received in the latest node_announcement from this node.
 */
export class NodeAnnouncementDetails extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.NodeAnnouncementDetails_free);
    }
    /**
     * Protocol features the node announced support for
     */
    get_features() {
        const ret = bindings.NodeAnnouncementDetails_get_features(this.ptr);
        const ret_hu_conv = new NodeFeatures(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Protocol features the node announced support for
     */
    set_features(val) {
        bindings.NodeAnnouncementDetails_set_features(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * When the last known update to the node state was issued.
     * Value is opaque, as set in the announcement.
     */
    get_last_update() {
        const ret = bindings.NodeAnnouncementDetails_get_last_update(this.ptr);
        return ret;
    }
    /**
     * When the last known update to the node state was issued.
     * Value is opaque, as set in the announcement.
     */
    set_last_update(val) {
        bindings.NodeAnnouncementDetails_set_last_update(this.ptr, val);
    }
    /**
     * Color assigned to the node
     */
    get_rgb() {
        const ret = bindings.NodeAnnouncementDetails_get_rgb(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Color assigned to the node
     */
    set_rgb(val) {
        bindings.NodeAnnouncementDetails_set_rgb(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 3)));
    }
    /**
     * Moniker assigned to the node.
     * May be invalid or malicious (eg control chars),
     * should not be exposed to the user.
     */
    get_alias() {
        const ret = bindings.NodeAnnouncementDetails_get_alias(this.ptr);
        const ret_hu_conv = new NodeAlias(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Moniker assigned to the node.
     * May be invalid or malicious (eg control chars),
     * should not be exposed to the user.
     */
    set_alias(val) {
        bindings.NodeAnnouncementDetails_set_alias(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Internet-level addresses via which one can connect to the node
     *
     * Returns a copy of the field.
     */
    get_addresses() {
        const ret = bindings.NodeAnnouncementDetails_get_addresses(this.ptr);
        const ret_conv_15_len = bindings.getArrayLength(ret);
        const ret_conv_15_arr = new Array(ret_conv_15_len).fill(null);
        for (var p = 0; p < ret_conv_15_len; p++) {
            const ret_conv_15 = bindings.getU64ArrayElem(ret, p);
            const ret_conv_15_hu_conv = SocketAddress.constr_from_ptr(ret_conv_15);
            CommonBase.add_ref_from(ret_conv_15_hu_conv, this);
            ret_conv_15_arr[p] = ret_conv_15_hu_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_15_arr;
    }
    /**
     * Internet-level addresses via which one can connect to the node
     */
    set_addresses(val) {
        bindings.NodeAnnouncementDetails_set_addresses(this.ptr, bindings.encodeUint64Array(val.map(val_conv_15 => CommonBase.get_ptr_of(val_conv_15))));
    }
    /**
     * Constructs a new NodeAnnouncementDetails given each field
     */
    static constructor_new(features_arg, last_update_arg, rgb_arg, alias_arg, addresses_arg) {
        const ret = bindings.NodeAnnouncementDetails_new(CommonBase.get_ptr_of(features_arg), last_update_arg, bindings.encodeUint8Array(bindings.check_arr_len(rgb_arg, 3)), CommonBase.get_ptr_of(alias_arg), bindings.encodeUint64Array(addresses_arg.map(addresses_arg_conv_15 => CommonBase.get_ptr_of(addresses_arg_conv_15))));
        const ret_hu_conv = new NodeAnnouncementDetails(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.NodeAnnouncementDetails_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the NodeAnnouncementDetails
     */
    clone() {
        const ret = bindings.NodeAnnouncementDetails_clone(this.ptr);
        const ret_hu_conv = new NodeAnnouncementDetails(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two NodeAnnouncementDetailss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.NodeAnnouncementDetails_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
}
//# sourceMappingURL=NodeAnnouncementDetails.mjs.map