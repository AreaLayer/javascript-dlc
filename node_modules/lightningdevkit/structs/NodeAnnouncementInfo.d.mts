import { NodeFeatures } from '../structs/NodeFeatures.mjs';
import { NodeAnnouncement } from '../structs/NodeAnnouncement.mjs';
import { SocketAddress } from '../structs/SocketAddress.mjs';
import { NodeAnnouncementDetails } from '../structs/NodeAnnouncementDetails.mjs';
import { Result_NodeAnnouncementInfoDecodeErrorZ } from '../structs/Result_NodeAnnouncementInfoDecodeErrorZ.mjs';
import { NodeAlias } from '../structs/NodeAlias.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Information received in the latest node_announcement from this node.
 */
export declare class NodeAnnouncementInfo extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the NodeAnnouncementInfo
     */
    clone(): NodeAnnouncementInfo;
    /**
     * Utility method to constructs a new Relayed-variant NodeAnnouncementInfo
     */
    static constructor_relayed(a: NodeAnnouncement): NodeAnnouncementInfo;
    /**
     * Utility method to constructs a new Local-variant NodeAnnouncementInfo
     */
    static constructor_local(a: NodeAnnouncementDetails): NodeAnnouncementInfo;
    /**
     * Checks if two NodeAnnouncementInfos contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: NodeAnnouncementInfo): boolean;
    /**
     * Protocol features the node announced support for
     */
    features(): NodeFeatures;
    /**
     * When the last known update to the node state was issued.
     *
     * Value may or may not be a timestamp, depending on the policy of the origin node.
     */
    last_update(): number;
    /**
     * Color assigned to the node
     */
    rgb(): Uint8Array;
    /**
     * Moniker assigned to the node.
     *
     * May be invalid or malicious (eg control chars), should not be exposed to the user.
     */
    alias(): NodeAlias;
    /**
     * Internet-level addresses via which one can connect to the node
     */
    addresses(): SocketAddress[];
    /**
     * An initial announcement of the node
     *
     * Not stored if contains excess data to prevent DoS.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    announcement_message(): NodeAnnouncement;
    /**
     * Serialize the NodeAnnouncementInfo object into a byte array which can be read by NodeAnnouncementInfo_read
     */
    write(): Uint8Array;
    /**
     * Read a NodeAnnouncementInfo from a byte array, created by NodeAnnouncementInfo_write
     */
    static constructor_read(ser: Uint8Array): Result_NodeAnnouncementInfoDecodeErrorZ;
}
/** A NodeAnnouncementInfo of type Relayed */
export declare class NodeAnnouncementInfo_Relayed extends NodeAnnouncementInfo {
    relayed: NodeAnnouncement;
}
/** A NodeAnnouncementInfo of type Local */
export declare class NodeAnnouncementInfo_Local extends NodeAnnouncementInfo {
    local: NodeAnnouncementDetails;
}
