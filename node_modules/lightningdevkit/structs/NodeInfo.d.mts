import { Option_NodeAnnouncementInfoZ } from '../structs/Option_NodeAnnouncementInfoZ.mjs';
import { Result_NodeInfoDecodeErrorZ } from '../structs/Result_NodeInfoDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Details about a node in the network, known from the network announcement.
 */
export declare class NodeInfo extends CommonBase {
    /**
     * All valid channels a node has announced
     *
     * Returns a copy of the field.
     */
    get_channels(): bigint[];
    /**
     * All valid channels a node has announced
     */
    set_channels(val: bigint[]): void;
    /**
     * More information about a node from node_announcement.
     * Optional because we store a Node entry after learning about it from
     * a channel announcement, but before receiving a node announcement.
     *
     * Returns a copy of the field.
     */
    get_announcement_info(): Option_NodeAnnouncementInfoZ;
    /**
     * More information about a node from node_announcement.
     * Optional because we store a Node entry after learning about it from
     * a channel announcement, but before receiving a node announcement.
     */
    set_announcement_info(val: Option_NodeAnnouncementInfoZ): void;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the NodeInfo
     */
    clone(): NodeInfo;
    /**
     * Checks if two NodeInfos contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: NodeInfo): boolean;
    /**
     * Returns whether the node has only announced Tor addresses.
     */
    is_tor_only(): boolean;
    /**
     * Get the string representation of a NodeInfo object
     */
    to_str(): string;
    /**
     * Serialize the NodeInfo object into a byte array which can be read by NodeInfo_read
     */
    write(): Uint8Array;
    /**
     * Read a NodeInfo from a byte array, created by NodeInfo_write
     */
    static constructor_read(ser: Uint8Array): Result_NodeInfoDecodeErrorZ;
}
