import { Option_NodeAnnouncementInfoZ } from '../structs/Option_NodeAnnouncementInfoZ.mjs';
import { Result_NodeInfoDecodeErrorZ } from '../structs/Result_NodeInfoDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Details about a node in the network, known from the network announcement.
 */
export class NodeInfo extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.NodeInfo_free);
    }
    /**
     * All valid channels a node has announced
     *
     * Returns a copy of the field.
     */
    get_channels() {
        const ret = bindings.NodeInfo_get_channels(this.ptr);
        const ret_conv = bindings.decodeUint64Array(ret);
        return ret_conv;
    }
    /**
     * All valid channels a node has announced
     */
    set_channels(val) {
        bindings.NodeInfo_set_channels(this.ptr, bindings.encodeUint64Array(val));
    }
    /**
     * More information about a node from node_announcement.
     * Optional because we store a Node entry after learning about it from
     * a channel announcement, but before receiving a node announcement.
     *
     * Returns a copy of the field.
     */
    get_announcement_info() {
        const ret = bindings.NodeInfo_get_announcement_info(this.ptr);
        const ret_hu_conv = Option_NodeAnnouncementInfoZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * More information about a node from node_announcement.
     * Optional because we store a Node entry after learning about it from
     * a channel announcement, but before receiving a node announcement.
     */
    set_announcement_info(val) {
        bindings.NodeInfo_set_announcement_info(this.ptr, CommonBase.get_ptr_of(val));
    }
    clone_ptr() {
        const ret = bindings.NodeInfo_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the NodeInfo
     */
    clone() {
        const ret = bindings.NodeInfo_clone(this.ptr);
        const ret_hu_conv = new NodeInfo(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two NodeInfos contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.NodeInfo_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Returns whether the node has only announced Tor addresses.
     */
    is_tor_only() {
        const ret = bindings.NodeInfo_is_tor_only(this.ptr);
        return ret;
    }
    /**
     * Get the string representation of a NodeInfo object
     */
    to_str() {
        const ret = bindings.NodeInfo_to_str(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
    /**
     * Serialize the NodeInfo object into a byte array which can be read by NodeInfo_read
     */
    write() {
        const ret = bindings.NodeInfo_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a NodeInfo from a byte array, created by NodeInfo_write
     */
    static constructor_read(ser) {
        const ret = bindings.NodeInfo_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_NodeInfoDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=NodeInfo.mjs.map