import { EntropySource } from '../structs/EntropySource.mjs';
import { Result_NonceDecodeErrorZ } from '../structs/Result_NonceDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A 128-bit number used only once.
 *
 * Needed when constructing [`Offer::metadata`] and deriving [`Offer::signing_pubkey`] from
 * [`ExpandedKey`]. Must not be reused for any other derivation without first hashing.
 *
 * [`Offer::metadata`]: crate::offers::offer::Offer::metadata
 * [`Offer::signing_pubkey`]: crate::offers::offer::Offer::signing_pubkey
 * [`ExpandedKey`]: crate::ln::inbound_payment::ExpandedKey
 */
export declare class Nonce extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Nonce
     */
    clone(): Nonce;
    /**
     * Checks if two Nonces contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: Nonce): boolean;
    /**
     * Creates a `Nonce` from the given [`EntropySource`].
     */
    static constructor_from_entropy_source(entropy_source: EntropySource): Nonce;
    /**
     * Returns a slice of the underlying bytes of size [`Nonce::LENGTH`].
     */
    as_slice(): Uint8Array;
    /**
     * Serialize the Nonce object into a byte array which can be read by Nonce_read
     */
    write(): Uint8Array;
    /**
     * Read a Nonce from a byte array, created by Nonce_write
     */
    static constructor_read(ser: Uint8Array): Result_NonceDecodeErrorZ;
}
