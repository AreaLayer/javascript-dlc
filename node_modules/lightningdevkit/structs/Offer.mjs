import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { Option_CVec_u8ZZ } from '../structs/Option_CVec_u8ZZ.mjs';
import { Option_AmountZ } from '../structs/Option_AmountZ.mjs';
import { Quantity } from '../structs/Quantity.mjs';
import { OfferId } from '../structs/OfferId.mjs';
import { Result_InvoiceRequestWithDerivedPayerIdBuilderBolt12SemanticErrorZ } from '../structs/Result_InvoiceRequestWithDerivedPayerIdBuilderBolt12SemanticErrorZ.mjs';
import { Result_InvoiceRequestWithExplicitPayerIdBuilderBolt12SemanticErrorZ } from '../structs/Result_InvoiceRequestWithExplicitPayerIdBuilderBolt12SemanticErrorZ.mjs';
import { Result_OfferDecodeErrorZ } from '../structs/Result_OfferDecodeErrorZ.mjs';
import { Result_OfferBolt12ParseErrorZ } from '../structs/Result_OfferBolt12ParseErrorZ.mjs';
import { PrintableString } from '../structs/PrintableString.mjs';
import { OfferFeatures } from '../structs/OfferFeatures.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An `Offer` is a potentially long-lived proposal for payment of a good or service.
 *
 * An offer is a precursor to an [`InvoiceRequest`]. A merchant publishes an offer from which a
 * customer may request an [`Bolt12Invoice`] for a specific quantity and using an amount sufficient
 * to cover that quantity (i.e., at least `quantity * amount`). See [`Offer::amount`].
 *
 * Offers may be denominated in currency other than bitcoin but are ultimately paid using the
 * latter.
 *
 * Through the use of [`BlindedMessagePath`]s, offers provide recipient privacy.
 *
 * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
 * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
 */
export class Offer extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Offer_free);
    }
    clone_ptr() {
        const ret = bindings.Offer_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Offer
     */
    clone() {
        const ret = bindings.Offer_clone(this.ptr);
        const ret_hu_conv = new Offer(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The chains that may be used when paying a requested invoice (e.g., bitcoin mainnet).
     * Payments must be denominated in units of the minimal lightning-payable unit (e.g., msats)
     * for the selected chain.
     */
    chains() {
        const ret = bindings.Offer_chains(this.ptr);
        const ret_conv_12_len = bindings.getArrayLength(ret);
        const ret_conv_12_arr = new Array(ret_conv_12_len).fill(null);
        for (var m = 0; m < ret_conv_12_len; m++) {
            const ret_conv_12 = bindings.getU32ArrayElem(ret, m);
            const ret_conv_12_conv = bindings.decodeUint8Array(ret_conv_12);
            ret_conv_12_arr[m] = ret_conv_12_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_12_arr;
    }
    /**
     * Opaque bytes set by the originator. Useful for authentication and validating fields since it
     * is reflected in `invoice_request` messages along with all the other fields from the `offer`.
     */
    metadata() {
        const ret = bindings.Offer_metadata(this.ptr);
        const ret_hu_conv = Option_CVec_u8ZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The minimum amount required for a successful payment of a single item.
     */
    amount() {
        const ret = bindings.Offer_amount(this.ptr);
        const ret_hu_conv = Option_AmountZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * A complete description of the purpose of the payment. Intended to be displayed to the user
     * but with the caveat that it has not been verified in any way.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    description() {
        const ret = bindings.Offer_description(this.ptr);
        const ret_hu_conv = new PrintableString(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Features pertaining to the offer.
     */
    offer_features() {
        const ret = bindings.Offer_offer_features(this.ptr);
        const ret_hu_conv = new OfferFeatures(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Duration since the Unix epoch when an invoice should no longer be requested.
     *
     * If `None`, the offer does not expire.
     */
    absolute_expiry() {
        const ret = bindings.Offer_absolute_expiry(this.ptr);
        const ret_hu_conv = Option_u64Z.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The issuer of the offer, possibly beginning with `user@domain` or `domain`. Intended to be
     * displayed to the user but with the caveat that it has not been verified in any way.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    issuer() {
        const ret = bindings.Offer_issuer(this.ptr);
        const ret_hu_conv = new PrintableString(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Paths to the recipient originating from publicly reachable nodes. Blinded paths provide
     * recipient privacy by obfuscating its node id.
     */
    paths() {
        const ret = bindings.Offer_paths(this.ptr);
        const ret_conv_20_len = bindings.getArrayLength(ret);
        const ret_conv_20_arr = new Array(ret_conv_20_len).fill(null);
        for (var u = 0; u < ret_conv_20_len; u++) {
            const ret_conv_20 = bindings.getU64ArrayElem(ret, u);
            const ret_conv_20_hu_conv = new BlindedMessagePath(null, ret_conv_20);
            CommonBase.add_ref_from(ret_conv_20_hu_conv, this);
            ret_conv_20_arr[u] = ret_conv_20_hu_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_20_arr;
    }
    /**
     * The quantity of items supported.
     */
    supported_quantity() {
        const ret = bindings.Offer_supported_quantity(this.ptr);
        const ret_hu_conv = Quantity.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The public key used by the recipient to sign invoices.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    signing_pubkey() {
        const ret = bindings.Offer_signing_pubkey(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Returns the id of the offer.
     */
    id() {
        const ret = bindings.Offer_id(this.ptr);
        const ret_hu_conv = new OfferId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Returns whether the given chain is supported by the offer.
     */
    supports_chain(chain) {
        const ret = bindings.Offer_supports_chain(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(chain, 32)));
        return ret;
    }
    /**
     * Whether the offer has expired given the duration since the Unix epoch.
     */
    is_expired_no_std(duration_since_epoch) {
        const ret = bindings.Offer_is_expired_no_std(this.ptr, duration_since_epoch);
        return ret;
    }
    /**
     * Returns whether the given quantity is valid for the offer.
     */
    is_valid_quantity(quantity) {
        const ret = bindings.Offer_is_valid_quantity(this.ptr, quantity);
        return ret;
    }
    /**
     * Returns whether a quantity is expected in an [`InvoiceRequest`] for the offer.
     *
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     */
    expects_quantity() {
        const ret = bindings.Offer_expects_quantity(this.ptr);
        return ret;
    }
    /**
     * Similar to [`Offer::request_invoice`] except it:
     * - derives the [`InvoiceRequest::payer_id`] such that a different key can be used for each
     * request,
     * - sets [`InvoiceRequest::payer_metadata`] when [`InvoiceRequestBuilder::build`] is called
     * such that it can be used by [`Bolt12Invoice::verify_using_metadata`] to determine if the
     * invoice was requested using a base [`ExpandedKey`] from which the payer id was derived,
     * and
     * - includes the [`PaymentId`] encrypted in [`InvoiceRequest::payer_metadata`] so that it can
     * be used when sending the payment for the requested invoice.
     *
     * Useful to protect the sender's privacy.
     *
     * [`InvoiceRequest::payer_id`]: crate::offers::invoice_request::InvoiceRequest::payer_id
     * [`InvoiceRequest::payer_metadata`]: crate::offers::invoice_request::InvoiceRequest::payer_metadata
     * [`Bolt12Invoice::verify_using_metadata`]: crate::offers::invoice::Bolt12Invoice::verify_using_metadata
     * [`ExpandedKey`]: crate::ln::inbound_payment::ExpandedKey
     */
    request_invoice_deriving_payer_id(expanded_key, nonce, payment_id) {
        const ret = bindings.Offer_request_invoice_deriving_payer_id(this.ptr, CommonBase.get_ptr_of(expanded_key), CommonBase.get_ptr_of(nonce), bindings.encodeUint8Array(bindings.check_arr_len(payment_id, 32)));
        const ret_hu_conv = Result_InvoiceRequestWithDerivedPayerIdBuilderBolt12SemanticErrorZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(this, expanded_key);
        return ret_hu_conv;
    }
    /**
     * Similar to [`Offer::request_invoice_deriving_payer_id`] except uses `payer_id` for the
     * [`InvoiceRequest::payer_id`] instead of deriving a different key for each request.
     *
     * Useful for recurring payments using the same `payer_id` with different invoices.
     *
     * [`InvoiceRequest::payer_id`]: crate::offers::invoice_request::InvoiceRequest::payer_id
     */
    request_invoice_deriving_metadata(payer_id, expanded_key, nonce, payment_id) {
        const ret = bindings.Offer_request_invoice_deriving_metadata(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(payer_id, 33)), CommonBase.get_ptr_of(expanded_key), CommonBase.get_ptr_of(nonce), bindings.encodeUint8Array(bindings.check_arr_len(payment_id, 32)));
        const ret_hu_conv = Result_InvoiceRequestWithExplicitPayerIdBuilderBolt12SemanticErrorZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(this, expanded_key);
        return ret_hu_conv;
    }
    /**
     * Creates an [`InvoiceRequestBuilder`] for the offer with the given `metadata` and `payer_id`,
     * which will be reflected in the `Bolt12Invoice` response.
     *
     * The `metadata` is useful for including information about the derivation of `payer_id` such
     * that invoice response handling can be stateless. Also serves as payer-provided entropy while
     * hashing in the signature calculation.
     *
     * This should not leak any information such as by using a simple BIP-32 derivation path.
     * Otherwise, payments may be correlated.
     *
     * Errors if the offer contains unknown required features.
     *
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     */
    request_invoice(metadata, payer_id) {
        const ret = bindings.Offer_request_invoice(this.ptr, bindings.encodeUint8Array(metadata), bindings.encodeUint8Array(bindings.check_arr_len(payer_id, 33)));
        const ret_hu_conv = Result_InvoiceRequestWithExplicitPayerIdBuilderBolt12SemanticErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the Offer.
     */
    hash() {
        const ret = bindings.Offer_hash(this.ptr);
        return ret;
    }
    /**
     * Read a Offer from a byte array, created by Offer_write
     */
    static constructor_read(ser) {
        const ret = bindings.Offer_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_OfferDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Serialize the Offer object into a byte array which can be read by Offer_read
     */
    write() {
        const ret = bindings.Offer_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a Offer object from a string
     */
    static constructor_from_str(s) {
        const ret = bindings.Offer_from_str(bindings.encodeString(s));
        const ret_hu_conv = Result_OfferBolt12ParseErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Get the string representation of a Offer object
     */
    to_str() {
        const ret = bindings.Offer_to_str(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
}
//# sourceMappingURL=Offer.mjs.map