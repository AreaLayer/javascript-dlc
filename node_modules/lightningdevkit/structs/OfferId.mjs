import { Result_OfferIdDecodeErrorZ } from '../structs/Result_OfferIdDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An identifier for an [`Offer`] built using [`DerivedMetadata`].
 */
export class OfferId extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OfferId_free);
    }
    get_a() {
        const ret = bindings.OfferId_get_a(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    set_a(val) {
        bindings.OfferId_set_a(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * Constructs a new OfferId given each field
     */
    static constructor_new(a_arg) {
        const ret = bindings.OfferId_new(bindings.encodeUint8Array(bindings.check_arr_len(a_arg, 32)));
        const ret_hu_conv = new OfferId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.OfferId_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the OfferId
     */
    clone() {
        const ret = bindings.OfferId_clone(this.ptr);
        const ret_hu_conv = new OfferId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two OfferIds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.OfferId_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the OfferId object into a byte array which can be read by OfferId_read
     */
    write() {
        const ret = bindings.OfferId_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a OfferId from a byte array, created by OfferId_write
     */
    static constructor_read(ser) {
        const ret = bindings.OfferId_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_OfferIdDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=OfferId.mjs.map