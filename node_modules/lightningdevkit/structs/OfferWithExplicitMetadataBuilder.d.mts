import { Network } from '../enums/Network.mjs';
import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { Quantity } from '../structs/Quantity.mjs';
import { Result_NoneBolt12SemanticErrorZ } from '../structs/Result_NoneBolt12SemanticErrorZ.mjs';
import { Result_OfferBolt12SemanticErrorZ } from '../structs/Result_OfferBolt12SemanticErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Builds an [`Offer`] for the \"offer to be paid\" flow.
 *
 * See [module-level documentation] for usage.
 *
 * [module-level documentation]: self
 */
export declare class OfferWithExplicitMetadataBuilder extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the OfferWithExplicitMetadataBuilder
     */
    clone(): OfferWithExplicitMetadataBuilder;
    /**
     * Creates a new builder for an offer using the [`Offer::signing_pubkey`] for signing invoices.
     * The associated secret key must be remembered while the offer is valid.
     *
     * Use a different pubkey per offer to avoid correlating offers.
     *
     * # Note
     *
     * If constructing an [`Offer`] for use with a [`ChannelManager`], use
     * [`ChannelManager::create_offer_builder`] instead of [`OfferBuilder::new`].
     *
     * [`ChannelManager`]: crate::ln::channelmanager::ChannelManager
     * [`ChannelManager::create_offer_builder`]: crate::ln::channelmanager::ChannelManager::create_offer_builder
     */
    static constructor_new(signing_pubkey: Uint8Array): OfferWithExplicitMetadataBuilder;
    /**
     * Sets the [`Offer::metadata`] to the given bytes.
     *
     * Successive calls to this method will override the previous setting.
     */
    metadata(metadata: Uint8Array): Result_NoneBolt12SemanticErrorZ;
    /**
     * Adds the chain hash of the given [`Network`] to [`Offer::chains`]. If not called,
     * the chain hash of [`Network::Bitcoin`] is assumed to be the only one supported.
     *
     * See [`Offer::chains`] on how this relates to the payment currency.
     *
     * Successive calls to this method will add another chain hash.
     */
    chain(network: Network): void;
    /**
     * Sets the [`Offer::amount`] as an [`Amount::Bitcoin`].
     *
     * Successive calls to this method will override the previous setting.
     */
    amount_msats(amount_msats: bigint): void;
    /**
     * Sets the [`Offer::absolute_expiry`] as seconds since the Unix epoch. Any expiry that has
     * already passed is valid and can be checked for using [`Offer::is_expired`].
     *
     * Successive calls to this method will override the previous setting.
     */
    absolute_expiry(absolute_expiry: bigint): void;
    /**
     * Sets the [`Offer::description`].
     *
     * Successive calls to this method will override the previous setting.
     */
    description(description: string): void;
    /**
     * Sets the [`Offer::issuer`].
     *
     * Successive calls to this method will override the previous setting.
     */
    issuer(issuer: string): void;
    /**
     * Adds a blinded path to [`Offer::paths`]. Must include at least one path if only connected by
     * private channels or if [`Offer::signing_pubkey`] is not a public node id.
     *
     * Successive calls to this method will add another blinded path. Caller is responsible for not
     * adding duplicate paths.
     */
    path(path: BlindedMessagePath): void;
    /**
     * Sets the quantity of items for [`Offer::supported_quantity`]. If not called, defaults to
     * [`Quantity::One`].
     *
     * Successive calls to this method will override the previous setting.
     */
    supported_quantity(quantity: Quantity): void;
    /**
     * Builds an [`Offer`] from the builder's settings.
     */
    build(): Result_OfferBolt12SemanticErrorZ;
}
