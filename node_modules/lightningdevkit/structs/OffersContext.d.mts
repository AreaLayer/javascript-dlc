import { Nonce } from '../structs/Nonce.mjs';
import { Result_OffersContextDecodeErrorZ } from '../structs/Result_OffersContextDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Contains data specific to an [`OffersMessage`].
 *
 * [`OffersMessage`]: crate::onion_message::offers::OffersMessage
 */
export declare class OffersContext extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the OffersContext
     */
    clone(): OffersContext;
    /**
     * Utility method to constructs a new InvoiceRequest-variant OffersContext
     */
    static constructor_invoice_request(nonce: Nonce): OffersContext;
    /**
     * Utility method to constructs a new OutboundPayment-variant OffersContext
     */
    static constructor_outbound_payment(payment_id: Uint8Array, nonce: Nonce, hmac: Uint8Array): OffersContext;
    /**
     * Utility method to constructs a new InboundPayment-variant OffersContext
     */
    static constructor_inbound_payment(payment_hash: Uint8Array): OffersContext;
    /**
     * Checks if two OffersContexts contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: OffersContext): boolean;
    /**
     * Serialize the OffersContext object into a byte array which can be read by OffersContext_read
     */
    write(): Uint8Array;
    /**
     * Read a OffersContext from a byte array, created by OffersContext_write
     */
    static constructor_read(ser: Uint8Array): Result_OffersContextDecodeErrorZ;
}
/** A OffersContext of type InvoiceRequest */
export declare class OffersContext_InvoiceRequest extends OffersContext {
    /**
     * A nonce used for authenticating that an [`InvoiceRequest`] is for a valid [`Offer`] and
     * for deriving the offer's signing keys.
     *
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     * [`Offer`]: crate::offers::offer::Offer
     */
    nonce: Nonce;
}
/** A OffersContext of type OutboundPayment */
export declare class OffersContext_OutboundPayment extends OffersContext {
    /**
     * Payment ID used when creating a [`Refund`] or [`InvoiceRequest`].
     *
     * [`Refund`]: crate::offers::refund::Refund
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     */
    payment_id: Uint8Array;
    /**
     * A nonce used for authenticating that a [`Bolt12Invoice`] is for a valid [`Refund`] or
     * [`InvoiceRequest`] and for deriving their signing keys.
     *
     * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
     * [`Refund`]: crate::offers::refund::Refund
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     */
    nonce: Nonce;
    /**
     * Authentication code for the [`PaymentId`], which should be checked when the context is
     * used with an [`InvoiceError`].
     *
     * [`InvoiceError`]: crate::offers::invoice_error::InvoiceError
     *
     * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    hmac: Uint8Array;
}
/** A OffersContext of type InboundPayment */
export declare class OffersContext_InboundPayment extends OffersContext {
    /**
     * The same payment hash as [`Bolt12Invoice::payment_hash`].
     *
     * [`Bolt12Invoice::payment_hash`]: crate::offers::invoice::Bolt12Invoice::payment_hash
     */
    payment_hash: Uint8Array;
}
