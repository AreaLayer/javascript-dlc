import { Bolt12Invoice } from '../structs/Bolt12Invoice.mjs';
import { Logger } from '../structs/Logger.mjs';
import { InvoiceRequest } from '../structs/InvoiceRequest.mjs';
import { InvoiceError } from '../structs/InvoiceError.mjs';
import { OnionMessageContents } from '../structs/OnionMessageContents.mjs';
import { Result_OffersMessageDecodeErrorZ } from '../structs/Result_OffersMessageDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Possible BOLT 12 Offers messages sent and received via an [`OnionMessage`].
 *
 * [`OnionMessage`]: crate::ln::msgs::OnionMessage
 */
export declare class OffersMessage extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the OffersMessage
     */
    clone(): OffersMessage;
    /**
     * Utility method to constructs a new InvoiceRequest-variant OffersMessage
     */
    static constructor_invoice_request(a: InvoiceRequest): OffersMessage;
    /**
     * Utility method to constructs a new Invoice-variant OffersMessage
     */
    static constructor_invoice(a: Bolt12Invoice): OffersMessage;
    /**
     * Utility method to constructs a new InvoiceError-variant OffersMessage
     */
    static constructor_invoice_error(a: InvoiceError): OffersMessage;
    /**
     * Constructs a new OnionMessageContents which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned OnionMessageContents must be freed before this_arg is
     */
    as_OnionMessageContents(): OnionMessageContents;
    /**
     * Serialize the OffersMessage object into a byte array which can be read by OffersMessage_read
     */
    write(): Uint8Array;
    /**
     * Read a OffersMessage from a byte array, created by OffersMessage_write
     */
    static constructor_read(ser: Uint8Array, arg_a: bigint, arg_b: Logger): Result_OffersMessageDecodeErrorZ;
}
/** A OffersMessage of type InvoiceRequest */
export declare class OffersMessage_InvoiceRequest extends OffersMessage {
    invoice_request: InvoiceRequest;
}
/** A OffersMessage of type Invoice */
export declare class OffersMessage_Invoice extends OffersMessage {
    invoice: Bolt12Invoice;
}
/** A OffersMessage of type InvoiceError */
export declare class OffersMessage_InvoiceError extends OffersMessage {
    invoice_error: InvoiceError;
}
