import { Option_OffersContextZ } from '../structs/Option_OffersContextZ.mjs';
import { OffersMessage } from '../structs/OffersMessage.mjs';
import { Option_C2Tuple_OffersMessageResponseInstructionZZ } from '../structs/Option_C2Tuple_OffersMessageResponseInstructionZZ.mjs';
import { TwoTuple_OffersMessageMessageSendInstructionsZ } from '../structs/TwoTuple_OffersMessageMessageSendInstructionsZ.mjs';
import { Responder } from '../structs/Responder.mjs';
import { CommonBase } from './CommonBase.mjs';
/** An implementation of OffersMessageHandler */
export interface OffersMessageHandlerInterface {
    /**Handles the given message by either responding with an [`Bolt12Invoice`], sending a payment,
     * or replying with an error.
     *
     * The returned [`OffersMessage`], if any, is enqueued to be sent by [`OnionMessenger`].
     *
     * [`OnionMessenger`]: crate::onion_message::messenger::OnionMessenger
     *
     * Note that responder (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    handle_message(message: OffersMessage, context: Option_OffersContextZ, responder: Responder): Option_C2Tuple_OffersMessageResponseInstructionZZ;
    /**Releases any [`OffersMessage`]s that need to be sent.
     *
     * Typically, this is used for messages initiating a payment flow rather than in response to
     * another message. The latter should use the return value of [`Self::handle_message`].
     */
    release_pending_messages(): TwoTuple_OffersMessageMessageSendInstructionsZ[];
}
/**
 * A handler for an [`OnionMessage`] containing a BOLT 12 Offers message as its payload.
 *
 * [`OnionMessage`]: crate::ln::msgs::OnionMessage
 */
export declare class OffersMessageHandler extends CommonBase {
    /** Creates a new instance of OffersMessageHandler from a given implementation */
    static new_impl(arg: OffersMessageHandlerInterface): OffersMessageHandler;
    /**
     * Handles the given message by either responding with an [`Bolt12Invoice`], sending a payment,
     * or replying with an error.
     *
     * The returned [`OffersMessage`], if any, is enqueued to be sent by [`OnionMessenger`].
     *
     * [`OnionMessenger`]: crate::onion_message::messenger::OnionMessenger
     *
     * Note that responder (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    handle_message(message: OffersMessage, context: Option_OffersContextZ, responder: Responder | null): Option_C2Tuple_OffersMessageResponseInstructionZZ;
    /**
     * Releases any [`OffersMessage`]s that need to be sent.
     *
     * Typically, this is used for messages initiating a payment flow rather than in response to
     * another message. The latter should use the return value of [`Self::handle_message`].
     */
    release_pending_messages(): TwoTuple_OffersMessageMessageSendInstructionsZ[];
}
