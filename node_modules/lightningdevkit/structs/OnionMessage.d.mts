import { Result_OnionMessageDecodeErrorZ } from '../structs/Result_OnionMessageDecodeErrorZ.mjs';
import { Packet } from '../structs/Packet.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An onion message to be sent to or received from a peer.
 */
export declare class OnionMessage extends CommonBase {
    /**
     * Used in decrypting the onion packet's payload.
     */
    get_blinding_point(): Uint8Array;
    /**
     * Used in decrypting the onion packet's payload.
     */
    set_blinding_point(val: Uint8Array): void;
    /**
     * The full onion packet including hop data, pubkey, and hmac
     */
    get_onion_routing_packet(): Packet;
    /**
     * The full onion packet including hop data, pubkey, and hmac
     */
    set_onion_routing_packet(val: Packet): void;
    /**
     * Constructs a new OnionMessage given each field
     */
    static constructor_new(blinding_point_arg: Uint8Array, onion_routing_packet_arg: Packet): OnionMessage;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the OnionMessage
     */
    clone(): OnionMessage;
    /**
     * Generates a non-cryptographic 64-bit hash of the OnionMessage.
     */
    hash(): bigint;
    /**
     * Checks if two OnionMessages contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: OnionMessage): boolean;
    /**
     * Read a OnionMessage from a byte array, created by OnionMessage_write
     */
    static constructor_read(ser: Uint8Array): Result_OnionMessageDecodeErrorZ;
    /**
     * Serialize the OnionMessage object into a byte array which can be read by OnionMessage_read
     */
    write(): Uint8Array;
}
