import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
class LDKOnionMessageContentsHolder {
    constructor() {
        this.held = null;
    }
}
/**
 * The contents of an onion message.
 */
export class OnionMessageContents extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OnionMessageContents_free);
        this.bindings_instance = null;
    }
    /** Creates a new instance of OnionMessageContents from a given implementation */
    static new_impl(arg) {
        const impl_holder = new LDKOnionMessageContentsHolder();
        let structImplementation = {
            tlv_type() {
                const ret = arg.tlv_type();
                return ret;
            },
            msg_type() {
                const ret = arg.msg_type();
                const result = bindings.encodeString(ret);
                return result;
            },
            write() {
                const ret = arg.write();
                const result = bindings.encodeUint8Array(ret);
                return result;
            },
            debug_str() {
                const ret = arg.debug_str();
                const result = bindings.encodeString(ret);
                return result;
            },
        };
        const ptr_idx = bindings.LDKOnionMessageContents_new(structImplementation);
        impl_holder.held = new OnionMessageContents(null, ptr_idx[0]);
        impl_holder.held.instance_idx = ptr_idx[1];
        impl_holder.held.bindings_instance = structImplementation;
        return impl_holder.held;
    }
    /**
     * Returns the TLV type identifying the message contents. MUST be >= 64.
     */
    tlv_type() {
        const ret = bindings.OnionMessageContents_tlv_type(this.ptr);
        return ret;
    }
    /**
     * Returns the message type
     */
    msg_type() {
        const ret = bindings.OnionMessageContents_msg_type(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
    /**
     * Serialize the object into a byte array
     */
    write() {
        const ret = bindings.OnionMessageContents_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Return a human-readable "debug" string describing this object
     */
    debug_str() {
        const ret = bindings.OnionMessageContents_debug_str(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
    clone_ptr() {
        const ret = bindings.OnionMessageContents_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of a OnionMessageContents
     */
    clone() {
        const ret = bindings.OnionMessageContents_clone(this.ptr);
        const ret_hu_conv = new OnionMessageContents(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=OnionMessageContents.mjs.map