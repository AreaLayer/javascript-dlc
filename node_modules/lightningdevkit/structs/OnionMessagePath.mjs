import { Option_CVec_SocketAddressZZ } from '../structs/Option_CVec_SocketAddressZZ.mjs';
import { Destination } from '../structs/Destination.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A path for sending an [`OnionMessage`].
 */
export class OnionMessagePath extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OnionMessagePath_free);
    }
    /**
     * Nodes on the path between the sender and the destination.
     *
     * Returns a copy of the field.
     */
    get_intermediate_nodes() {
        const ret = bindings.OnionMessagePath_get_intermediate_nodes(this.ptr);
        const ret_conv_12_len = bindings.getArrayLength(ret);
        const ret_conv_12_arr = new Array(ret_conv_12_len).fill(null);
        for (var m = 0; m < ret_conv_12_len; m++) {
            const ret_conv_12 = bindings.getU32ArrayElem(ret, m);
            const ret_conv_12_conv = bindings.decodeUint8Array(ret_conv_12);
            ret_conv_12_arr[m] = ret_conv_12_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_12_arr;
    }
    /**
     * Nodes on the path between the sender and the destination.
     */
    set_intermediate_nodes(val) {
        bindings.OnionMessagePath_set_intermediate_nodes(this.ptr, bindings.encodeUint32Array(val.map(val_conv_12 => bindings.encodeUint8Array(bindings.check_arr_len(val_conv_12, 33)))));
    }
    /**
     * The recipient of the message.
     */
    get_destination() {
        const ret = bindings.OnionMessagePath_get_destination(this.ptr);
        const ret_hu_conv = Destination.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The recipient of the message.
     */
    set_destination(val) {
        bindings.OnionMessagePath_set_destination(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Addresses that may be used to connect to [`OnionMessagePath::first_node`].
     *
     * Only needs to be set if a connection to the node is required. [`OnionMessenger`] may use
     * this to initiate such a connection.
     *
     * Returns a copy of the field.
     */
    get_first_node_addresses() {
        const ret = bindings.OnionMessagePath_get_first_node_addresses(this.ptr);
        const ret_hu_conv = Option_CVec_SocketAddressZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Addresses that may be used to connect to [`OnionMessagePath::first_node`].
     *
     * Only needs to be set if a connection to the node is required. [`OnionMessenger`] may use
     * this to initiate such a connection.
     */
    set_first_node_addresses(val) {
        bindings.OnionMessagePath_set_first_node_addresses(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new OnionMessagePath given each field
     */
    static constructor_new(intermediate_nodes_arg, destination_arg, first_node_addresses_arg) {
        const ret = bindings.OnionMessagePath_new(bindings.encodeUint32Array(intermediate_nodes_arg.map(intermediate_nodes_arg_conv_12 => bindings.encodeUint8Array(bindings.check_arr_len(intermediate_nodes_arg_conv_12, 33)))), CommonBase.get_ptr_of(destination_arg), CommonBase.get_ptr_of(first_node_addresses_arg));
        const ret_hu_conv = new OnionMessagePath(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.OnionMessagePath_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the OnionMessagePath
     */
    clone() {
        const ret = bindings.OnionMessagePath_clone(this.ptr);
        const ret_hu_conv = new OnionMessagePath(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Returns the first node in the path.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    first_node() {
        const ret = bindings.OnionMessagePath_first_node(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
}
//# sourceMappingURL=OnionMessagePath.mjs.map