import { Result_PublicKeySecp256k1ErrorZ } from '../structs/Result_PublicKeySecp256k1ErrorZ.mjs';
import { Result_OnionPacketDecodeErrorZ } from '../structs/Result_OnionPacketDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * BOLT 4 onion packet including hop data for the next peer.
 */
export class OnionPacket extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OnionPacket_free);
    }
    /**
     * BOLT 4 version number.
     */
    get_version() {
        const ret = bindings.OnionPacket_get_version(this.ptr);
        return ret;
    }
    /**
     * BOLT 4 version number.
     */
    set_version(val) {
        bindings.OnionPacket_set_version(this.ptr, val);
    }
    /**
     * In order to ensure we always return an error on onion decode in compliance with [BOLT
     * #4](https://github.com/lightning/bolts/blob/master/04-onion-routing.md), we have to
     * deserialize `OnionPacket`s contained in [`UpdateAddHTLC`] messages even if the ephemeral
     * public key (here) is bogus, so we hold a [`Result`] instead of a [`PublicKey`] as we'd
     * like.
     *
     * Returns a copy of the field.
     */
    get_public_key() {
        const ret = bindings.OnionPacket_get_public_key(this.ptr);
        const ret_hu_conv = Result_PublicKeySecp256k1ErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * In order to ensure we always return an error on onion decode in compliance with [BOLT
     * #4](https://github.com/lightning/bolts/blob/master/04-onion-routing.md), we have to
     * deserialize `OnionPacket`s contained in [`UpdateAddHTLC`] messages even if the ephemeral
     * public key (here) is bogus, so we hold a [`Result`] instead of a [`PublicKey`] as we'd
     * like.
     */
    set_public_key(val) {
        bindings.OnionPacket_set_public_key(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * HMAC to verify the integrity of hop_data.
     */
    get_hmac() {
        const ret = bindings.OnionPacket_get_hmac(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * HMAC to verify the integrity of hop_data.
     */
    set_hmac(val) {
        bindings.OnionPacket_set_hmac(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    clone_ptr() {
        const ret = bindings.OnionPacket_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the OnionPacket
     */
    clone() {
        const ret = bindings.OnionPacket_clone(this.ptr);
        const ret_hu_conv = new OnionPacket(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the OnionPacket.
     */
    hash() {
        const ret = bindings.OnionPacket_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two OnionPackets contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.OnionPacket_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the OnionPacket object into a byte array which can be read by OnionPacket_read
     */
    write() {
        const ret = bindings.OnionPacket_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a OnionPacket from a byte array, created by OnionPacket_write
     */
    static constructor_read(ser) {
        const ret = bindings.OnionPacket_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_OnionPacketDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=OnionPacket.mjs.map