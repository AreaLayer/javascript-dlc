import { Result_OpenChannelV2DecodeErrorZ } from '../structs/Result_OpenChannelV2DecodeErrorZ.mjs';
import { CommonOpenChannelFields } from '../structs/CommonOpenChannelFields.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An open_channel2 message to be sent by or received from the channel initiator.
 *
 * Used in V2 channel establishment
 */
export class OpenChannelV2 extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OpenChannelV2_free);
    }
    /**
     * Common fields of `open_channel(2)`-like messages
     */
    get_common_fields() {
        const ret = bindings.OpenChannelV2_get_common_fields(this.ptr);
        const ret_hu_conv = new CommonOpenChannelFields(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Common fields of `open_channel(2)`-like messages
     */
    set_common_fields(val) {
        bindings.OpenChannelV2_set_common_fields(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The feerate for the funding transaction set by the channel initiator
     */
    get_funding_feerate_sat_per_1000_weight() {
        const ret = bindings.OpenChannelV2_get_funding_feerate_sat_per_1000_weight(this.ptr);
        return ret;
    }
    /**
     * The feerate for the funding transaction set by the channel initiator
     */
    set_funding_feerate_sat_per_1000_weight(val) {
        bindings.OpenChannelV2_set_funding_feerate_sat_per_1000_weight(this.ptr, val);
    }
    /**
     * The locktime for the funding transaction
     */
    get_locktime() {
        const ret = bindings.OpenChannelV2_get_locktime(this.ptr);
        return ret;
    }
    /**
     * The locktime for the funding transaction
     */
    set_locktime(val) {
        bindings.OpenChannelV2_set_locktime(this.ptr, val);
    }
    /**
     * The second to-be-broadcast-by-channel-initiator transaction's per commitment point
     */
    get_second_per_commitment_point() {
        const ret = bindings.OpenChannelV2_get_second_per_commitment_point(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The second to-be-broadcast-by-channel-initiator transaction's per commitment point
     */
    set_second_per_commitment_point(val) {
        bindings.OpenChannelV2_set_second_per_commitment_point(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Optionally, a requirement that only confirmed inputs can be added
     */
    get_require_confirmed_inputs() {
        const ret = bindings.OpenChannelV2_get_require_confirmed_inputs(this.ptr);
        return ret;
    }
    /**
     * Optionally, a requirement that only confirmed inputs can be added
     */
    set_require_confirmed_inputs(val) {
        bindings.OpenChannelV2_set_require_confirmed_inputs(this.ptr, val);
    }
    /**
     * Constructs a new OpenChannelV2 given each field
     */
    static constructor_new(common_fields_arg, funding_feerate_sat_per_1000_weight_arg, locktime_arg, second_per_commitment_point_arg, require_confirmed_inputs_arg) {
        const ret = bindings.OpenChannelV2_new(CommonBase.get_ptr_of(common_fields_arg), funding_feerate_sat_per_1000_weight_arg, locktime_arg, bindings.encodeUint8Array(bindings.check_arr_len(second_per_commitment_point_arg, 33)), require_confirmed_inputs_arg);
        const ret_hu_conv = new OpenChannelV2(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.OpenChannelV2_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the OpenChannelV2
     */
    clone() {
        const ret = bindings.OpenChannelV2_clone(this.ptr);
        const ret_hu_conv = new OpenChannelV2(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the OpenChannelV2.
     */
    hash() {
        const ret = bindings.OpenChannelV2_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two OpenChannelV2s contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.OpenChannelV2_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the OpenChannelV2 object into a byte array which can be read by OpenChannelV2_read
     */
    write() {
        const ret = bindings.OpenChannelV2_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a OpenChannelV2 from a byte array, created by OpenChannelV2_write
     */
    static constructor_read(ser) {
        const ret = bindings.OpenChannelV2_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_OpenChannelV2DecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=OpenChannelV2.mjs.map