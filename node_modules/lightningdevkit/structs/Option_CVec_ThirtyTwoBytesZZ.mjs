import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An enum which can either contain a crate::c_types::derived::CVec_ThirtyTwoBytesZ or not
 */
export class Option_CVec_ThirtyTwoBytesZZ extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.COption_CVec_ThirtyTwoBytesZZ_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKCOption_CVec_ThirtyTwoBytesZZ_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new Option_CVec_ThirtyTwoBytesZZ_Some(ptr);
            case 1: return new Option_CVec_ThirtyTwoBytesZZ_None(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    /**
     * Constructs a new COption_CVec_ThirtyTwoBytesZZ containing a crate::c_types::derived::CVec_ThirtyTwoBytesZ
     */
    static constructor_some(o) {
        const ret = bindings.COption_CVec_ThirtyTwoBytesZZ_some(bindings.encodeUint32Array(o.map(o_conv_12 => bindings.encodeUint8Array(bindings.check_arr_len(o_conv_12, 32)))));
        const ret_hu_conv = Option_CVec_ThirtyTwoBytesZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Constructs a new COption_CVec_ThirtyTwoBytesZZ containing nothing
     */
    static constructor_none() {
        const ret = bindings.COption_CVec_ThirtyTwoBytesZZ_none();
        const ret_hu_conv = Option_CVec_ThirtyTwoBytesZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.COption_CVec_ThirtyTwoBytesZZ_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a new COption_CVec_ThirtyTwoBytesZZ which has the same data as `orig`
     * but with all dynamically-allocated buffers duplicated in new buffers.
     */
    clone() {
        const ret = bindings.COption_CVec_ThirtyTwoBytesZZ_clone(this.ptr);
        const ret_hu_conv = Option_CVec_ThirtyTwoBytesZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
/** A Option_CVec_ThirtyTwoBytesZZ of type Some */
export class Option_CVec_ThirtyTwoBytesZZ_Some extends Option_CVec_ThirtyTwoBytesZZ {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const some = bindings.LDKCOption_CVec_ThirtyTwoBytesZZ_Some_get_some(ptr);
        const some_conv_12_len = bindings.getArrayLength(some);
        const some_conv_12_arr = new Array(some_conv_12_len).fill(null);
        for (var m = 0; m < some_conv_12_len; m++) {
            const some_conv_12 = bindings.getU32ArrayElem(some, m);
            const some_conv_12_conv = bindings.decodeUint8Array(some_conv_12);
            some_conv_12_arr[m] = some_conv_12_conv;
        }
        bindings.freeWasmMemory(some);
        this.some = some_conv_12_arr;
    }
}
/** A Option_CVec_ThirtyTwoBytesZZ of type None */
export class Option_CVec_ThirtyTwoBytesZZ_None extends Option_CVec_ThirtyTwoBytesZZ {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
//# sourceMappingURL=Option_CVec_ThirtyTwoBytesZZ.mjs.map