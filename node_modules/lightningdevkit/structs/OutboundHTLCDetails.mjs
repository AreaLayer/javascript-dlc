import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { Option_OutboundHTLCStateDetailsZ } from '../structs/Option_OutboundHTLCStateDetailsZ.mjs';
import { Result_OutboundHTLCDetailsDecodeErrorZ } from '../structs/Result_OutboundHTLCDetailsDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Exposes details around pending outbound HTLCs.
 */
export class OutboundHTLCDetails extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OutboundHTLCDetails_free);
    }
    /**
     * The HTLC ID.
     * The IDs are incremented by 1 starting from 0 for each offered HTLC.
     * They are unique per channel and inbound/outbound direction, unless an HTLC was only announced
     * and not part of any commitment transaction.
     *
     * Not present when we are awaiting a remote revocation and the HTLC is not added yet.
     */
    get_htlc_id() {
        const ret = bindings.OutboundHTLCDetails_get_htlc_id(this.ptr);
        const ret_hu_conv = Option_u64Z.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The HTLC ID.
     * The IDs are incremented by 1 starting from 0 for each offered HTLC.
     * They are unique per channel and inbound/outbound direction, unless an HTLC was only announced
     * and not part of any commitment transaction.
     *
     * Not present when we are awaiting a remote revocation and the HTLC is not added yet.
     */
    set_htlc_id(val) {
        bindings.OutboundHTLCDetails_set_htlc_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The amount in msat.
     */
    get_amount_msat() {
        const ret = bindings.OutboundHTLCDetails_get_amount_msat(this.ptr);
        return ret;
    }
    /**
     * The amount in msat.
     */
    set_amount_msat(val) {
        bindings.OutboundHTLCDetails_set_amount_msat(this.ptr, val);
    }
    /**
     * The block height at which this HTLC expires.
     */
    get_cltv_expiry() {
        const ret = bindings.OutboundHTLCDetails_get_cltv_expiry(this.ptr);
        return ret;
    }
    /**
     * The block height at which this HTLC expires.
     */
    set_cltv_expiry(val) {
        bindings.OutboundHTLCDetails_set_cltv_expiry(this.ptr, val);
    }
    /**
     * The payment hash.
     */
    get_payment_hash() {
        const ret = bindings.OutboundHTLCDetails_get_payment_hash(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The payment hash.
     */
    set_payment_hash(val) {
        bindings.OutboundHTLCDetails_set_payment_hash(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * The state of the HTLC in the state machine.
     *
     * Determines on which commitment transactions the HTLC is included and what message the HTLC is
     * waiting for to advance to the next state.
     *
     * See [`OutboundHTLCStateDetails`] for information on the specific states.
     *
     * LDK will always fill this field in, but when downgrading to prior versions of LDK, new
     * states may result in `None` here.
     */
    get_state() {
        const ret = bindings.OutboundHTLCDetails_get_state(this.ptr);
        const ret_hu_conv = Option_OutboundHTLCStateDetailsZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The state of the HTLC in the state machine.
     *
     * Determines on which commitment transactions the HTLC is included and what message the HTLC is
     * waiting for to advance to the next state.
     *
     * See [`OutboundHTLCStateDetails`] for information on the specific states.
     *
     * LDK will always fill this field in, but when downgrading to prior versions of LDK, new
     * states may result in `None` here.
     */
    set_state(val) {
        bindings.OutboundHTLCDetails_set_state(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The extra fee being skimmed off the top of this HTLC.
     */
    get_skimmed_fee_msat() {
        const ret = bindings.OutboundHTLCDetails_get_skimmed_fee_msat(this.ptr);
        const ret_hu_conv = Option_u64Z.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The extra fee being skimmed off the top of this HTLC.
     */
    set_skimmed_fee_msat(val) {
        bindings.OutboundHTLCDetails_set_skimmed_fee_msat(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Whether the HTLC has an output below the local dust limit. If so, the output will be trimmed
     * from the local commitment transaction and added to the commitment transaction fee.
     * For non-anchor channels, this takes into account the cost of the second-stage HTLC
     * transactions as well.
     *
     * When the local commitment transaction is broadcasted as part of a unilateral closure,
     * the value of this HTLC will therefore not be claimable but instead burned as a transaction
     * fee.
     *
     * Note that dust limits are specific to each party. An HTLC can be dust for the local
     * commitment transaction but not for the counterparty's commitment transaction and vice versa.
     */
    get_is_dust() {
        const ret = bindings.OutboundHTLCDetails_get_is_dust(this.ptr);
        return ret;
    }
    /**
     * Whether the HTLC has an output below the local dust limit. If so, the output will be trimmed
     * from the local commitment transaction and added to the commitment transaction fee.
     * For non-anchor channels, this takes into account the cost of the second-stage HTLC
     * transactions as well.
     *
     * When the local commitment transaction is broadcasted as part of a unilateral closure,
     * the value of this HTLC will therefore not be claimable but instead burned as a transaction
     * fee.
     *
     * Note that dust limits are specific to each party. An HTLC can be dust for the local
     * commitment transaction but not for the counterparty's commitment transaction and vice versa.
     */
    set_is_dust(val) {
        bindings.OutboundHTLCDetails_set_is_dust(this.ptr, val);
    }
    /**
     * Constructs a new OutboundHTLCDetails given each field
     */
    static constructor_new(htlc_id_arg, amount_msat_arg, cltv_expiry_arg, payment_hash_arg, state_arg, skimmed_fee_msat_arg, is_dust_arg) {
        const ret = bindings.OutboundHTLCDetails_new(CommonBase.get_ptr_of(htlc_id_arg), amount_msat_arg, cltv_expiry_arg, bindings.encodeUint8Array(bindings.check_arr_len(payment_hash_arg, 32)), CommonBase.get_ptr_of(state_arg), CommonBase.get_ptr_of(skimmed_fee_msat_arg), is_dust_arg);
        const ret_hu_conv = new OutboundHTLCDetails(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.OutboundHTLCDetails_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the OutboundHTLCDetails
     */
    clone() {
        const ret = bindings.OutboundHTLCDetails_clone(this.ptr);
        const ret_hu_conv = new OutboundHTLCDetails(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the OutboundHTLCDetails object into a byte array which can be read by OutboundHTLCDetails_read
     */
    write() {
        const ret = bindings.OutboundHTLCDetails_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a OutboundHTLCDetails from a byte array, created by OutboundHTLCDetails_write
     */
    static constructor_read(ser) {
        const ret = bindings.OutboundHTLCDetails_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_OutboundHTLCDetailsDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=OutboundHTLCDetails.mjs.map