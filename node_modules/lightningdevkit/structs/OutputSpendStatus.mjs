import { Option_u32Z } from '../structs/Option_u32Z.mjs';
import { Result_OutputSpendStatusDecodeErrorZ } from '../structs/Result_OutputSpendStatusDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The current status of the output spend.
 */
export class OutputSpendStatus extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.OutputSpendStatus_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKOutputSpendStatus_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new OutputSpendStatus_PendingInitialBroadcast(ptr);
            case 1: return new OutputSpendStatus_PendingFirstConfirmation(ptr);
            case 2: return new OutputSpendStatus_PendingThresholdConfirmations(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.OutputSpendStatus_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the OutputSpendStatus
     */
    clone() {
        const ret = bindings.OutputSpendStatus_clone(this.ptr);
        const ret_hu_conv = OutputSpendStatus.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new PendingInitialBroadcast-variant OutputSpendStatus
     */
    static constructor_pending_initial_broadcast(delayed_until_height) {
        const ret = bindings.OutputSpendStatus_pending_initial_broadcast(CommonBase.get_ptr_of(delayed_until_height));
        const ret_hu_conv = OutputSpendStatus.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new PendingFirstConfirmation-variant OutputSpendStatus
     */
    static constructor_pending_first_confirmation(first_broadcast_hash, latest_broadcast_height, latest_spending_tx) {
        const ret = bindings.OutputSpendStatus_pending_first_confirmation(bindings.encodeUint8Array(bindings.check_arr_len(first_broadcast_hash, 32)), latest_broadcast_height, bindings.encodeUint8Array(latest_spending_tx));
        const ret_hu_conv = OutputSpendStatus.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new PendingThresholdConfirmations-variant OutputSpendStatus
     */
    static constructor_pending_threshold_confirmations(first_broadcast_hash, latest_broadcast_height, latest_spending_tx, confirmation_height, confirmation_hash) {
        const ret = bindings.OutputSpendStatus_pending_threshold_confirmations(bindings.encodeUint8Array(bindings.check_arr_len(first_broadcast_hash, 32)), latest_broadcast_height, bindings.encodeUint8Array(latest_spending_tx), confirmation_height, bindings.encodeUint8Array(bindings.check_arr_len(confirmation_hash, 32)));
        const ret_hu_conv = OutputSpendStatus.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two OutputSpendStatuss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b) {
        const ret = bindings.OutputSpendStatus_eq(this.ptr, CommonBase.get_ptr_of(b));
        return ret;
    }
    /**
     * Serialize the OutputSpendStatus object into a byte array which can be read by OutputSpendStatus_read
     */
    write() {
        const ret = bindings.OutputSpendStatus_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a OutputSpendStatus from a byte array, created by OutputSpendStatus_write
     */
    static constructor_read(ser) {
        const ret = bindings.OutputSpendStatus_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_OutputSpendStatusDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
/** A OutputSpendStatus of type PendingInitialBroadcast */
export class OutputSpendStatus_PendingInitialBroadcast extends OutputSpendStatus {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const delayed_until_height = bindings.LDKOutputSpendStatus_PendingInitialBroadcast_get_delayed_until_height(ptr);
        const delayed_until_height_hu_conv = Option_u32Z.constr_from_ptr(delayed_until_height);
        CommonBase.add_ref_from(delayed_until_height_hu_conv, this);
        this.delayed_until_height = delayed_until_height_hu_conv;
    }
}
/** A OutputSpendStatus of type PendingFirstConfirmation */
export class OutputSpendStatus_PendingFirstConfirmation extends OutputSpendStatus {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const first_broadcast_hash = bindings.LDKOutputSpendStatus_PendingFirstConfirmation_get_first_broadcast_hash(ptr);
        const first_broadcast_hash_conv = bindings.decodeUint8Array(first_broadcast_hash);
        this.first_broadcast_hash = first_broadcast_hash_conv;
        this.latest_broadcast_height = bindings.LDKOutputSpendStatus_PendingFirstConfirmation_get_latest_broadcast_height(ptr);
        const latest_spending_tx = bindings.LDKOutputSpendStatus_PendingFirstConfirmation_get_latest_spending_tx(ptr);
        const latest_spending_tx_conv = bindings.decodeUint8Array(latest_spending_tx);
        this.latest_spending_tx = latest_spending_tx_conv;
    }
}
/** A OutputSpendStatus of type PendingThresholdConfirmations */
export class OutputSpendStatus_PendingThresholdConfirmations extends OutputSpendStatus {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const first_broadcast_hash = bindings.LDKOutputSpendStatus_PendingThresholdConfirmations_get_first_broadcast_hash(ptr);
        const first_broadcast_hash_conv = bindings.decodeUint8Array(first_broadcast_hash);
        this.first_broadcast_hash = first_broadcast_hash_conv;
        this.latest_broadcast_height = bindings.LDKOutputSpendStatus_PendingThresholdConfirmations_get_latest_broadcast_height(ptr);
        const latest_spending_tx = bindings.LDKOutputSpendStatus_PendingThresholdConfirmations_get_latest_spending_tx(ptr);
        const latest_spending_tx_conv = bindings.decodeUint8Array(latest_spending_tx);
        this.latest_spending_tx = latest_spending_tx_conv;
        this.confirmation_height = bindings.LDKOutputSpendStatus_PendingThresholdConfirmations_get_confirmation_height(ptr);
        const confirmation_hash = bindings.LDKOutputSpendStatus_PendingThresholdConfirmations_get_confirmation_hash(ptr);
        const confirmation_hash_conv = bindings.decodeUint8Array(confirmation_hash);
        this.confirmation_hash = confirmation_hash_conv;
    }
}
//# sourceMappingURL=OutputSpendStatus.mjs.map