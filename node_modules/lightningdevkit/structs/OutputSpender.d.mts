import { TxOut } from '../structs/TxOut.mjs';
import { SpendableOutputDescriptor } from '../structs/SpendableOutputDescriptor.mjs';
import { Option_u32Z } from '../structs/Option_u32Z.mjs';
import { Result_TransactionNoneZ } from '../structs/Result_TransactionNoneZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/** An implementation of OutputSpender */
export interface OutputSpenderInterface {
    /**Creates a [`Transaction`] which spends the given descriptors to the given outputs, plus an
     * output to the given change destination (if sufficient change value remains). The
     * transaction will have a feerate, at least, of the given value.
     *
     * The `locktime` argument is used to set the transaction's locktime. If `None`, the
     * transaction will have a locktime of 0. It it recommended to set this to the current block
     * height to avoid fee sniping, unless you have some specific reason to use a different
     * locktime.
     *
     * Returns `Err(())` if the output value is greater than the input value minus required fee,
     * if a descriptor was duplicated, or if an output descriptor `script_pubkey`
     * does not match the one we can spend.
     */
    spend_spendable_outputs(descriptors: SpendableOutputDescriptor[], outputs: TxOut[], change_destination_script: Uint8Array, feerate_sat_per_1000_weight: number, locktime: Option_u32Z): Result_TransactionNoneZ;
}
/**
 * A trait that describes a wallet capable of creating a spending [`Transaction`] from a set of
 * [`SpendableOutputDescriptor`]s.
 */
export declare class OutputSpender extends CommonBase {
    /** Creates a new instance of OutputSpender from a given implementation */
    static new_impl(arg: OutputSpenderInterface): OutputSpender;
    /**
     * Creates a [`Transaction`] which spends the given descriptors to the given outputs, plus an
     * output to the given change destination (if sufficient change value remains). The
     * transaction will have a feerate, at least, of the given value.
     *
     * The `locktime` argument is used to set the transaction's locktime. If `None`, the
     * transaction will have a locktime of 0. It it recommended to set this to the current block
     * height to avoid fee sniping, unless you have some specific reason to use a different
     * locktime.
     *
     * Returns `Err(())` if the output value is greater than the input value minus required fee,
     * if a descriptor was duplicated, or if an output descriptor `script_pubkey`
     * does not match the one we can spend.
     */
    spend_spendable_outputs(descriptors: SpendableOutputDescriptor[], outputs: TxOut[], change_destination_script: Uint8Array, feerate_sat_per_1000_weight: number, locktime: Option_u32Z): Result_TransactionNoneZ;
}
