import { TxOut } from '../structs/TxOut.mjs';
import { SpendableOutputDescriptor } from '../structs/SpendableOutputDescriptor.mjs';
import { Option_u32Z } from '../structs/Option_u32Z.mjs';
import { Result_TransactionNoneZ } from '../structs/Result_TransactionNoneZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
class LDKOutputSpenderHolder {
    constructor() {
        this.held = null;
    }
}
/**
 * A trait that describes a wallet capable of creating a spending [`Transaction`] from a set of
 * [`SpendableOutputDescriptor`]s.
 */
export class OutputSpender extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.OutputSpender_free);
        this.bindings_instance = null;
    }
    /** Creates a new instance of OutputSpender from a given implementation */
    static new_impl(arg) {
        const impl_holder = new LDKOutputSpenderHolder();
        let structImplementation = {
            spend_spendable_outputs(descriptors, outputs, change_destination_script, feerate_sat_per_1000_weight, locktime) {
                const descriptors_conv_27_len = bindings.getArrayLength(descriptors);
                const descriptors_conv_27_arr = new Array(descriptors_conv_27_len).fill(null);
                for (var b = 0; b < descriptors_conv_27_len; b++) {
                    const descriptors_conv_27 = bindings.getU64ArrayElem(descriptors, b);
                    const descriptors_conv_27_hu_conv = SpendableOutputDescriptor.constr_from_ptr(descriptors_conv_27);
                    CommonBase.add_ref_from(descriptors_conv_27_hu_conv, this);
                    descriptors_conv_27_arr[b] = descriptors_conv_27_hu_conv;
                }
                bindings.freeWasmMemory(descriptors);
                const outputs_conv_7_len = bindings.getArrayLength(outputs);
                const outputs_conv_7_arr = new Array(outputs_conv_7_len).fill(null);
                for (var h = 0; h < outputs_conv_7_len; h++) {
                    const outputs_conv_7 = bindings.getU64ArrayElem(outputs, h);
                    const outputs_conv_7_conv = new TxOut(null, outputs_conv_7);
                    outputs_conv_7_arr[h] = outputs_conv_7_conv;
                }
                bindings.freeWasmMemory(outputs);
                const change_destination_script_conv = bindings.decodeUint8Array(change_destination_script);
                const locktime_hu_conv = Option_u32Z.constr_from_ptr(locktime);
                CommonBase.add_ref_from(locktime_hu_conv, this);
                const ret = arg.spend_spendable_outputs(descriptors_conv_27_arr, outputs_conv_7_arr, change_destination_script_conv, feerate_sat_per_1000_weight, locktime_hu_conv);
                const result = ret.clone_ptr();
                return result;
            },
        };
        const ptr_idx = bindings.LDKOutputSpender_new(structImplementation);
        impl_holder.held = new OutputSpender(null, ptr_idx[0]);
        impl_holder.held.instance_idx = ptr_idx[1];
        impl_holder.held.bindings_instance = structImplementation;
        return impl_holder.held;
    }
    /**
     * Creates a [`Transaction`] which spends the given descriptors to the given outputs, plus an
     * output to the given change destination (if sufficient change value remains). The
     * transaction will have a feerate, at least, of the given value.
     *
     * The `locktime` argument is used to set the transaction's locktime. If `None`, the
     * transaction will have a locktime of 0. It it recommended to set this to the current block
     * height to avoid fee sniping, unless you have some specific reason to use a different
     * locktime.
     *
     * Returns `Err(())` if the output value is greater than the input value minus required fee,
     * if a descriptor was duplicated, or if an output descriptor `script_pubkey`
     * does not match the one we can spend.
     */
    spend_spendable_outputs(descriptors, outputs, change_destination_script, feerate_sat_per_1000_weight, locktime) {
        const ret = bindings.OutputSpender_spend_spendable_outputs(this.ptr, bindings.encodeUint64Array(descriptors.map(descriptors_conv_27 => CommonBase.get_ptr_of(descriptors_conv_27))), bindings.encodeUint64Array(outputs.map(outputs_conv_7 => CommonBase.get_ptr_of(outputs_conv_7))), bindings.encodeUint8Array(change_destination_script), feerate_sat_per_1000_weight, CommonBase.get_ptr_of(locktime));
        const ret_hu_conv = Result_TransactionNoneZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=OutputSpender.mjs.map