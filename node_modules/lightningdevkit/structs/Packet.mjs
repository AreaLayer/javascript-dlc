import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Packet of hop data for next peer
 */
export class Packet extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Packet_free);
    }
    /**
     * Bolt 04 version number
     */
    get_version() {
        const ret = bindings.Packet_get_version(this.ptr);
        return ret;
    }
    /**
     * Bolt 04 version number
     */
    set_version(val) {
        bindings.Packet_set_version(this.ptr, val);
    }
    /**
     * A random sepc256k1 point, used to build the ECDH shared secret to decrypt hop_data
     */
    get_public_key() {
        const ret = bindings.Packet_get_public_key(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * A random sepc256k1 point, used to build the ECDH shared secret to decrypt hop_data
     */
    set_public_key(val) {
        bindings.Packet_set_public_key(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Encrypted payload for the next hop
     *
     * Returns a copy of the field.
     */
    get_hop_data() {
        const ret = bindings.Packet_get_hop_data(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Encrypted payload for the next hop
     */
    set_hop_data(val) {
        bindings.Packet_set_hop_data(this.ptr, bindings.encodeUint8Array(val));
    }
    /**
     * HMAC to verify the integrity of hop_data
     */
    get_hmac() {
        const ret = bindings.Packet_get_hmac(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * HMAC to verify the integrity of hop_data
     */
    set_hmac(val) {
        bindings.Packet_set_hmac(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * Constructs a new Packet given each field
     */
    static constructor_new(version_arg, public_key_arg, hop_data_arg, hmac_arg) {
        const ret = bindings.Packet_new(version_arg, bindings.encodeUint8Array(bindings.check_arr_len(public_key_arg, 33)), bindings.encodeUint8Array(hop_data_arg), bindings.encodeUint8Array(bindings.check_arr_len(hmac_arg, 32)));
        const ret_hu_conv = new Packet(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.Packet_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Packet
     */
    clone() {
        const ret = bindings.Packet_clone(this.ptr);
        const ret_hu_conv = new Packet(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the Packet.
     */
    hash() {
        const ret = bindings.Packet_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two Packets contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.Packet_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the Packet object into a byte array which can be read by Packet_read
     */
    write() {
        const ret = bindings.Packet_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
}
//# sourceMappingURL=Packet.mjs.map