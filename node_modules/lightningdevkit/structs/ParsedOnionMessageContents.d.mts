import { OffersMessage } from '../structs/OffersMessage.mjs';
import { OnionMessageContents } from '../structs/OnionMessageContents.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * The contents of an [`OnionMessage`] as read from the wire.
 *
 * [`OnionMessage`]: crate::ln::msgs::OnionMessage
 */
export declare class ParsedOnionMessageContents extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ParsedOnionMessageContents
     */
    clone(): ParsedOnionMessageContents;
    /**
     * Utility method to constructs a new Offers-variant ParsedOnionMessageContents
     */
    static constructor_offers(a: OffersMessage): ParsedOnionMessageContents;
    /**
     * Utility method to constructs a new Custom-variant ParsedOnionMessageContents
     */
    static constructor_custom(a: OnionMessageContents): ParsedOnionMessageContents;
    /**
     * Constructs a new OnionMessageContents which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned OnionMessageContents must be freed before this_arg is
     */
    as_OnionMessageContents(): OnionMessageContents;
    /**
     * Serialize the ParsedOnionMessageContents object into a byte array which can be read by ParsedOnionMessageContents_read
     */
    write(): Uint8Array;
}
/** A ParsedOnionMessageContents of type Offers */
export declare class ParsedOnionMessageContents_Offers extends ParsedOnionMessageContents {
    offers: OffersMessage;
}
/** A ParsedOnionMessageContents of type Custom */
export declare class ParsedOnionMessageContents_Custom extends ParsedOnionMessageContents {
    custom: OnionMessageContents;
}
