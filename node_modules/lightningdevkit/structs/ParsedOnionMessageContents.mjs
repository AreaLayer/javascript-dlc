import { OffersMessage } from '../structs/OffersMessage.mjs';
import { OnionMessageContents } from '../structs/OnionMessageContents.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The contents of an [`OnionMessage`] as read from the wire.
 *
 * [`OnionMessage`]: crate::ln::msgs::OnionMessage
 */
export class ParsedOnionMessageContents extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.ParsedOnionMessageContents_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKParsedOnionMessageContents_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new ParsedOnionMessageContents_Offers(ptr);
            case 1: return new ParsedOnionMessageContents_Custom(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.ParsedOnionMessageContents_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ParsedOnionMessageContents
     */
    clone() {
        const ret = bindings.ParsedOnionMessageContents_clone(this.ptr);
        const ret_hu_conv = ParsedOnionMessageContents.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Offers-variant ParsedOnionMessageContents
     */
    static constructor_offers(a) {
        const ret = bindings.ParsedOnionMessageContents_offers(CommonBase.get_ptr_of(a));
        const ret_hu_conv = ParsedOnionMessageContents.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Custom-variant ParsedOnionMessageContents
     */
    static constructor_custom(a) {
        const ret = bindings.ParsedOnionMessageContents_custom(CommonBase.get_ptr_of(a));
        const ret_hu_conv = ParsedOnionMessageContents.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, a);
        return ret_hu_conv;
    }
    /**
     * Constructs a new OnionMessageContents which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned OnionMessageContents must be freed before this_arg is
     */
    as_OnionMessageContents() {
        const ret = bindings.ParsedOnionMessageContents_as_OnionMessageContents(this.ptr);
        const ret_hu_conv = new OnionMessageContents(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the ParsedOnionMessageContents object into a byte array which can be read by ParsedOnionMessageContents_read
     */
    write() {
        const ret = bindings.ParsedOnionMessageContents_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
}
/** A ParsedOnionMessageContents of type Offers */
export class ParsedOnionMessageContents_Offers extends ParsedOnionMessageContents {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const offers = bindings.LDKParsedOnionMessageContents_Offers_get_offers(ptr);
        const offers_hu_conv = OffersMessage.constr_from_ptr(offers);
        CommonBase.add_ref_from(offers_hu_conv, this);
        this.offers = offers_hu_conv;
    }
}
/** A ParsedOnionMessageContents of type Custom */
export class ParsedOnionMessageContents_Custom extends ParsedOnionMessageContents {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const custom = bindings.LDKParsedOnionMessageContents_Custom_get_custom(ptr);
        const ret_hu_conv = new OnionMessageContents(null, custom);
        CommonBase.add_ref_from(ret_hu_conv, this);
        this.custom = ret_hu_conv;
    }
}
//# sourceMappingURL=ParsedOnionMessageContents.mjs.map