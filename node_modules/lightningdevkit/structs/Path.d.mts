import { Option_u32Z } from '../structs/Option_u32Z.mjs';
import { RouteHop } from '../structs/RouteHop.mjs';
import { BlindedTail } from '../structs/BlindedTail.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A path in a [`Route`] to the payment recipient. Must always be at least length one.
 * If no [`Path::blinded_tail`] is present, then [`Path::hops`] length may be up to 19.
 */
export declare class Path extends CommonBase {
    /**
     * The list of unblinded hops in this [`Path`]. Must be at least length one.
     */
    get_hops(): RouteHop[];
    /**
     * The list of unblinded hops in this [`Path`]. Must be at least length one.
     */
    set_hops(val: RouteHop[]): void;
    /**
     * The blinded path at which this path terminates, if we're sending to one, and its metadata.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_blinded_tail(): BlindedTail;
    /**
     * The blinded path at which this path terminates, if we're sending to one, and its metadata.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_blinded_tail(val: BlindedTail | null): void;
    /**
     * Constructs a new Path given each field
     *
     * Note that blinded_tail_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(hops_arg: RouteHop[], blinded_tail_arg: BlindedTail | null): Path;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Path
     */
    clone(): Path;
    /**
     * Generates a non-cryptographic 64-bit hash of the Path.
     */
    hash(): bigint;
    /**
     * Checks if two Paths contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: Path): boolean;
    /**
     * Gets the fees for a given path, excluding any excess paid to the recipient.
     */
    fee_msat(): bigint;
    /**
     * Gets the total amount paid on this [`Path`], excluding the fees.
     */
    final_value_msat(): bigint;
    /**
     * Gets the final hop's CLTV expiry delta.
     */
    final_cltv_expiry_delta(): Option_u32Z;
}
