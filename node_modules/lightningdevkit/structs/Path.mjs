import { Option_u32Z } from '../structs/Option_u32Z.mjs';
import { RouteHop } from '../structs/RouteHop.mjs';
import { BlindedTail } from '../structs/BlindedTail.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A path in a [`Route`] to the payment recipient. Must always be at least length one.
 * If no [`Path::blinded_tail`] is present, then [`Path::hops`] length may be up to 19.
 */
export class Path extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Path_free);
    }
    /**
     * The list of unblinded hops in this [`Path`]. Must be at least length one.
     */
    get_hops() {
        const ret = bindings.Path_get_hops(this.ptr);
        const ret_conv_10_len = bindings.getArrayLength(ret);
        const ret_conv_10_arr = new Array(ret_conv_10_len).fill(null);
        for (var k = 0; k < ret_conv_10_len; k++) {
            const ret_conv_10 = bindings.getU64ArrayElem(ret, k);
            const ret_conv_10_hu_conv = new RouteHop(null, ret_conv_10);
            CommonBase.add_ref_from(ret_conv_10_hu_conv, this);
            ret_conv_10_arr[k] = ret_conv_10_hu_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_10_arr;
    }
    /**
     * The list of unblinded hops in this [`Path`]. Must be at least length one.
     */
    set_hops(val) {
        bindings.Path_set_hops(this.ptr, bindings.encodeUint64Array(val.map(val_conv_10 => CommonBase.get_ptr_of(val_conv_10))));
    }
    /**
     * The blinded path at which this path terminates, if we're sending to one, and its metadata.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_blinded_tail() {
        const ret = bindings.Path_get_blinded_tail(this.ptr);
        const ret_hu_conv = new BlindedTail(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The blinded path at which this path terminates, if we're sending to one, and its metadata.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_blinded_tail(val) {
        bindings.Path_set_blinded_tail(this.ptr, val == null ? 0n : CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new Path given each field
     *
     * Note that blinded_tail_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(hops_arg, blinded_tail_arg) {
        const ret = bindings.Path_new(bindings.encodeUint64Array(hops_arg.map(hops_arg_conv_10 => CommonBase.get_ptr_of(hops_arg_conv_10))), blinded_tail_arg == null ? 0n : CommonBase.get_ptr_of(blinded_tail_arg));
        const ret_hu_conv = new Path(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.Path_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Path
     */
    clone() {
        const ret = bindings.Path_clone(this.ptr);
        const ret_hu_conv = new Path(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the Path.
     */
    hash() {
        const ret = bindings.Path_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two Paths contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.Path_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Gets the fees for a given path, excluding any excess paid to the recipient.
     */
    fee_msat() {
        const ret = bindings.Path_fee_msat(this.ptr);
        return ret;
    }
    /**
     * Gets the total amount paid on this [`Path`], excluding the fees.
     */
    final_value_msat() {
        const ret = bindings.Path_final_value_msat(this.ptr);
        return ret;
    }
    /**
     * Gets the final hop's CLTV expiry delta.
     */
    final_cltv_expiry_delta() {
        const ret = bindings.Path_final_cltv_expiry_delta(this.ptr);
        const ret_hu_conv = Option_u32Z.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=Path.mjs.map