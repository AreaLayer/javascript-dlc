import { Result_PaymentConstraintsDecodeErrorZ } from '../structs/Result_PaymentConstraintsDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Constraints for relaying over a given [`BlindedHop`].
 *
 * [`BlindedHop`]: crate::blinded_path::BlindedHop
 */
export declare class PaymentConstraints extends CommonBase {
    /**
     * The maximum total CLTV that is acceptable when relaying a payment over this [`BlindedHop`].
     */
    get_max_cltv_expiry(): number;
    /**
     * The maximum total CLTV that is acceptable when relaying a payment over this [`BlindedHop`].
     */
    set_max_cltv_expiry(val: number): void;
    /**
     * The minimum value, in msat, that may be accepted by the node corresponding to this
     * [`BlindedHop`].
     */
    get_htlc_minimum_msat(): bigint;
    /**
     * The minimum value, in msat, that may be accepted by the node corresponding to this
     * [`BlindedHop`].
     */
    set_htlc_minimum_msat(val: bigint): void;
    /**
     * Constructs a new PaymentConstraints given each field
     */
    static constructor_new(max_cltv_expiry_arg: number, htlc_minimum_msat_arg: bigint): PaymentConstraints;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the PaymentConstraints
     */
    clone(): PaymentConstraints;
    /**
     * Serialize the PaymentConstraints object into a byte array which can be read by PaymentConstraints_read
     */
    write(): Uint8Array;
    /**
     * Read a PaymentConstraints from a byte array, created by PaymentConstraints_write
     */
    static constructor_read(ser: Uint8Array): Result_PaymentConstraintsDecodeErrorZ;
}
