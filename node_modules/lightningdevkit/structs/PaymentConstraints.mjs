import { Result_PaymentConstraintsDecodeErrorZ } from '../structs/Result_PaymentConstraintsDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Constraints for relaying over a given [`BlindedHop`].
 *
 * [`BlindedHop`]: crate::blinded_path::BlindedHop
 */
export class PaymentConstraints extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.PaymentConstraints_free);
    }
    /**
     * The maximum total CLTV that is acceptable when relaying a payment over this [`BlindedHop`].
     */
    get_max_cltv_expiry() {
        const ret = bindings.PaymentConstraints_get_max_cltv_expiry(this.ptr);
        return ret;
    }
    /**
     * The maximum total CLTV that is acceptable when relaying a payment over this [`BlindedHop`].
     */
    set_max_cltv_expiry(val) {
        bindings.PaymentConstraints_set_max_cltv_expiry(this.ptr, val);
    }
    /**
     * The minimum value, in msat, that may be accepted by the node corresponding to this
     * [`BlindedHop`].
     */
    get_htlc_minimum_msat() {
        const ret = bindings.PaymentConstraints_get_htlc_minimum_msat(this.ptr);
        return ret;
    }
    /**
     * The minimum value, in msat, that may be accepted by the node corresponding to this
     * [`BlindedHop`].
     */
    set_htlc_minimum_msat(val) {
        bindings.PaymentConstraints_set_htlc_minimum_msat(this.ptr, val);
    }
    /**
     * Constructs a new PaymentConstraints given each field
     */
    static constructor_new(max_cltv_expiry_arg, htlc_minimum_msat_arg) {
        const ret = bindings.PaymentConstraints_new(max_cltv_expiry_arg, htlc_minimum_msat_arg);
        const ret_hu_conv = new PaymentConstraints(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.PaymentConstraints_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the PaymentConstraints
     */
    clone() {
        const ret = bindings.PaymentConstraints_clone(this.ptr);
        const ret_hu_conv = new PaymentConstraints(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the PaymentConstraints object into a byte array which can be read by PaymentConstraints_read
     */
    write() {
        const ret = bindings.PaymentConstraints_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a PaymentConstraints from a byte array, created by PaymentConstraints_write
     */
    static constructor_read(ser) {
        const ret = bindings.PaymentConstraints_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_PaymentConstraintsDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=PaymentConstraints.mjs.map