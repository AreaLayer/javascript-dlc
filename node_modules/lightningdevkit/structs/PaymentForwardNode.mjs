import { ForwardTlvs } from '../structs/ForwardTlvs.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An intermediate node, its outbound channel, and relay parameters.
 */
export class PaymentForwardNode extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.PaymentForwardNode_free);
    }
    /**
     * The TLVs for this node's [`BlindedHop`], where the fee parameters contained within are also
     * used for [`BlindedPayInfo`] construction.
     */
    get_tlvs() {
        const ret = bindings.PaymentForwardNode_get_tlvs(this.ptr);
        const ret_hu_conv = new ForwardTlvs(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The TLVs for this node's [`BlindedHop`], where the fee parameters contained within are also
     * used for [`BlindedPayInfo`] construction.
     */
    set_tlvs(val) {
        bindings.PaymentForwardNode_set_tlvs(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * This node's pubkey.
     */
    get_node_id() {
        const ret = bindings.PaymentForwardNode_get_node_id(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * This node's pubkey.
     */
    set_node_id(val) {
        bindings.PaymentForwardNode_set_node_id(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * The maximum value, in msat, that may be accepted by this node.
     */
    get_htlc_maximum_msat() {
        const ret = bindings.PaymentForwardNode_get_htlc_maximum_msat(this.ptr);
        return ret;
    }
    /**
     * The maximum value, in msat, that may be accepted by this node.
     */
    set_htlc_maximum_msat(val) {
        bindings.PaymentForwardNode_set_htlc_maximum_msat(this.ptr, val);
    }
    /**
     * Constructs a new PaymentForwardNode given each field
     */
    static constructor_new(tlvs_arg, node_id_arg, htlc_maximum_msat_arg) {
        const ret = bindings.PaymentForwardNode_new(CommonBase.get_ptr_of(tlvs_arg), bindings.encodeUint8Array(bindings.check_arr_len(node_id_arg, 33)), htlc_maximum_msat_arg);
        const ret_hu_conv = new PaymentForwardNode(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.PaymentForwardNode_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the PaymentForwardNode
     */
    clone() {
        const ret = bindings.PaymentForwardNode_clone(this.ptr);
        const ret_hu_conv = new PaymentForwardNode(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=PaymentForwardNode.mjs.map