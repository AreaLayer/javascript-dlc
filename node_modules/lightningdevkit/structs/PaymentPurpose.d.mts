import { Option_ThirtyTwoBytesZ } from '../structs/Option_ThirtyTwoBytesZ.mjs';
import { Bolt12OfferContext } from '../structs/Bolt12OfferContext.mjs';
import { Bolt12RefundContext } from '../structs/Bolt12RefundContext.mjs';
import { Result_PaymentPurposeDecodeErrorZ } from '../structs/Result_PaymentPurposeDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Some information provided on receipt of payment depends on whether the payment received is a
 * spontaneous payment or a \"conventional\" lightning payment that's paying an invoice.
 */
export declare class PaymentPurpose extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the PaymentPurpose
     */
    clone(): PaymentPurpose;
    /**
     * Utility method to constructs a new Bolt11InvoicePayment-variant PaymentPurpose
     */
    static constructor_bolt11_invoice_payment(payment_preimage: Option_ThirtyTwoBytesZ, payment_secret: Uint8Array): PaymentPurpose;
    /**
     * Utility method to constructs a new Bolt12OfferPayment-variant PaymentPurpose
     */
    static constructor_bolt12_offer_payment(payment_preimage: Option_ThirtyTwoBytesZ, payment_secret: Uint8Array, payment_context: Bolt12OfferContext): PaymentPurpose;
    /**
     * Utility method to constructs a new Bolt12RefundPayment-variant PaymentPurpose
     */
    static constructor_bolt12_refund_payment(payment_preimage: Option_ThirtyTwoBytesZ, payment_secret: Uint8Array, payment_context: Bolt12RefundContext): PaymentPurpose;
    /**
     * Utility method to constructs a new SpontaneousPayment-variant PaymentPurpose
     */
    static constructor_spontaneous_payment(a: Uint8Array): PaymentPurpose;
    /**
     * Checks if two PaymentPurposes contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: PaymentPurpose): boolean;
    /**
     * Returns the preimage for this payment, if it is known.
     */
    preimage(): Option_ThirtyTwoBytesZ;
    /**
     * Serialize the PaymentPurpose object into a byte array which can be read by PaymentPurpose_read
     */
    write(): Uint8Array;
    /**
     * Read a PaymentPurpose from a byte array, created by PaymentPurpose_write
     */
    static constructor_read(ser: Uint8Array): Result_PaymentPurposeDecodeErrorZ;
}
/** A PaymentPurpose of type Bolt11InvoicePayment */
export declare class PaymentPurpose_Bolt11InvoicePayment extends PaymentPurpose {
    /**
     * The preimage to the payment_hash, if the payment hash (and secret) were fetched via
     * [`ChannelManager::create_inbound_payment`]. When handling [`Event::PaymentClaimable`],
     * this can be passed directly to [`ChannelManager::claim_funds`] to claim the payment. No
     * action is needed when seen in [`Event::PaymentClaimed`].
     *
     * [`ChannelManager::create_inbound_payment`]: crate::ln::channelmanager::ChannelManager::create_inbound_payment
     * [`ChannelManager::claim_funds`]: crate::ln::channelmanager::ChannelManager::claim_funds
     */
    payment_preimage: Option_ThirtyTwoBytesZ;
    /**
     * The \"payment secret\". This authenticates the sender to the recipient, preventing a
     * number of deanonymization attacks during the routing process.
     * It is provided here for your reference, however its accuracy is enforced directly by
     * [`ChannelManager`] using the values you previously provided to
     * [`ChannelManager::create_inbound_payment`] or
     * [`ChannelManager::create_inbound_payment_for_hash`].
     *
     * [`ChannelManager`]: crate::ln::channelmanager::ChannelManager
     * [`ChannelManager::create_inbound_payment`]: crate::ln::channelmanager::ChannelManager::create_inbound_payment
     * [`ChannelManager::create_inbound_payment_for_hash`]: crate::ln::channelmanager::ChannelManager::create_inbound_payment_for_hash
     */
    payment_secret: Uint8Array;
}
/** A PaymentPurpose of type Bolt12OfferPayment */
export declare class PaymentPurpose_Bolt12OfferPayment extends PaymentPurpose {
    /**
     * The preimage to the payment hash. When handling [`Event::PaymentClaimable`], this can be
     * passed directly to [`ChannelManager::claim_funds`], if provided. No action is needed
     * when seen in [`Event::PaymentClaimed`].
     *
     * [`ChannelManager::claim_funds`]: crate::ln::channelmanager::ChannelManager::claim_funds
     */
    payment_preimage: Option_ThirtyTwoBytesZ;
    /**
     * The secret used to authenticate the sender to the recipient, preventing a number of
     * de-anonymization attacks while routing a payment.
     *
     * See [`PaymentPurpose::Bolt11InvoicePayment::payment_secret`] for further details.
     */
    payment_secret: Uint8Array;
    /**
     * The context of the payment such as information about the corresponding [`Offer`] and
     * [`InvoiceRequest`].
     *
     * [`Offer`]: crate::offers::offer::Offer
     * [`InvoiceRequest`]: crate::offers::invoice_request::InvoiceRequest
     */
    payment_context: Bolt12OfferContext;
}
/** A PaymentPurpose of type Bolt12RefundPayment */
export declare class PaymentPurpose_Bolt12RefundPayment extends PaymentPurpose {
    /**
     * The preimage to the payment hash. When handling [`Event::PaymentClaimable`], this can be
     * passed directly to [`ChannelManager::claim_funds`], if provided. No action is needed
     * when seen in [`Event::PaymentClaimed`].
     *
     * [`ChannelManager::claim_funds`]: crate::ln::channelmanager::ChannelManager::claim_funds
     */
    payment_preimage: Option_ThirtyTwoBytesZ;
    /**
     * The secret used to authenticate the sender to the recipient, preventing a number of
     * de-anonymization attacks while routing a payment.
     *
     * See [`PaymentPurpose::Bolt11InvoicePayment::payment_secret`] for further details.
     */
    payment_secret: Uint8Array;
    /**
     * The context of the payment such as information about the corresponding [`Refund`].
     *
     * [`Refund`]: crate::offers::refund::Refund
     */
    payment_context: Bolt12RefundContext;
}
/** A PaymentPurpose of type SpontaneousPayment */
export declare class PaymentPurpose_SpontaneousPayment extends PaymentPurpose {
    spontaneous_payment: Uint8Array;
}
