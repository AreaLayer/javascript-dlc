import { Result_PaymentRelayDecodeErrorZ } from '../structs/Result_PaymentRelayDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Parameters for relaying over a given [`BlindedHop`].
 *
 * [`BlindedHop`]: crate::blinded_path::BlindedHop
 */
export declare class PaymentRelay extends CommonBase {
    /**
     * Number of blocks subtracted from an incoming HTLC's `cltv_expiry` for this [`BlindedHop`].
     */
    get_cltv_expiry_delta(): number;
    /**
     * Number of blocks subtracted from an incoming HTLC's `cltv_expiry` for this [`BlindedHop`].
     */
    set_cltv_expiry_delta(val: number): void;
    /**
     * Liquidity fee charged (in millionths of the amount transferred) for relaying a payment over
     * this [`BlindedHop`], (i.e., 10,000 is 1%).
     */
    get_fee_proportional_millionths(): number;
    /**
     * Liquidity fee charged (in millionths of the amount transferred) for relaying a payment over
     * this [`BlindedHop`], (i.e., 10,000 is 1%).
     */
    set_fee_proportional_millionths(val: number): void;
    /**
     * Base fee charged (in millisatoshi) for relaying a payment over this [`BlindedHop`].
     */
    get_fee_base_msat(): number;
    /**
     * Base fee charged (in millisatoshi) for relaying a payment over this [`BlindedHop`].
     */
    set_fee_base_msat(val: number): void;
    /**
     * Constructs a new PaymentRelay given each field
     */
    static constructor_new(cltv_expiry_delta_arg: number, fee_proportional_millionths_arg: number, fee_base_msat_arg: number): PaymentRelay;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the PaymentRelay
     */
    clone(): PaymentRelay;
    /**
     * Serialize the PaymentRelay object into a byte array which can be read by PaymentRelay_read
     */
    write(): Uint8Array;
    /**
     * Read a PaymentRelay from a byte array, created by PaymentRelay_write
     */
    static constructor_read(ser: Uint8Array): Result_PaymentRelayDecodeErrorZ;
}
