import { Result_PaymentRelayDecodeErrorZ } from '../structs/Result_PaymentRelayDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Parameters for relaying over a given [`BlindedHop`].
 *
 * [`BlindedHop`]: crate::blinded_path::BlindedHop
 */
export class PaymentRelay extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.PaymentRelay_free);
    }
    /**
     * Number of blocks subtracted from an incoming HTLC's `cltv_expiry` for this [`BlindedHop`].
     */
    get_cltv_expiry_delta() {
        const ret = bindings.PaymentRelay_get_cltv_expiry_delta(this.ptr);
        return ret;
    }
    /**
     * Number of blocks subtracted from an incoming HTLC's `cltv_expiry` for this [`BlindedHop`].
     */
    set_cltv_expiry_delta(val) {
        bindings.PaymentRelay_set_cltv_expiry_delta(this.ptr, val);
    }
    /**
     * Liquidity fee charged (in millionths of the amount transferred) for relaying a payment over
     * this [`BlindedHop`], (i.e., 10,000 is 1%).
     */
    get_fee_proportional_millionths() {
        const ret = bindings.PaymentRelay_get_fee_proportional_millionths(this.ptr);
        return ret;
    }
    /**
     * Liquidity fee charged (in millionths of the amount transferred) for relaying a payment over
     * this [`BlindedHop`], (i.e., 10,000 is 1%).
     */
    set_fee_proportional_millionths(val) {
        bindings.PaymentRelay_set_fee_proportional_millionths(this.ptr, val);
    }
    /**
     * Base fee charged (in millisatoshi) for relaying a payment over this [`BlindedHop`].
     */
    get_fee_base_msat() {
        const ret = bindings.PaymentRelay_get_fee_base_msat(this.ptr);
        return ret;
    }
    /**
     * Base fee charged (in millisatoshi) for relaying a payment over this [`BlindedHop`].
     */
    set_fee_base_msat(val) {
        bindings.PaymentRelay_set_fee_base_msat(this.ptr, val);
    }
    /**
     * Constructs a new PaymentRelay given each field
     */
    static constructor_new(cltv_expiry_delta_arg, fee_proportional_millionths_arg, fee_base_msat_arg) {
        const ret = bindings.PaymentRelay_new(cltv_expiry_delta_arg, fee_proportional_millionths_arg, fee_base_msat_arg);
        const ret_hu_conv = new PaymentRelay(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.PaymentRelay_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the PaymentRelay
     */
    clone() {
        const ret = bindings.PaymentRelay_clone(this.ptr);
        const ret_hu_conv = new PaymentRelay(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the PaymentRelay object into a byte array which can be read by PaymentRelay_read
     */
    write() {
        const ret = bindings.PaymentRelay_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a PaymentRelay from a byte array, created by PaymentRelay_write
     */
    static constructor_read(ser) {
        const ret = bindings.PaymentRelay_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_PaymentRelayDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=PaymentRelay.mjs.map