import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { OnionMessage } from '../structs/OnionMessage.mjs';
import { Option_MessageContextZ } from '../structs/Option_MessageContextZ.mjs';
import { NextMessageHop } from '../structs/NextMessageHop.mjs';
import { ParsedOnionMessageContents } from '../structs/ParsedOnionMessageContents.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A processed incoming onion message, containing either a Forward (another onion message)
 * or a Receive payload with decrypted contents.
 */
export declare class PeeledOnion extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the PeeledOnion
     */
    clone(): PeeledOnion;
    /**
     * Utility method to constructs a new Forward-variant PeeledOnion
     */
    static constructor_forward(a: NextMessageHop, b: OnionMessage): PeeledOnion;
    /**
     * Utility method to constructs a new Receive-variant PeeledOnion
     */
    static constructor_receive(a: ParsedOnionMessageContents, b: Option_MessageContextZ, c: BlindedMessagePath): PeeledOnion;
}
/** A PeeledOnion of type Forward */
export declare class PeeledOnion_Forward extends PeeledOnion {
    _0: NextMessageHop;
    _1: OnionMessage;
}
/** A PeeledOnion of type Receive */
export declare class PeeledOnion_Receive extends PeeledOnion {
    _0: ParsedOnionMessageContents;
    _1: Option_MessageContextZ;
    /**
     * Note that this (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    _2: BlindedMessagePath;
}
