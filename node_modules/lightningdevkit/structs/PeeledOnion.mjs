import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { OnionMessage } from '../structs/OnionMessage.mjs';
import { Option_MessageContextZ } from '../structs/Option_MessageContextZ.mjs';
import { NextMessageHop } from '../structs/NextMessageHop.mjs';
import { ParsedOnionMessageContents } from '../structs/ParsedOnionMessageContents.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A processed incoming onion message, containing either a Forward (another onion message)
 * or a Receive payload with decrypted contents.
 */
export class PeeledOnion extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.PeeledOnion_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKPeeledOnion_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new PeeledOnion_Forward(ptr);
            case 1: return new PeeledOnion_Receive(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.PeeledOnion_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the PeeledOnion
     */
    clone() {
        const ret = bindings.PeeledOnion_clone(this.ptr);
        const ret_hu_conv = PeeledOnion.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Forward-variant PeeledOnion
     */
    static constructor_forward(a, b) {
        const ret = bindings.PeeledOnion_forward(CommonBase.get_ptr_of(a), CommonBase.get_ptr_of(b));
        const ret_hu_conv = PeeledOnion.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Receive-variant PeeledOnion
     */
    static constructor_receive(a, b, c) {
        const ret = bindings.PeeledOnion_receive(CommonBase.get_ptr_of(a), CommonBase.get_ptr_of(b), CommonBase.get_ptr_of(c));
        const ret_hu_conv = PeeledOnion.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, a);
        return ret_hu_conv;
    }
}
/** A PeeledOnion of type Forward */
export class PeeledOnion_Forward extends PeeledOnion {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const _0 = bindings.LDKPeeledOnion_Forward_get__0(ptr);
        const _0_hu_conv = NextMessageHop.constr_from_ptr(_0);
        CommonBase.add_ref_from(_0_hu_conv, this);
        this._0 = _0_hu_conv;
        const _1 = bindings.LDKPeeledOnion_Forward_get__1(ptr);
        const _1_hu_conv = new OnionMessage(null, _1);
        CommonBase.add_ref_from(_1_hu_conv, this);
        this._1 = _1_hu_conv;
    }
}
/** A PeeledOnion of type Receive */
export class PeeledOnion_Receive extends PeeledOnion {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const _0 = bindings.LDKPeeledOnion_Receive_get__0(ptr);
        const _0_hu_conv = ParsedOnionMessageContents.constr_from_ptr(_0);
        CommonBase.add_ref_from(_0_hu_conv, this);
        this._0 = _0_hu_conv;
        const _1 = bindings.LDKPeeledOnion_Receive_get__1(ptr);
        const _1_hu_conv = Option_MessageContextZ.constr_from_ptr(_1);
        CommonBase.add_ref_from(_1_hu_conv, this);
        this._1 = _1_hu_conv;
        const _2 = bindings.LDKPeeledOnion_Receive_get__2(ptr);
        const _2_hu_conv = new BlindedMessagePath(null, _2);
        CommonBase.add_ref_from(_2_hu_conv, this);
        this._2 = _2_hu_conv;
    }
}
//# sourceMappingURL=PeeledOnion.mjs.map