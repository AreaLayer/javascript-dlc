import { InitFeatures } from '../structs/InitFeatures.mjs';
import { Option_SocketAddressZ } from '../structs/Option_SocketAddressZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Details of a connected peer as returned by [`PeerManager::list_peers`].
 */
export declare class PeerDetails extends CommonBase {
    /**
     * The node id of the peer.
     *
     * For outbound connections, this [`PublicKey`] will be the same as the `their_node_id` parameter
     * passed in to [`PeerManager::new_outbound_connection`].
     */
    get_counterparty_node_id(): Uint8Array;
    /**
     * The node id of the peer.
     *
     * For outbound connections, this [`PublicKey`] will be the same as the `their_node_id` parameter
     * passed in to [`PeerManager::new_outbound_connection`].
     */
    set_counterparty_node_id(val: Uint8Array): void;
    /**
     * The socket address the peer provided in the initial handshake.
     *
     * Will only be `Some` if an address had been previously provided to
     * [`PeerManager::new_outbound_connection`] or [`PeerManager::new_inbound_connection`].
     *
     * Returns a copy of the field.
     */
    get_socket_address(): Option_SocketAddressZ;
    /**
     * The socket address the peer provided in the initial handshake.
     *
     * Will only be `Some` if an address had been previously provided to
     * [`PeerManager::new_outbound_connection`] or [`PeerManager::new_inbound_connection`].
     */
    set_socket_address(val: Option_SocketAddressZ): void;
    /**
     * The features the peer provided in the initial handshake.
     */
    get_init_features(): InitFeatures;
    /**
     * The features the peer provided in the initial handshake.
     */
    set_init_features(val: InitFeatures): void;
    /**
     * Indicates the direction of the peer connection.
     *
     * Will be `true` for inbound connections, and `false` for outbound connections.
     */
    get_is_inbound_connection(): boolean;
    /**
     * Indicates the direction of the peer connection.
     *
     * Will be `true` for inbound connections, and `false` for outbound connections.
     */
    set_is_inbound_connection(val: boolean): void;
    /**
     * Constructs a new PeerDetails given each field
     */
    static constructor_new(counterparty_node_id_arg: Uint8Array, socket_address_arg: Option_SocketAddressZ, init_features_arg: InitFeatures, is_inbound_connection_arg: boolean): PeerDetails;
}
