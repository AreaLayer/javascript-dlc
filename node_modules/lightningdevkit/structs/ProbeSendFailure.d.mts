import { PaymentSendFailure } from '../structs/PaymentSendFailure.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Indicates that we failed to send a payment probe. Further errors may be surfaced later via
 * [`Event::ProbeFailed`].
 *
 * [`Event::ProbeFailed`]: crate::events::Event::ProbeFailed
 */
export declare class ProbeSendFailure extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the ProbeSendFailure
     */
    clone(): ProbeSendFailure;
    /**
     * Utility method to constructs a new RouteNotFound-variant ProbeSendFailure
     */
    static constructor_route_not_found(): ProbeSendFailure;
    /**
     * Utility method to constructs a new SendingFailed-variant ProbeSendFailure
     */
    static constructor_sending_failed(a: PaymentSendFailure): ProbeSendFailure;
    /**
     * Checks if two ProbeSendFailures contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: ProbeSendFailure): boolean;
}
/** A ProbeSendFailure of type RouteNotFound */
export declare class ProbeSendFailure_RouteNotFound extends ProbeSendFailure {
}
/** A ProbeSendFailure of type SendingFailed */
export declare class ProbeSendFailure_SendingFailed extends ProbeSendFailure {
    sending_failed: PaymentSendFailure;
}
