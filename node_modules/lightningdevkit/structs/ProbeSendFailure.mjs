import { PaymentSendFailure } from '../structs/PaymentSendFailure.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Indicates that we failed to send a payment probe. Further errors may be surfaced later via
 * [`Event::ProbeFailed`].
 *
 * [`Event::ProbeFailed`]: crate::events::Event::ProbeFailed
 */
export class ProbeSendFailure extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.ProbeSendFailure_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKProbeSendFailure_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new ProbeSendFailure_RouteNotFound(ptr);
            case 1: return new ProbeSendFailure_SendingFailed(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.ProbeSendFailure_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ProbeSendFailure
     */
    clone() {
        const ret = bindings.ProbeSendFailure_clone(this.ptr);
        const ret_hu_conv = ProbeSendFailure.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new RouteNotFound-variant ProbeSendFailure
     */
    static constructor_route_not_found() {
        const ret = bindings.ProbeSendFailure_route_not_found();
        const ret_hu_conv = ProbeSendFailure.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new SendingFailed-variant ProbeSendFailure
     */
    static constructor_sending_failed(a) {
        const ret = bindings.ProbeSendFailure_sending_failed(CommonBase.get_ptr_of(a));
        const ret_hu_conv = ProbeSendFailure.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two ProbeSendFailures contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b) {
        const ret = bindings.ProbeSendFailure_eq(this.ptr, CommonBase.get_ptr_of(b));
        return ret;
    }
}
/** A ProbeSendFailure of type RouteNotFound */
export class ProbeSendFailure_RouteNotFound extends ProbeSendFailure {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A ProbeSendFailure of type SendingFailed */
export class ProbeSendFailure_SendingFailed extends ProbeSendFailure {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const sending_failed = bindings.LDKProbeSendFailure_SendingFailed_get_sending_failed(ptr);
        const sending_failed_hu_conv = PaymentSendFailure.constr_from_ptr(sending_failed);
        CommonBase.add_ref_from(sending_failed_hu_conv, this);
        this.sending_failed = sending_failed_hu_conv;
    }
}
//# sourceMappingURL=ProbeSendFailure.mjs.map