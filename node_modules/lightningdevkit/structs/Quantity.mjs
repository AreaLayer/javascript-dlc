import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Quantity of items supported by an [`Offer`].
 */
export class Quantity extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.Quantity_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKQuantity_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new Quantity_Bounded(ptr);
            case 1: return new Quantity_Unbounded(ptr);
            case 2: return new Quantity_One(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.Quantity_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Quantity
     */
    clone() {
        const ret = bindings.Quantity_clone(this.ptr);
        const ret_hu_conv = Quantity.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Bounded-variant Quantity
     */
    static constructor_bounded(a) {
        const ret = bindings.Quantity_bounded(a);
        const ret_hu_conv = Quantity.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Unbounded-variant Quantity
     */
    static constructor_unbounded() {
        const ret = bindings.Quantity_unbounded();
        const ret_hu_conv = Quantity.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new One-variant Quantity
     */
    static constructor_one() {
        const ret = bindings.Quantity_one();
        const ret_hu_conv = Quantity.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
}
/** A Quantity of type Bounded */
export class Quantity_Bounded extends Quantity {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        this.bounded = bindings.LDKQuantity_Bounded_get_bounded(ptr);
    }
}
/** A Quantity of type Unbounded */
export class Quantity_Unbounded extends Quantity {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A Quantity of type One */
export class Quantity_One extends Quantity {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
//# sourceMappingURL=Quantity.mjs.map