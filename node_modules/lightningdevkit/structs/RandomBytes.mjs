import { EntropySource } from '../structs/EntropySource.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An implementation of [`EntropySource`] using ChaCha20.
 */
export class RandomBytes extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.RandomBytes_free);
    }
    /**
     * Creates a new instance using the given seed.
     */
    static constructor_new(seed) {
        const ret = bindings.RandomBytes_new(bindings.encodeUint8Array(bindings.check_arr_len(seed, 32)));
        const ret_hu_conv = new RandomBytes(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Constructs a new EntropySource which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned EntropySource must be freed before this_arg is
     */
    as_EntropySource() {
        const ret = bindings.RandomBytes_as_EntropySource(this.ptr);
        const ret_hu_conv = new EntropySource(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=RandomBytes.mjs.map