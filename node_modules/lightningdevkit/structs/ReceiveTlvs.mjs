import { PaymentContext } from '../structs/PaymentContext.mjs';
import { PaymentConstraints } from '../structs/PaymentConstraints.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Data to construct a [`BlindedHop`] for receiving a payment. This payload is custom to LDK and
 * may not be valid if received by another lightning implementation.
 */
export class ReceiveTlvs extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.ReceiveTlvs_free);
    }
    /**
     * Used to authenticate the sender of a payment to the receiver and tie MPP HTLCs together.
     */
    get_payment_secret() {
        const ret = bindings.ReceiveTlvs_get_payment_secret(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Used to authenticate the sender of a payment to the receiver and tie MPP HTLCs together.
     */
    set_payment_secret(val) {
        bindings.ReceiveTlvs_set_payment_secret(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * Constraints for the receiver of this payment.
     */
    get_payment_constraints() {
        const ret = bindings.ReceiveTlvs_get_payment_constraints(this.ptr);
        const ret_hu_conv = new PaymentConstraints(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Constraints for the receiver of this payment.
     */
    set_payment_constraints(val) {
        bindings.ReceiveTlvs_set_payment_constraints(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Context for the receiver of this payment.
     */
    get_payment_context() {
        const ret = bindings.ReceiveTlvs_get_payment_context(this.ptr);
        const ret_hu_conv = PaymentContext.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Context for the receiver of this payment.
     */
    set_payment_context(val) {
        bindings.ReceiveTlvs_set_payment_context(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new ReceiveTlvs given each field
     */
    static constructor_new(payment_secret_arg, payment_constraints_arg, payment_context_arg) {
        const ret = bindings.ReceiveTlvs_new(bindings.encodeUint8Array(bindings.check_arr_len(payment_secret_arg, 32)), CommonBase.get_ptr_of(payment_constraints_arg), CommonBase.get_ptr_of(payment_context_arg));
        const ret_hu_conv = new ReceiveTlvs(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.ReceiveTlvs_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ReceiveTlvs
     */
    clone() {
        const ret = bindings.ReceiveTlvs_clone(this.ptr);
        const ret_hu_conv = new ReceiveTlvs(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the ReceiveTlvs object into a byte array which can be read by ReceiveTlvs_read
     */
    write() {
        const ret = bindings.ReceiveTlvs_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
}
//# sourceMappingURL=ReceiveTlvs.mjs.map