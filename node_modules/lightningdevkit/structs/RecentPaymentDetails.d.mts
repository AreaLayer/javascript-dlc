import { Option_ThirtyTwoBytesZ } from '../structs/Option_ThirtyTwoBytesZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Used by [`ChannelManager::list_recent_payments`] to express the status of recent payments.
 * These include payments that have yet to find a successful path, or have unresolved HTLCs.
 */
export declare class RecentPaymentDetails extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the RecentPaymentDetails
     */
    clone(): RecentPaymentDetails;
    /**
     * Utility method to constructs a new AwaitingInvoice-variant RecentPaymentDetails
     */
    static constructor_awaiting_invoice(payment_id: Uint8Array): RecentPaymentDetails;
    /**
     * Utility method to constructs a new Pending-variant RecentPaymentDetails
     */
    static constructor_pending(payment_id: Uint8Array, payment_hash: Uint8Array, total_msat: bigint): RecentPaymentDetails;
    /**
     * Utility method to constructs a new Fulfilled-variant RecentPaymentDetails
     */
    static constructor_fulfilled(payment_id: Uint8Array, payment_hash: Option_ThirtyTwoBytesZ): RecentPaymentDetails;
    /**
     * Utility method to constructs a new Abandoned-variant RecentPaymentDetails
     */
    static constructor_abandoned(payment_id: Uint8Array, payment_hash: Uint8Array): RecentPaymentDetails;
}
/** A RecentPaymentDetails of type AwaitingInvoice */
export declare class RecentPaymentDetails_AwaitingInvoice extends RecentPaymentDetails {
    /**
     * A user-provided identifier in [`ChannelManager::send_payment`] used to uniquely identify
     * a payment and ensure idempotency in LDK.
     */
    payment_id: Uint8Array;
}
/** A RecentPaymentDetails of type Pending */
export declare class RecentPaymentDetails_Pending extends RecentPaymentDetails {
    /**
     * A user-provided identifier in [`ChannelManager::send_payment`] used to uniquely identify
     * a payment and ensure idempotency in LDK.
     */
    payment_id: Uint8Array;
    /**
     * Hash of the payment that is currently being sent but has yet to be fulfilled or
     * abandoned.
     */
    payment_hash: Uint8Array;
    /**
     * Total amount (in msat, excluding fees) across all paths for this payment,
     * not just the amount currently inflight.
     */
    total_msat: bigint;
}
/** A RecentPaymentDetails of type Fulfilled */
export declare class RecentPaymentDetails_Fulfilled extends RecentPaymentDetails {
    /**
     * A user-provided identifier in [`ChannelManager::send_payment`] used to uniquely identify
     * a payment and ensure idempotency in LDK.
     */
    payment_id: Uint8Array;
    /**
     * Hash of the payment that was claimed. `None` for serializations of [`ChannelManager`]
     * made before LDK version 0.0.104.
     */
    payment_hash: Option_ThirtyTwoBytesZ;
}
/** A RecentPaymentDetails of type Abandoned */
export declare class RecentPaymentDetails_Abandoned extends RecentPaymentDetails {
    /**
     * A user-provided identifier in [`ChannelManager::send_payment`] used to uniquely identify
     * a payment and ensure idempotency in LDK.
     */
    payment_id: Uint8Array;
    /**
     * Hash of the payment that we have given up trying to send.
     */
    payment_hash: Uint8Array;
}
