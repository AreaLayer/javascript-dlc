import { Level } from '../enums/Level.mjs';
import { Option_ThirtyTwoBytesZ } from '../structs/Option_ThirtyTwoBytesZ.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A Record, unit of logging output with Metadata to enable filtering
 * Module_path, file, line to inform on log's source
 */
export declare class Record extends CommonBase {
    /**
     * The verbosity level of the message.
     */
    get_level(): Level;
    /**
     * The verbosity level of the message.
     */
    set_level(val: Level): void;
    /**
     * The node id of the peer pertaining to the logged record.
     *
     * Note that in some cases a [`Self::channel_id`] may be filled in but this may still be
     * `None`, depending on if the peer information is readily available in LDK when the log is
     * generated.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_peer_id(): Uint8Array;
    /**
     * The node id of the peer pertaining to the logged record.
     *
     * Note that in some cases a [`Self::channel_id`] may be filled in but this may still be
     * `None`, depending on if the peer information is readily available in LDK when the log is
     * generated.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_peer_id(val: Uint8Array | null): void;
    /**
     * The channel id of the channel pertaining to the logged record. May be a temporary id before
     * the channel has been funded.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_channel_id(): ChannelId;
    /**
     * The channel id of the channel pertaining to the logged record. May be a temporary id before
     * the channel has been funded.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_channel_id(val: ChannelId | null): void;
    /**
     * The message body.
     */
    get_args(): string;
    /**
     * The message body.
     */
    set_args(val: string): void;
    /**
     * The module path of the message.
     */
    get_module_path(): string;
    /**
     * The module path of the message.
     */
    set_module_path(val: string): void;
    /**
     * The source file containing the message.
     */
    get_file(): string;
    /**
     * The source file containing the message.
     */
    set_file(val: string): void;
    /**
     * The line containing the message.
     */
    get_line(): number;
    /**
     * The line containing the message.
     */
    set_line(val: number): void;
    /**
     * The payment hash.
     *
     * Note that this is only filled in for logs pertaining to a specific payment, and will be
     * `None` for logs which are not directly related to a payment.
     */
    get_payment_hash(): Option_ThirtyTwoBytesZ;
    /**
     * The payment hash.
     *
     * Note that this is only filled in for logs pertaining to a specific payment, and will be
     * `None` for logs which are not directly related to a payment.
     */
    set_payment_hash(val: Option_ThirtyTwoBytesZ): void;
    /**
     * Constructs a new Record given each field
     *
     * Note that peer_id_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     * Note that channel_id_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(level_arg: Level, peer_id_arg: Uint8Array | null, channel_id_arg: ChannelId | null, args_arg: string, module_path_arg: string, file_arg: string, line_arg: number, payment_hash_arg: Option_ThirtyTwoBytesZ): Record;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Record
     */
    clone(): Record;
}
