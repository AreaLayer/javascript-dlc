import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { BlindedMessagePath } from '../structs/BlindedMessagePath.mjs';
import { Result_RefundDecodeErrorZ } from '../structs/Result_RefundDecodeErrorZ.mjs';
import { Result_RefundBolt12ParseErrorZ } from '../structs/Result_RefundBolt12ParseErrorZ.mjs';
import { PrintableString } from '../structs/PrintableString.mjs';
import { InvoiceRequestFeatures } from '../structs/InvoiceRequestFeatures.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A `Refund` is a request to send an [`Bolt12Invoice`] without a preceding [`Offer`].
 *
 * Typically, after an invoice is paid, the recipient may publish a refund allowing the sender to
 * recoup their funds. A refund may be used more generally as an \"offer for money\", such as with a
 * bitcoin ATM.
 *
 * [`Bolt12Invoice`]: crate::offers::invoice::Bolt12Invoice
 * [`Offer`]: crate::offers::offer::Offer
 */
export declare class Refund extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Refund
     */
    clone(): Refund;
    /**
     * A complete description of the purpose of the refund. Intended to be displayed to the user
     * but with the caveat that it has not been verified in any way.
     */
    description(): PrintableString;
    /**
     * Duration since the Unix epoch when an invoice should no longer be sent.
     *
     * If `None`, the refund does not expire.
     */
    absolute_expiry(): Option_u64Z;
    /**
     * Whether the refund has expired given the duration since the Unix epoch.
     */
    is_expired_no_std(duration_since_epoch: bigint): boolean;
    /**
     * The issuer of the refund, possibly beginning with `user@domain` or `domain`. Intended to be
     * displayed to the user but with the caveat that it has not been verified in any way.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    issuer(): PrintableString;
    /**
     * Paths to the sender originating from publicly reachable nodes. Blinded paths provide sender
     * privacy by obfuscating its node id.
     */
    paths(): BlindedMessagePath[];
    /**
     * An unpredictable series of bytes, typically containing information about the derivation of
     * [`payer_id`].
     *
     * [`payer_id`]: Self::payer_id
     */
    payer_metadata(): Uint8Array;
    /**
     * A chain that the refund is valid for.
     */
    chain(): Uint8Array;
    /**
     * The amount to refund in msats (i.e., the minimum lightning-payable unit for [`chain`]).
     *
     * [`chain`]: Self::chain
     */
    amount_msats(): bigint;
    /**
     * Features pertaining to requesting an invoice.
     */
    features(): InvoiceRequestFeatures;
    /**
     * The quantity of an item that refund is for.
     */
    quantity(): Option_u64Z;
    /**
     * A public node id to send to in the case where there are no [`paths`]. Otherwise, a possibly
     * transient pubkey.
     *
     * [`paths`]: Self::paths
     */
    payer_id(): Uint8Array;
    /**
     * Payer provided note to include in the invoice.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    payer_note(): PrintableString;
    /**
     * Generates a non-cryptographic 64-bit hash of the Refund.
     */
    hash(): bigint;
    /**
     * Read a Refund from a byte array, created by Refund_write
     */
    static constructor_read(ser: Uint8Array): Result_RefundDecodeErrorZ;
    /**
     * Serialize the Refund object into a byte array which can be read by Refund_read
     */
    write(): Uint8Array;
    /**
     * Read a Refund object from a string
     */
    static constructor_from_str(s: string): Result_RefundBolt12ParseErrorZ;
    /**
     * Get the string representation of a Refund object
     */
    to_str(): string;
}
