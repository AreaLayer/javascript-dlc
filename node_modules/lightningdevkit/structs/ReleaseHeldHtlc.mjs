import { OnionMessageContents } from '../structs/OnionMessageContents.mjs';
import { Result_ReleaseHeldHtlcDecodeErrorZ } from '../structs/Result_ReleaseHeldHtlcDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Releases the HTLC corresponding to an inbound [`HeldHtlcAvailable`] message.
 */
export class ReleaseHeldHtlc extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.ReleaseHeldHtlc_free);
    }
    /**
     * Used to release the HTLC held upstream if it matches the corresponding
     * [`HeldHtlcAvailable::payment_release_secret`].
     */
    get_payment_release_secret() {
        const ret = bindings.ReleaseHeldHtlc_get_payment_release_secret(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Used to release the HTLC held upstream if it matches the corresponding
     * [`HeldHtlcAvailable::payment_release_secret`].
     */
    set_payment_release_secret(val) {
        bindings.ReleaseHeldHtlc_set_payment_release_secret(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * Constructs a new ReleaseHeldHtlc given each field
     */
    static constructor_new(payment_release_secret_arg) {
        const ret = bindings.ReleaseHeldHtlc_new(bindings.encodeUint8Array(bindings.check_arr_len(payment_release_secret_arg, 32)));
        const ret_hu_conv = new ReleaseHeldHtlc(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.ReleaseHeldHtlc_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ReleaseHeldHtlc
     */
    clone() {
        const ret = bindings.ReleaseHeldHtlc_clone(this.ptr);
        const ret_hu_conv = new ReleaseHeldHtlc(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Constructs a new OnionMessageContents which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned OnionMessageContents must be freed before this_arg is
     */
    as_OnionMessageContents() {
        const ret = bindings.ReleaseHeldHtlc_as_OnionMessageContents(this.ptr);
        const ret_hu_conv = new OnionMessageContents(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Serialize the ReleaseHeldHtlc object into a byte array which can be read by ReleaseHeldHtlc_read
     */
    write() {
        const ret = bindings.ReleaseHeldHtlc_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a ReleaseHeldHtlc from a byte array, created by ReleaseHeldHtlc_write
     */
    static constructor_read(ser) {
        const ret = bindings.ReleaseHeldHtlc_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_ReleaseHeldHtlcDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=ReleaseHeldHtlc.mjs.map