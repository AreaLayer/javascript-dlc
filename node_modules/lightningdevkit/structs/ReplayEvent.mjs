import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An error type that may be returned to LDK in order to safely abort event handling if it can't
 * currently succeed (e.g., due to a persistence failure).
 *
 * Depending on the type, LDK may ensure the event is persisted and will eventually be replayed.
 * Please refer to the documentation of each [`Event`] variant for more details.
 */
export class ReplayEvent extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.ReplayEvent_free);
    }
    /**
     * Constructs a new ReplayEvent given each field
     */
    static constructor_new() {
        const ret = bindings.ReplayEvent_new();
        const ret_hu_conv = new ReplayEvent(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.ReplayEvent_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the ReplayEvent
     */
    clone() {
        const ret = bindings.ReplayEvent_clone(this.ptr);
        const ret_hu_conv = new ReplayEvent(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=ReplayEvent.mjs.map