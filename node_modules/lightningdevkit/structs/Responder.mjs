import { ResponseInstruction } from '../structs/ResponseInstruction.mjs';
import { Result_ResponderDecodeErrorZ } from '../structs/Result_ResponderDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * The `Responder` struct creates an appropriate [`ResponseInstruction`] for responding to a
 * message.
 */
export class Responder extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Responder_free);
    }
    clone_ptr() {
        const ret = bindings.Responder_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Responder
     */
    clone() {
        const ret = bindings.Responder_clone(this.ptr);
        const ret_hu_conv = new Responder(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two Responders contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.Responder_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the Responder object into a byte array which can be read by Responder_read
     */
    write() {
        const ret = bindings.Responder_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a Responder from a byte array, created by Responder_write
     */
    static constructor_read(ser) {
        const ret = bindings.Responder_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_ResponderDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Creates a [`ResponseInstruction`] for responding without including a reply path.
     *
     * Use when the recipient doesn't need to send back a reply to us.
     */
    respond() {
        const ret = bindings.Responder_respond(this.ptr);
        const ret_hu_conv = new ResponseInstruction(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Creates a [`ResponseInstruction`] for responding including a reply path.
     *
     * Use when the recipient needs to send back a reply to us.
     */
    respond_with_reply_path(context) {
        const ret = bindings.Responder_respond_with_reply_path(this.ptr, CommonBase.get_ptr_of(context));
        const ret_hu_conv = new ResponseInstruction(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=Responder.mjs.map