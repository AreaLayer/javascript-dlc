import { Utxo } from '../structs/Utxo.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
export class Result_CVec_UtxoZNoneZ extends CommonBase {
    constructor(_dummy, ptr) {
        super(ptr, bindings.CResult_CVec_UtxoZNoneZ_free);
    }
    /* @internal */
    static constr_from_ptr(ptr) {
        if (bindings.CResult_CVec_UtxoZNoneZ_is_ok(ptr)) {
            return new Result_CVec_UtxoZNoneZ_OK(null, ptr);
        }
        else {
            return new Result_CVec_UtxoZNoneZ_Err(null, ptr);
        }
    }
    /**
     * Creates a new CResult_CVec_UtxoZNoneZ in the success state.
     */
    static constructor_ok(o) {
        const ret = bindings.CResult_CVec_UtxoZNoneZ_ok(bindings.encodeUint64Array(o.map(o_conv_6 => CommonBase.get_ptr_of(o_conv_6))));
        const ret_hu_conv = Result_CVec_UtxoZNoneZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Creates a new CResult_CVec_UtxoZNoneZ in the error state.
     */
    static constructor_err() {
        const ret = bindings.CResult_CVec_UtxoZNoneZ_err();
        const ret_hu_conv = Result_CVec_UtxoZNoneZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Checks if the given object is currently in the success state
     */
    is_ok() {
        const ret = bindings.CResult_CVec_UtxoZNoneZ_is_ok(this.ptr);
        return ret;
    }
    clone_ptr() {
        const ret = bindings.CResult_CVec_UtxoZNoneZ_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a new CResult_CVec_UtxoZNoneZ which has the same data as `orig`
     * but with all dynamically-allocated buffers duplicated in new buffers.
     */
    clone() {
        const ret = bindings.CResult_CVec_UtxoZNoneZ_clone(this.ptr);
        const ret_hu_conv = Result_CVec_UtxoZNoneZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
export class Result_CVec_UtxoZNoneZ_OK extends Result_CVec_UtxoZNoneZ {
    /* @internal */
    constructor(_dummy, ptr) {
        super(_dummy, ptr);
        const res = bindings.CResult_CVec_UtxoZNoneZ_get_ok(ptr);
        const res_conv_6_len = bindings.getArrayLength(res);
        const res_conv_6_arr = new Array(res_conv_6_len).fill(null);
        for (var g = 0; g < res_conv_6_len; g++) {
            const res_conv_6 = bindings.getU64ArrayElem(res, g);
            const res_conv_6_hu_conv = new Utxo(null, res_conv_6);
            CommonBase.add_ref_from(res_conv_6_hu_conv, this);
            res_conv_6_arr[g] = res_conv_6_hu_conv;
        }
        bindings.freeWasmMemory(res);
        this.res = res_conv_6_arr;
    }
}
export class Result_CVec_UtxoZNoneZ_Err extends Result_CVec_UtxoZNoneZ {
    /* @internal */
    constructor(_dummy, ptr) {
        super(_dummy, ptr);
    }
}
//# sourceMappingURL=Result_CVec_UtxoZNoneZ.mjs.map