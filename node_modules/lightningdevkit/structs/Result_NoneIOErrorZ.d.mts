import { IOError } from '../enums/IOError.mjs';
import { CommonBase } from './CommonBase.mjs';
export declare class Result_NoneIOErrorZ extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    /**
     * Creates a new CResult_NoneIOErrorZ in the success state.
     */
    static constructor_ok(): Result_NoneIOErrorZ;
    /**
     * Creates a new CResult_NoneIOErrorZ in the error state.
     */
    static constructor_err(e: IOError): Result_NoneIOErrorZ;
    /**
     * Checks if the given object is currently in the success state
     */
    is_ok(): boolean;
    clone_ptr(): bigint;
    /**
     * Creates a new CResult_NoneIOErrorZ which has the same data as `orig`
     * but with all dynamically-allocated buffers duplicated in new buffers.
     */
    clone(): Result_NoneIOErrorZ;
}
export declare class Result_NoneIOErrorZ_OK extends Result_NoneIOErrorZ {
}
export declare class Result_NoneIOErrorZ_Err extends Result_NoneIOErrorZ {
    err: IOError;
}
