import { DecodeError } from '../structs/DecodeError.mjs';
import { OutputSweeper } from '../structs/OutputSweeper.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
export class Result_OutputSweeperDecodeErrorZ extends CommonBase {
    constructor(_dummy, ptr) {
        super(ptr, bindings.CResult_OutputSweeperDecodeErrorZ_free);
    }
    /* @internal */
    static constr_from_ptr(ptr) {
        if (bindings.CResult_OutputSweeperDecodeErrorZ_is_ok(ptr)) {
            return new Result_OutputSweeperDecodeErrorZ_OK(null, ptr);
        }
        else {
            return new Result_OutputSweeperDecodeErrorZ_Err(null, ptr);
        }
    }
    /**
     * Creates a new CResult_OutputSweeperDecodeErrorZ in the success state.
     */
    static constructor_ok(o_best_block, o_broadcaster, o_fee_estimator, o_chain_data_source, o_output_spender, o_change_destination_source, o_kv_store, o_logger) {
        const ret = bindings.CResult_OutputSweeperDecodeErrorZ_ok(bindings.OutputSweeper_new(CommonBase.get_ptr_of(o_best_block), CommonBase.get_ptr_of(o_broadcaster), CommonBase.get_ptr_of(o_fee_estimator), CommonBase.get_ptr_of(o_chain_data_source), CommonBase.get_ptr_of(o_output_spender), CommonBase.get_ptr_of(o_change_destination_source), CommonBase.get_ptr_of(o_kv_store), CommonBase.get_ptr_of(o_logger)));
        const ret_hu_conv = Result_OutputSweeperDecodeErrorZ.constr_from_ptr(ret);
        ;
        CommonBase.add_ref_from(ret_hu_conv, o_broadcaster);
        CommonBase.add_ref_from(ret_hu_conv, o_fee_estimator);
        CommonBase.add_ref_from(ret_hu_conv, o_chain_data_source);
        CommonBase.add_ref_from(ret_hu_conv, o_output_spender);
        CommonBase.add_ref_from(ret_hu_conv, o_change_destination_source);
        CommonBase.add_ref_from(ret_hu_conv, o_kv_store);
        CommonBase.add_ref_from(ret_hu_conv, o_logger);
        return ret_hu_conv;
    }
    /**
     * Creates a new CResult_OutputSweeperDecodeErrorZ in the error state.
     */
    static constructor_err(e) {
        const ret = bindings.CResult_OutputSweeperDecodeErrorZ_err(CommonBase.get_ptr_of(e));
        const ret_hu_conv = Result_OutputSweeperDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Checks if the given object is currently in the success state
     */
    is_ok() {
        const ret = bindings.CResult_OutputSweeperDecodeErrorZ_is_ok(this.ptr);
        return ret;
    }
}
export class Result_OutputSweeperDecodeErrorZ_OK extends Result_OutputSweeperDecodeErrorZ {
    /* @internal */
    constructor(_dummy, ptr) {
        super(_dummy, ptr);
        const res = bindings.CResult_OutputSweeperDecodeErrorZ_get_ok(ptr);
        const res_hu_conv = new OutputSweeper(null, res);
        CommonBase.add_ref_from(res_hu_conv, this);
        this.res = res_hu_conv;
    }
}
export class Result_OutputSweeperDecodeErrorZ_Err extends Result_OutputSweeperDecodeErrorZ {
    /* @internal */
    constructor(_dummy, ptr) {
        super(_dummy, ptr);
        const err = bindings.CResult_OutputSweeperDecodeErrorZ_get_err(ptr);
        const err_hu_conv = DecodeError.constr_from_ptr(err);
        CommonBase.add_ref_from(err_hu_conv, this);
        this.err = err_hu_conv;
    }
}
//# sourceMappingURL=Result_OutputSweeperDecodeErrorZ.mjs.map