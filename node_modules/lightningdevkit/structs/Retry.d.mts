import { Result_RetryDecodeErrorZ } from '../structs/Result_RetryDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Strategies available to retry payment path failures.
 */
export declare class Retry extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Retry
     */
    clone(): Retry;
    /**
     * Utility method to constructs a new Attempts-variant Retry
     */
    static constructor_attempts(a: number): Retry;
    /**
     * Checks if two Retrys contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: Retry): boolean;
    /**
     * Generates a non-cryptographic 64-bit hash of the Retry.
     */
    hash(): bigint;
    /**
     * Serialize the Retry object into a byte array which can be read by Retry_read
     */
    write(): Uint8Array;
    /**
     * Read a Retry from a byte array, created by Retry_write
     */
    static constructor_read(ser: Uint8Array): Result_RetryDecodeErrorZ;
}
/** A Retry of type Attempts */
export declare class Retry_Attempts extends Retry {
    attempts: number;
}
