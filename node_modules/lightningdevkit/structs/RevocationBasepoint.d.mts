import { Result_RevocationBasepointDecodeErrorZ } from '../structs/Result_RevocationBasepointDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Master key used in conjunction with per_commitment_point to generate [htlcpubkey](https://github.com/lightning/bolts/blob/master/03-transactions.md#key-derivation) for the latest state of a channel.
 * A watcher can be given a [RevocationBasepoint] to generate per commitment [RevocationKey] to create justice transactions.
 */
export declare class RevocationBasepoint extends CommonBase {
    get_a(): Uint8Array;
    set_a(val: Uint8Array): void;
    /**
     * Constructs a new RevocationBasepoint given each field
     */
    static constructor_new(a_arg: Uint8Array): RevocationBasepoint;
    /**
     * Checks if two RevocationBasepoints contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: RevocationBasepoint): boolean;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the RevocationBasepoint
     */
    clone(): RevocationBasepoint;
    /**
     * Generates a non-cryptographic 64-bit hash of the RevocationBasepoint.
     */
    hash(): bigint;
    /**
     * Get inner Public Key
     */
    to_public_key(): Uint8Array;
    /**
     * Serialize the RevocationBasepoint object into a byte array which can be read by RevocationBasepoint_read
     */
    write(): Uint8Array;
    /**
     * Read a RevocationBasepoint from a byte array, created by RevocationBasepoint_write
     */
    static constructor_read(ser: Uint8Array): Result_RevocationBasepointDecodeErrorZ;
}
