import { Result_RevocationBasepointDecodeErrorZ } from '../structs/Result_RevocationBasepointDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Master key used in conjunction with per_commitment_point to generate [htlcpubkey](https://github.com/lightning/bolts/blob/master/03-transactions.md#key-derivation) for the latest state of a channel.
 * A watcher can be given a [RevocationBasepoint] to generate per commitment [RevocationKey] to create justice transactions.
 */
export class RevocationBasepoint extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.RevocationBasepoint_free);
    }
    get_a() {
        const ret = bindings.RevocationBasepoint_get_a(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    set_a(val) {
        bindings.RevocationBasepoint_set_a(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * Constructs a new RevocationBasepoint given each field
     */
    static constructor_new(a_arg) {
        const ret = bindings.RevocationBasepoint_new(bindings.encodeUint8Array(bindings.check_arr_len(a_arg, 33)));
        const ret_hu_conv = new RevocationBasepoint(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Checks if two RevocationBasepoints contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.RevocationBasepoint_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    clone_ptr() {
        const ret = bindings.RevocationBasepoint_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the RevocationBasepoint
     */
    clone() {
        const ret = bindings.RevocationBasepoint_clone(this.ptr);
        const ret_hu_conv = new RevocationBasepoint(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the RevocationBasepoint.
     */
    hash() {
        const ret = bindings.RevocationBasepoint_hash(this.ptr);
        return ret;
    }
    /**
     * Get inner Public Key
     */
    to_public_key() {
        const ret = bindings.RevocationBasepoint_to_public_key(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Serialize the RevocationBasepoint object into a byte array which can be read by RevocationBasepoint_read
     */
    write() {
        const ret = bindings.RevocationBasepoint_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a RevocationBasepoint from a byte array, created by RevocationBasepoint_write
     */
    static constructor_read(ser) {
        const ret = bindings.RevocationBasepoint_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_RevocationBasepointDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=RevocationBasepoint.mjs.map