import { RevocationBasepoint } from '../structs/RevocationBasepoint.mjs';
import { Result_RevocationKeyDecodeErrorZ } from '../structs/Result_RevocationKeyDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * The revocation key is used to allow a channel party to revoke their state - giving their
 * counterparty the required material to claim all of their funds if they broadcast that state.
 *
 * Each commitment transaction has a revocation key based on the basepoint and
 * per_commitment_point which is used in both commitment and HTLC transactions.
 *
 * See [the BOLT spec for derivation details]
 * <https://github.com/lightning/bolts/blob/master/03-transactions.md#revocationpubkey-derivation>
 */
export declare class RevocationKey extends CommonBase {
    get_a(): Uint8Array;
    set_a(val: Uint8Array): void;
    /**
     * Constructs a new RevocationKey given each field
     */
    static constructor_new(a_arg: Uint8Array): RevocationKey;
    /**
     * Checks if two RevocationKeys contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: RevocationKey): boolean;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the RevocationKey
     */
    clone(): RevocationKey;
    /**
     * Generates a non-cryptographic 64-bit hash of the RevocationKey.
     */
    hash(): bigint;
    /**
     * Derives a per-commitment-transaction revocation public key from one party's per-commitment
     * point and the other party's [`RevocationBasepoint`]. This is the public equivalent of
     * [`chan_utils::derive_private_revocation_key`] - using only public keys to derive a public
     * key instead of private keys.
     *
     * Note that this is infallible iff we trust that at least one of the two input keys are randomly
     * generated (ie our own).
     *
     * [`chan_utils::derive_private_revocation_key`]: crate::ln::chan_utils::derive_private_revocation_key
     */
    static constructor_from_basepoint(countersignatory_basepoint: RevocationBasepoint, per_commitment_point: Uint8Array): RevocationKey;
    /**
     * Get inner Public Key
     */
    to_public_key(): Uint8Array;
    /**
     * Serialize the RevocationKey object into a byte array which can be read by RevocationKey_read
     */
    write(): Uint8Array;
    /**
     * Read a RevocationKey from a byte array, created by RevocationKey_write
     */
    static constructor_read(ser: Uint8Array): Result_RevocationKeyDecodeErrorZ;
}
