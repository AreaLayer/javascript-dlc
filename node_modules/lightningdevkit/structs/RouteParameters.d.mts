import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { RecipientOnionFields } from '../structs/RecipientOnionFields.mjs';
import { Result_NoneNoneZ } from '../structs/Result_NoneNoneZ.mjs';
import { Result_RouteParametersDecodeErrorZ } from '../structs/Result_RouteParametersDecodeErrorZ.mjs';
import { PaymentParameters } from '../structs/PaymentParameters.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Parameters needed to find a [`Route`].
 *
 * Passed to [`find_route`] and [`build_route_from_hops`].
 */
export declare class RouteParameters extends CommonBase {
    /**
     * The parameters of the failed payment path.
     */
    get_payment_params(): PaymentParameters;
    /**
     * The parameters of the failed payment path.
     */
    set_payment_params(val: PaymentParameters): void;
    /**
     * The amount in msats sent on the failed payment path.
     */
    get_final_value_msat(): bigint;
    /**
     * The amount in msats sent on the failed payment path.
     */
    set_final_value_msat(val: bigint): void;
    /**
     * The maximum total fees, in millisatoshi, that may accrue during route finding.
     *
     * This limit also applies to the total fees that may arise while retrying failed payment
     * paths.
     *
     * Note that values below a few sats may result in some paths being spuriously ignored.
     */
    get_max_total_routing_fee_msat(): Option_u64Z;
    /**
     * The maximum total fees, in millisatoshi, that may accrue during route finding.
     *
     * This limit also applies to the total fees that may arise while retrying failed payment
     * paths.
     *
     * Note that values below a few sats may result in some paths being spuriously ignored.
     */
    set_max_total_routing_fee_msat(val: Option_u64Z): void;
    /**
     * Constructs a new RouteParameters given each field
     */
    static constructor_new(payment_params_arg: PaymentParameters, final_value_msat_arg: bigint, max_total_routing_fee_msat_arg: Option_u64Z): RouteParameters;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the RouteParameters
     */
    clone(): RouteParameters;
    /**
     * Generates a non-cryptographic 64-bit hash of the RouteParameters.
     */
    hash(): bigint;
    /**
     * Checks if two RouteParameterss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: RouteParameters): boolean;
    /**
     * Constructs [`RouteParameters`] from the given [`PaymentParameters`] and a payment amount.
     *
     * [`Self::max_total_routing_fee_msat`] defaults to 1% of the payment amount + 50 sats
     */
    static constructor_from_payment_params_and_value(payment_params: PaymentParameters, final_value_msat: bigint): RouteParameters;
    /**
     * Sets the maximum number of hops that can be included in a payment path, based on the provided
     * [`RecipientOnionFields`] and blinded paths.
     */
    set_max_path_length(recipient_onion: RecipientOnionFields, is_keysend: boolean, best_block_height: number): Result_NoneNoneZ;
    /**
     * Serialize the RouteParameters object into a byte array which can be read by RouteParameters_read
     */
    write(): Uint8Array;
    /**
     * Read a RouteParameters from a byte array, created by RouteParameters_write
     */
    static constructor_read(ser: Uint8Array): Result_RouteParametersDecodeErrorZ;
}
