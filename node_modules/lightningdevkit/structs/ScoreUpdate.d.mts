import { Path } from '../structs/Path.mjs';
import { CommonBase } from './CommonBase.mjs';
/** An implementation of ScoreUpdate */
export interface ScoreUpdateInterface {
    /**Handles updating channel penalties after failing to route through a channel.
     */
    payment_path_failed(path: Path, short_channel_id: bigint, duration_since_epoch: bigint): void;
    /**Handles updating channel penalties after successfully routing along a path.
     */
    payment_path_successful(path: Path, duration_since_epoch: bigint): void;
    /**Handles updating channel penalties after a probe over the given path failed.
     */
    probe_failed(path: Path, short_channel_id: bigint, duration_since_epoch: bigint): void;
    /**Handles updating channel penalties after a probe over the given path succeeded.
     */
    probe_successful(path: Path, duration_since_epoch: bigint): void;
    /**Scorers may wish to reduce their certainty of channel liquidity information over time.
     * Thus, this method is provided to allow scorers to observe the passage of time - the holder
     * of this object should call this method regularly (generally via the
     * `lightning-background-processor` crate).
     */
    time_passed(duration_since_epoch: bigint): void;
}
/**
 * `ScoreUpdate` is used to update the scorer's internal state after a payment attempt.
 */
export declare class ScoreUpdate extends CommonBase {
    /** Creates a new instance of ScoreUpdate from a given implementation */
    static new_impl(arg: ScoreUpdateInterface): ScoreUpdate;
    /**
     * Handles updating channel penalties after failing to route through a channel.
     */
    payment_path_failed(path: Path, short_channel_id: bigint, duration_since_epoch: bigint): void;
    /**
     * Handles updating channel penalties after successfully routing along a path.
     */
    payment_path_successful(path: Path, duration_since_epoch: bigint): void;
    /**
     * Handles updating channel penalties after a probe over the given path failed.
     */
    probe_failed(path: Path, short_channel_id: bigint, duration_since_epoch: bigint): void;
    /**
     * Handles updating channel penalties after a probe over the given path succeeded.
     */
    probe_successful(path: Path, duration_since_epoch: bigint): void;
    /**
     * Scorers may wish to reduce their certainty of channel liquidity information over time.
     * Thus, this method is provided to allow scorers to observe the passage of time - the holder
     * of this object should call this method regularly (generally via the
     * `lightning-background-processor` crate).
     */
    time_passed(duration_since_epoch: bigint): void;
}
