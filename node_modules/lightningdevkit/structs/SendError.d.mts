import { Secp256k1Error } from '../enums/Secp256k1Error.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Errors that may occur when [sending an onion message].
 *
 * [sending an onion message]: OnionMessenger::send_onion_message
 */
export declare class SendError extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the SendError
     */
    clone(): SendError;
    /**
     * Utility method to constructs a new Secp256k1-variant SendError
     */
    static constructor_secp256k1(a: Secp256k1Error): SendError;
    /**
     * Utility method to constructs a new TooBigPacket-variant SendError
     */
    static constructor_too_big_packet(): SendError;
    /**
     * Utility method to constructs a new TooFewBlindedHops-variant SendError
     */
    static constructor_too_few_blinded_hops(): SendError;
    /**
     * Utility method to constructs a new InvalidFirstHop-variant SendError
     */
    static constructor_invalid_first_hop(a: Uint8Array): SendError;
    /**
     * Utility method to constructs a new PathNotFound-variant SendError
     */
    static constructor_path_not_found(): SendError;
    /**
     * Utility method to constructs a new InvalidMessage-variant SendError
     */
    static constructor_invalid_message(): SendError;
    /**
     * Utility method to constructs a new BufferFull-variant SendError
     */
    static constructor_buffer_full(): SendError;
    /**
     * Utility method to constructs a new GetNodeIdFailed-variant SendError
     */
    static constructor_get_node_id_failed(): SendError;
    /**
     * Utility method to constructs a new UnresolvedIntroductionNode-variant SendError
     */
    static constructor_unresolved_introduction_node(): SendError;
    /**
     * Utility method to constructs a new BlindedPathAdvanceFailed-variant SendError
     */
    static constructor_blinded_path_advance_failed(): SendError;
    /**
     * Generates a non-cryptographic 64-bit hash of the SendError.
     */
    hash(): bigint;
    /**
     * Checks if two SendErrors contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: SendError): boolean;
}
/** A SendError of type Secp256k1 */
export declare class SendError_Secp256k1 extends SendError {
    secp256k1: Secp256k1Error;
}
/** A SendError of type TooBigPacket */
export declare class SendError_TooBigPacket extends SendError {
}
/** A SendError of type TooFewBlindedHops */
export declare class SendError_TooFewBlindedHops extends SendError {
}
/** A SendError of type InvalidFirstHop */
export declare class SendError_InvalidFirstHop extends SendError {
    invalid_first_hop: Uint8Array;
}
/** A SendError of type PathNotFound */
export declare class SendError_PathNotFound extends SendError {
}
/** A SendError of type InvalidMessage */
export declare class SendError_InvalidMessage extends SendError {
}
/** A SendError of type BufferFull */
export declare class SendError_BufferFull extends SendError {
}
/** A SendError of type GetNodeIdFailed */
export declare class SendError_GetNodeIdFailed extends SendError {
}
/** A SendError of type UnresolvedIntroductionNode */
export declare class SendError_UnresolvedIntroductionNode extends SendError {
}
/** A SendError of type BlindedPathAdvanceFailed */
export declare class SendError_BlindedPathAdvanceFailed extends SendError {
}
