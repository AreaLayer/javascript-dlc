import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Result of successfully [sending an onion message].
 *
 * [sending an onion message]: OnionMessenger::send_onion_message
 */
export class SendSuccess extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.SendSuccess_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKSendSuccess_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new SendSuccess_Buffered(ptr);
            case 1: return new SendSuccess_BufferedAwaitingConnection(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.SendSuccess_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the SendSuccess
     */
    clone() {
        const ret = bindings.SendSuccess_clone(this.ptr);
        const ret_hu_conv = SendSuccess.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Buffered-variant SendSuccess
     */
    static constructor_buffered() {
        const ret = bindings.SendSuccess_buffered();
        const ret_hu_conv = SendSuccess.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new BufferedAwaitingConnection-variant SendSuccess
     */
    static constructor_buffered_awaiting_connection(a) {
        const ret = bindings.SendSuccess_buffered_awaiting_connection(bindings.encodeUint8Array(bindings.check_arr_len(a, 33)));
        const ret_hu_conv = SendSuccess.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the SendSuccess.
     */
    hash() {
        const ret = bindings.SendSuccess_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two SendSuccesss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b) {
        const ret = bindings.SendSuccess_eq(this.ptr, CommonBase.get_ptr_of(b));
        return ret;
    }
}
/** A SendSuccess of type Buffered */
export class SendSuccess_Buffered extends SendSuccess {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A SendSuccess of type BufferedAwaitingConnection */
export class SendSuccess_BufferedAwaitingConnection extends SendSuccess {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        const buffered_awaiting_connection = bindings.LDKSendSuccess_BufferedAwaitingConnection_get_buffered_awaiting_connection(ptr);
        const buffered_awaiting_connection_conv = bindings.decodeUint8Array(buffered_awaiting_connection);
        this.buffered_awaiting_connection = buffered_awaiting_connection_conv;
    }
}
//# sourceMappingURL=SendSuccess.mjs.map