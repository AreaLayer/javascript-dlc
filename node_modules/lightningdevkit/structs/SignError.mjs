import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Error when signing messages.
 */
export class SignError extends CommonBase {
    constructor(_dummy, ptr) { super(ptr, bindings.SignError_free); }
    /* @internal */
    static constr_from_ptr(ptr) {
        const raw_ty = bindings.LDKSignError_ty_from_ptr(ptr);
        switch (raw_ty) {
            case 0: return new SignError_Signing(ptr);
            case 1: return new SignError_Verification(ptr);
            default:
                throw new Error('oops, this should be unreachable'); // Unreachable without extending the (internal) bindings interface
        }
    }
    clone_ptr() {
        const ret = bindings.SignError_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the SignError
     */
    clone() {
        const ret = bindings.SignError_clone(this.ptr);
        const ret_hu_conv = SignError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Signing-variant SignError
     */
    static constructor_signing() {
        const ret = bindings.SignError_signing();
        const ret_hu_conv = SignError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    /**
     * Utility method to constructs a new Verification-variant SignError
     */
    static constructor_verification(a) {
        const ret = bindings.SignError_verification(a);
        const ret_hu_conv = SignError.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
}
/** A SignError of type Signing */
export class SignError_Signing extends SignError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
    }
}
/** A SignError of type Verification */
export class SignError_Verification extends SignError {
    /* @internal */
    constructor(ptr) {
        super(null, ptr);
        this.verification = bindings.LDKSignError_Verification_get_verification(ptr);
    }
}
//# sourceMappingURL=SignError.mjs.map