import { Hostname } from '../structs/Hostname.mjs';
import { Result_SocketAddressDecodeErrorZ } from '../structs/Result_SocketAddressDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An address which can be used to connect to a remote peer.
 */
export declare class SocketAddress extends CommonBase {
    protected constructor(_dummy: null, ptr: bigint);
    clone_ptr(): bigint;
    /**
     * Creates a copy of the SocketAddress
     */
    clone(): SocketAddress;
    /**
     * Utility method to constructs a new TcpIpV4-variant SocketAddress
     */
    static constructor_tcp_ip_v4(addr: Uint8Array, port: number): SocketAddress;
    /**
     * Utility method to constructs a new TcpIpV6-variant SocketAddress
     */
    static constructor_tcp_ip_v6(addr: Uint8Array, port: number): SocketAddress;
    /**
     * Utility method to constructs a new OnionV2-variant SocketAddress
     */
    static constructor_onion_v2(a: Uint8Array): SocketAddress;
    /**
     * Utility method to constructs a new OnionV3-variant SocketAddress
     */
    static constructor_onion_v3(ed25519_pubkey: Uint8Array, checksum: number, version: number, port: number): SocketAddress;
    /**
     * Utility method to constructs a new Hostname-variant SocketAddress
     */
    static constructor_hostname(hostname: Hostname, port: number): SocketAddress;
    /**
     * Generates a non-cryptographic 64-bit hash of the SocketAddress.
     */
    hash(): bigint;
    /**
     * Checks if two SocketAddresss contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     */
    eq(b: SocketAddress): boolean;
    /**
     * Serialize the SocketAddress object into a byte array which can be read by SocketAddress_read
     */
    write(): Uint8Array;
    /**
     * Read a SocketAddress from a byte array, created by SocketAddress_write
     */
    static constructor_read(ser: Uint8Array): Result_SocketAddressDecodeErrorZ;
    /**
     * Get the string representation of a SocketAddress object
     */
    to_str(): string;
}
/** A SocketAddress of type TcpIpV4 */
export declare class SocketAddress_TcpIpV4 extends SocketAddress {
    /**
     * The 4-byte IPv4 address
     */
    addr: Uint8Array;
    /**
     * The port on which the node is listening
     */
    port: number;
}
/** A SocketAddress of type TcpIpV6 */
export declare class SocketAddress_TcpIpV6 extends SocketAddress {
    /**
     * The 16-byte IPv6 address
     */
    addr: Uint8Array;
    /**
     * The port on which the node is listening
     */
    port: number;
}
/** A SocketAddress of type OnionV2 */
export declare class SocketAddress_OnionV2 extends SocketAddress {
    onion_v2: Uint8Array;
}
/** A SocketAddress of type OnionV3 */
export declare class SocketAddress_OnionV3 extends SocketAddress {
    /**
     * The ed25519 long-term public key of the peer
     */
    ed25519_pubkey: Uint8Array;
    /**
     * The checksum of the pubkey and version, as included in the onion address
     */
    checksum: number;
    /**
     * The version byte, as defined by the Tor Onion v3 spec.
     */
    version: number;
    /**
     * The port on which the node is listening
     */
    port: number;
}
/** A SocketAddress of type Hostname */
export declare class SocketAddress_Hostname extends SocketAddress {
    /**
     * The hostname on which the node is listening.
     */
    hostname: Hostname;
    /**
     * The port on which the node is listening.
     */
    port: number;
}
