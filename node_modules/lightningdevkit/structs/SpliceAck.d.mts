import { COption_NoneZ } from '../enums/COption_NoneZ.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_SpliceAckDecodeErrorZ } from '../structs/Result_SpliceAckDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A `splice_ack` message to be received by or sent to the splice initiator.
 */
export declare class SpliceAck extends CommonBase {
    /**
     * The channel ID where splicing is intended
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID where splicing is intended
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The amount the splice acceptor is intending to add to its channel balance (splice-in)
     * or remove from its channel balance (splice-out).
     */
    get_funding_contribution_satoshis(): bigint;
    /**
     * The amount the splice acceptor is intending to add to its channel balance (splice-in)
     * or remove from its channel balance (splice-out).
     */
    set_funding_contribution_satoshis(val: bigint): void;
    /**
     * The key of the sender (splice acceptor) controlling the new funding transaction
     */
    get_funding_pubkey(): Uint8Array;
    /**
     * The key of the sender (splice acceptor) controlling the new funding transaction
     */
    set_funding_pubkey(val: Uint8Array): void;
    /**
     * If set, only confirmed inputs added (by the splice initiator) will be accepted
     */
    get_require_confirmed_inputs(): COption_NoneZ;
    /**
     * If set, only confirmed inputs added (by the splice initiator) will be accepted
     */
    set_require_confirmed_inputs(val: COption_NoneZ): void;
    /**
     * Constructs a new SpliceAck given each field
     */
    static constructor_new(channel_id_arg: ChannelId, funding_contribution_satoshis_arg: bigint, funding_pubkey_arg: Uint8Array, require_confirmed_inputs_arg: COption_NoneZ): SpliceAck;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the SpliceAck
     */
    clone(): SpliceAck;
    /**
     * Checks if two SpliceAcks contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: SpliceAck): boolean;
    /**
     * Serialize the SpliceAck object into a byte array which can be read by SpliceAck_read
     */
    write(): Uint8Array;
    /**
     * Read a SpliceAck from a byte array, created by SpliceAck_write
     */
    static constructor_read(ser: Uint8Array): Result_SpliceAckDecodeErrorZ;
}
