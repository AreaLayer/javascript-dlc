import { COption_NoneZ } from '../enums/COption_NoneZ.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_SpliceInitDecodeErrorZ } from '../structs/Result_SpliceInitDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A `splice_init` message to be sent by or received from the stfu initiator (splice initiator).
 */
export declare class SpliceInit extends CommonBase {
    /**
     * The channel ID where splicing is intended
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID where splicing is intended
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The amount the splice initiator is intending to add to its channel balance (splice-in)
     * or remove from its channel balance (splice-out).
     */
    get_funding_contribution_satoshis(): bigint;
    /**
     * The amount the splice initiator is intending to add to its channel balance (splice-in)
     * or remove from its channel balance (splice-out).
     */
    set_funding_contribution_satoshis(val: bigint): void;
    /**
     * The feerate for the new funding transaction, set by the splice initiator
     */
    get_funding_feerate_perkw(): number;
    /**
     * The feerate for the new funding transaction, set by the splice initiator
     */
    set_funding_feerate_perkw(val: number): void;
    /**
     * The locktime for the new funding transaction
     */
    get_locktime(): number;
    /**
     * The locktime for the new funding transaction
     */
    set_locktime(val: number): void;
    /**
     * The key of the sender (splice initiator) controlling the new funding transaction
     */
    get_funding_pubkey(): Uint8Array;
    /**
     * The key of the sender (splice initiator) controlling the new funding transaction
     */
    set_funding_pubkey(val: Uint8Array): void;
    /**
     * If set, only confirmed inputs added (by the splice acceptor) will be accepted
     */
    get_require_confirmed_inputs(): COption_NoneZ;
    /**
     * If set, only confirmed inputs added (by the splice acceptor) will be accepted
     */
    set_require_confirmed_inputs(val: COption_NoneZ): void;
    /**
     * Constructs a new SpliceInit given each field
     */
    static constructor_new(channel_id_arg: ChannelId, funding_contribution_satoshis_arg: bigint, funding_feerate_perkw_arg: number, locktime_arg: number, funding_pubkey_arg: Uint8Array, require_confirmed_inputs_arg: COption_NoneZ): SpliceInit;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the SpliceInit
     */
    clone(): SpliceInit;
    /**
     * Checks if two SpliceInits contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: SpliceInit): boolean;
    /**
     * Serialize the SpliceInit object into a byte array which can be read by SpliceInit_read
     */
    write(): Uint8Array;
    /**
     * Read a SpliceInit from a byte array, created by SpliceInit_write
     */
    static constructor_read(ser: Uint8Array): Result_SpliceInitDecodeErrorZ;
}
