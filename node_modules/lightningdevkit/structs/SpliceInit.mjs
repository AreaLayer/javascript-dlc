import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_SpliceInitDecodeErrorZ } from '../structs/Result_SpliceInitDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A `splice_init` message to be sent by or received from the stfu initiator (splice initiator).
 */
export class SpliceInit extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.SpliceInit_free);
    }
    /**
     * The channel ID where splicing is intended
     */
    get_channel_id() {
        const ret = bindings.SpliceInit_get_channel_id(this.ptr);
        const ret_hu_conv = new ChannelId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel ID where splicing is intended
     */
    set_channel_id(val) {
        bindings.SpliceInit_set_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The amount the splice initiator is intending to add to its channel balance (splice-in)
     * or remove from its channel balance (splice-out).
     */
    get_funding_contribution_satoshis() {
        const ret = bindings.SpliceInit_get_funding_contribution_satoshis(this.ptr);
        return ret;
    }
    /**
     * The amount the splice initiator is intending to add to its channel balance (splice-in)
     * or remove from its channel balance (splice-out).
     */
    set_funding_contribution_satoshis(val) {
        bindings.SpliceInit_set_funding_contribution_satoshis(this.ptr, val);
    }
    /**
     * The feerate for the new funding transaction, set by the splice initiator
     */
    get_funding_feerate_perkw() {
        const ret = bindings.SpliceInit_get_funding_feerate_perkw(this.ptr);
        return ret;
    }
    /**
     * The feerate for the new funding transaction, set by the splice initiator
     */
    set_funding_feerate_perkw(val) {
        bindings.SpliceInit_set_funding_feerate_perkw(this.ptr, val);
    }
    /**
     * The locktime for the new funding transaction
     */
    get_locktime() {
        const ret = bindings.SpliceInit_get_locktime(this.ptr);
        return ret;
    }
    /**
     * The locktime for the new funding transaction
     */
    set_locktime(val) {
        bindings.SpliceInit_set_locktime(this.ptr, val);
    }
    /**
     * The key of the sender (splice initiator) controlling the new funding transaction
     */
    get_funding_pubkey() {
        const ret = bindings.SpliceInit_get_funding_pubkey(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The key of the sender (splice initiator) controlling the new funding transaction
     */
    set_funding_pubkey(val) {
        bindings.SpliceInit_set_funding_pubkey(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 33)));
    }
    /**
     * If set, only confirmed inputs added (by the splice acceptor) will be accepted
     */
    get_require_confirmed_inputs() {
        const ret = bindings.SpliceInit_get_require_confirmed_inputs(this.ptr);
        return ret;
    }
    /**
     * If set, only confirmed inputs added (by the splice acceptor) will be accepted
     */
    set_require_confirmed_inputs(val) {
        bindings.SpliceInit_set_require_confirmed_inputs(this.ptr, val);
    }
    /**
     * Constructs a new SpliceInit given each field
     */
    static constructor_new(channel_id_arg, funding_contribution_satoshis_arg, funding_feerate_perkw_arg, locktime_arg, funding_pubkey_arg, require_confirmed_inputs_arg) {
        const ret = bindings.SpliceInit_new(CommonBase.get_ptr_of(channel_id_arg), funding_contribution_satoshis_arg, funding_feerate_perkw_arg, locktime_arg, bindings.encodeUint8Array(bindings.check_arr_len(funding_pubkey_arg, 33)), require_confirmed_inputs_arg);
        const ret_hu_conv = new SpliceInit(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.SpliceInit_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the SpliceInit
     */
    clone() {
        const ret = bindings.SpliceInit_clone(this.ptr);
        const ret_hu_conv = new SpliceInit(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two SpliceInits contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.SpliceInit_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the SpliceInit object into a byte array which can be read by SpliceInit_read
     */
    write() {
        const ret = bindings.SpliceInit_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a SpliceInit from a byte array, created by SpliceInit_write
     */
    static constructor_read(ser) {
        const ret = bindings.SpliceInit_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_SpliceInitDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=SpliceInit.mjs.map