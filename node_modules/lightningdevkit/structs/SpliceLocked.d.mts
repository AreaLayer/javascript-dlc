import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_SpliceLockedDecodeErrorZ } from '../structs/Result_SpliceLockedDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A `splice_locked` message to be sent to or received from a peer.
 */
export declare class SpliceLocked extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The ID of the new funding transaction that has been locked
     */
    get_splice_txid(): Uint8Array;
    /**
     * The ID of the new funding transaction that has been locked
     */
    set_splice_txid(val: Uint8Array): void;
    /**
     * Constructs a new SpliceLocked given each field
     */
    static constructor_new(channel_id_arg: ChannelId, splice_txid_arg: Uint8Array): SpliceLocked;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the SpliceLocked
     */
    clone(): SpliceLocked;
    /**
     * Checks if two SpliceLockeds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: SpliceLocked): boolean;
    /**
     * Serialize the SpliceLocked object into a byte array which can be read by SpliceLocked_read
     */
    write(): Uint8Array;
    /**
     * Read a SpliceLocked from a byte array, created by SpliceLocked_write
     */
    static constructor_read(ser: Uint8Array): Result_SpliceLockedDecodeErrorZ;
}
