import { TxOut } from '../structs/TxOut.mjs';
import { Option_CVec_u8ZZ } from '../structs/Option_CVec_u8ZZ.mjs';
import { Result_StaticPaymentOutputDescriptorDecodeErrorZ } from '../structs/Result_StaticPaymentOutputDescriptorDecodeErrorZ.mjs';
import { OutPoint } from '../structs/OutPoint.mjs';
import { ChannelTransactionParameters } from '../structs/ChannelTransactionParameters.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Information about a spendable output to our \"payment key\".
 *
 * See [`SpendableOutputDescriptor::StaticPaymentOutput`] for more details on how to spend this.
 */
export class StaticPaymentOutputDescriptor extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.StaticPaymentOutputDescriptor_free);
    }
    /**
     * The outpoint which is spendable.
     */
    get_outpoint() {
        const ret = bindings.StaticPaymentOutputDescriptor_get_outpoint(this.ptr);
        const ret_hu_conv = new OutPoint(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The outpoint which is spendable.
     */
    set_outpoint(val) {
        bindings.StaticPaymentOutputDescriptor_set_outpoint(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The output which is referenced by the given outpoint.
     */
    get_output() {
        const ret = bindings.StaticPaymentOutputDescriptor_get_output(this.ptr);
        const ret_conv = new TxOut(null, ret);
        return ret_conv;
    }
    /**
     * The output which is referenced by the given outpoint.
     */
    set_output(val) {
        bindings.StaticPaymentOutputDescriptor_set_output(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Arbitrary identification information returned by a call to [`ChannelSigner::channel_keys_id`].
     * This may be useful in re-deriving keys used in the channel to spend the output.
     */
    get_channel_keys_id() {
        const ret = bindings.StaticPaymentOutputDescriptor_get_channel_keys_id(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Arbitrary identification information returned by a call to [`ChannelSigner::channel_keys_id`].
     * This may be useful in re-deriving keys used in the channel to spend the output.
     */
    set_channel_keys_id(val) {
        bindings.StaticPaymentOutputDescriptor_set_channel_keys_id(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * The value of the channel which this transactions spends.
     */
    get_channel_value_satoshis() {
        const ret = bindings.StaticPaymentOutputDescriptor_get_channel_value_satoshis(this.ptr);
        return ret;
    }
    /**
     * The value of the channel which this transactions spends.
     */
    set_channel_value_satoshis(val) {
        bindings.StaticPaymentOutputDescriptor_set_channel_value_satoshis(this.ptr, val);
    }
    /**
     * The necessary channel parameters that need to be provided to the re-derived signer through
     * [`ChannelSigner::provide_channel_parameters`].
     *
     * Added as optional, but always `Some` if the descriptor was produced in v0.0.117 or later.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_channel_transaction_parameters() {
        const ret = bindings.StaticPaymentOutputDescriptor_get_channel_transaction_parameters(this.ptr);
        const ret_hu_conv = new ChannelTransactionParameters(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The necessary channel parameters that need to be provided to the re-derived signer through
     * [`ChannelSigner::provide_channel_parameters`].
     *
     * Added as optional, but always `Some` if the descriptor was produced in v0.0.117 or later.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_channel_transaction_parameters(val) {
        bindings.StaticPaymentOutputDescriptor_set_channel_transaction_parameters(this.ptr, val == null ? 0n : CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new StaticPaymentOutputDescriptor given each field
     *
     * Note that channel_transaction_parameters_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(outpoint_arg, output_arg, channel_keys_id_arg, channel_value_satoshis_arg, channel_transaction_parameters_arg) {
        const ret = bindings.StaticPaymentOutputDescriptor_new(CommonBase.get_ptr_of(outpoint_arg), CommonBase.get_ptr_of(output_arg), bindings.encodeUint8Array(bindings.check_arr_len(channel_keys_id_arg, 32)), channel_value_satoshis_arg, channel_transaction_parameters_arg == null ? 0n : CommonBase.get_ptr_of(channel_transaction_parameters_arg));
        const ret_hu_conv = new StaticPaymentOutputDescriptor(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.StaticPaymentOutputDescriptor_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the StaticPaymentOutputDescriptor
     */
    clone() {
        const ret = bindings.StaticPaymentOutputDescriptor_clone(this.ptr);
        const ret_hu_conv = new StaticPaymentOutputDescriptor(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the StaticPaymentOutputDescriptor.
     */
    hash() {
        const ret = bindings.StaticPaymentOutputDescriptor_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two StaticPaymentOutputDescriptors contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.StaticPaymentOutputDescriptor_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Returns the `witness_script` of the spendable output.
     *
     * Note that this will only return `Some` for [`StaticPaymentOutputDescriptor`]s that
     * originated from an anchor outputs channel, as they take the form of a P2WSH script.
     */
    witness_script() {
        const ret = bindings.StaticPaymentOutputDescriptor_witness_script(this.ptr);
        const ret_hu_conv = Option_CVec_u8ZZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The maximum length a well-formed witness spending one of these should have.
     * Note: If you have the grind_signatures feature enabled, this will be at least 1 byte
     * shorter.
     */
    max_witness_length() {
        const ret = bindings.StaticPaymentOutputDescriptor_max_witness_length(this.ptr);
        return ret;
    }
    /**
     * Serialize the StaticPaymentOutputDescriptor object into a byte array which can be read by StaticPaymentOutputDescriptor_read
     */
    write() {
        const ret = bindings.StaticPaymentOutputDescriptor_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a StaticPaymentOutputDescriptor from a byte array, created by StaticPaymentOutputDescriptor_write
     */
    static constructor_read(ser) {
        const ret = bindings.StaticPaymentOutputDescriptor_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_StaticPaymentOutputDescriptorDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=StaticPaymentOutputDescriptor.mjs.map