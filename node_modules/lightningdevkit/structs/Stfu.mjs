import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_StfuDecodeErrorZ } from '../structs/Result_StfuDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * An `stfu` (quiescence) message to be sent by or received from the stfu initiator.
 */
export class Stfu extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Stfu_free);
    }
    /**
     * The channel ID where quiescence is intended
     */
    get_channel_id() {
        const ret = bindings.Stfu_get_channel_id(this.ptr);
        const ret_hu_conv = new ChannelId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel ID where quiescence is intended
     */
    set_channel_id(val) {
        bindings.Stfu_set_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Initiator flag, 1 if initiating, 0 if replying to an stfu.
     */
    get_initiator() {
        const ret = bindings.Stfu_get_initiator(this.ptr);
        return ret;
    }
    /**
     * Initiator flag, 1 if initiating, 0 if replying to an stfu.
     */
    set_initiator(val) {
        bindings.Stfu_set_initiator(this.ptr, val);
    }
    /**
     * Constructs a new Stfu given each field
     */
    static constructor_new(channel_id_arg, initiator_arg) {
        const ret = bindings.Stfu_new(CommonBase.get_ptr_of(channel_id_arg), initiator_arg);
        const ret_hu_conv = new Stfu(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.Stfu_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the Stfu
     */
    clone() {
        const ret = bindings.Stfu_clone(this.ptr);
        const ret_hu_conv = new Stfu(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two Stfus contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.Stfu_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the Stfu object into a byte array which can be read by Stfu_read
     */
    write() {
        const ret = bindings.Stfu_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a Stfu from a byte array, created by Stfu_write
     */
    static constructor_read(ser) {
        const ret = bindings.Stfu_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_StfuDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=Stfu.mjs.map