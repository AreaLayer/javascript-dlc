import { CommonBase } from './CommonBase.mjs';
/**
 * BOLT 4 onion packet including hop data for the next peer.
 */
export declare class TrampolineOnionPacket extends CommonBase {
    /**
     * Bolt 04 version number
     */
    get_version(): number;
    /**
     * Bolt 04 version number
     */
    set_version(val: number): void;
    /**
     * A random sepc256k1 point, used to build the ECDH shared secret to decrypt hop_data
     */
    get_public_key(): Uint8Array;
    /**
     * A random sepc256k1 point, used to build the ECDH shared secret to decrypt hop_data
     */
    set_public_key(val: Uint8Array): void;
    /**
     * Encrypted payload for the next hop
     *
     * Returns a copy of the field.
     */
    get_hop_data(): Uint8Array;
    /**
     * Encrypted payload for the next hop
     */
    set_hop_data(val: Uint8Array): void;
    /**
     * HMAC to verify the integrity of hop_data
     */
    get_hmac(): Uint8Array;
    /**
     * HMAC to verify the integrity of hop_data
     */
    set_hmac(val: Uint8Array): void;
    /**
     * Constructs a new TrampolineOnionPacket given each field
     */
    static constructor_new(version_arg: number, public_key_arg: Uint8Array, hop_data_arg: Uint8Array, hmac_arg: Uint8Array): TrampolineOnionPacket;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TrampolineOnionPacket
     */
    clone(): TrampolineOnionPacket;
    /**
     * Generates a non-cryptographic 64-bit hash of the TrampolineOnionPacket.
     */
    hash(): bigint;
    /**
     * Checks if two TrampolineOnionPackets contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TrampolineOnionPacket): boolean;
    /**
     * Serialize the TrampolineOnionPacket object into a byte array which can be read by TrampolineOnionPacket_read
     */
    write(): Uint8Array;
}
