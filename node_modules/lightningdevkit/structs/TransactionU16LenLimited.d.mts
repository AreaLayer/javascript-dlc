import { Result_TransactionU16LenLimitedNoneZ } from '../structs/Result_TransactionU16LenLimitedNoneZ.mjs';
import { Result_TransactionU16LenLimitedDecodeErrorZ } from '../structs/Result_TransactionU16LenLimitedDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A wrapper for a `Transaction` which can only be constructed with [`TransactionU16LenLimited::new`]
 * if the `Transaction`'s consensus-serialized length is <= u16::MAX.
 *
 * Use [`TransactionU16LenLimited::into_transaction`] to convert into the contained `Transaction`.
 */
export declare class TransactionU16LenLimited extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TransactionU16LenLimited
     */
    clone(): TransactionU16LenLimited;
    /**
     * Generates a non-cryptographic 64-bit hash of the TransactionU16LenLimited.
     */
    hash(): bigint;
    /**
     * Checks if two TransactionU16LenLimiteds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TransactionU16LenLimited): boolean;
    /**
     * Constructs a new `TransactionU16LenLimited` from a `Transaction` only if it's consensus-
     * serialized length is <= u16::MAX.
     */
    static constructor_new(transaction: Uint8Array): Result_TransactionU16LenLimitedNoneZ;
    /**
     * Consumes this `TransactionU16LenLimited` and returns its contained `Transaction`.
     */
    into_transaction(): Uint8Array;
    /**
     * Returns a reference to the contained `Transaction`
     */
    as_transaction(): Uint8Array;
    /**
     * Serialize the TransactionU16LenLimited object into a byte array which can be read by TransactionU16LenLimited_read
     */
    write(): Uint8Array;
    /**
     * Read a TransactionU16LenLimited from a byte array, created by TransactionU16LenLimited_write
     */
    static constructor_read(ser: Uint8Array): Result_TransactionU16LenLimitedDecodeErrorZ;
}
