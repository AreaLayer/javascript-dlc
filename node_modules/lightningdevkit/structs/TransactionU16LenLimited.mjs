import { Result_TransactionU16LenLimitedNoneZ } from '../structs/Result_TransactionU16LenLimitedNoneZ.mjs';
import { Result_TransactionU16LenLimitedDecodeErrorZ } from '../structs/Result_TransactionU16LenLimitedDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A wrapper for a `Transaction` which can only be constructed with [`TransactionU16LenLimited::new`]
 * if the `Transaction`'s consensus-serialized length is <= u16::MAX.
 *
 * Use [`TransactionU16LenLimited::into_transaction`] to convert into the contained `Transaction`.
 */
export class TransactionU16LenLimited extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.TransactionU16LenLimited_free);
    }
    clone_ptr() {
        const ret = bindings.TransactionU16LenLimited_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the TransactionU16LenLimited
     */
    clone() {
        const ret = bindings.TransactionU16LenLimited_clone(this.ptr);
        const ret_hu_conv = new TransactionU16LenLimited(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the TransactionU16LenLimited.
     */
    hash() {
        const ret = bindings.TransactionU16LenLimited_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two TransactionU16LenLimiteds contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.TransactionU16LenLimited_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Constructs a new `TransactionU16LenLimited` from a `Transaction` only if it's consensus-
     * serialized length is <= u16::MAX.
     */
    static constructor_new(transaction) {
        const ret = bindings.TransactionU16LenLimited_new(bindings.encodeUint8Array(transaction));
        const ret_hu_conv = Result_TransactionU16LenLimitedNoneZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    /**
     * Consumes this `TransactionU16LenLimited` and returns its contained `Transaction`.
     */
    into_transaction() {
        const ret = bindings.TransactionU16LenLimited_into_transaction(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Returns a reference to the contained `Transaction`
     */
    as_transaction() {
        const ret = bindings.TransactionU16LenLimited_as_transaction(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Serialize the TransactionU16LenLimited object into a byte array which can be read by TransactionU16LenLimited_read
     */
    write() {
        const ret = bindings.TransactionU16LenLimited_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a TransactionU16LenLimited from a byte array, created by TransactionU16LenLimited_write
     */
    static constructor_read(ser) {
        const ret = bindings.TransactionU16LenLimited_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_TransactionU16LenLimitedDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=TransactionU16LenLimited.mjs.map