import { Result_TransactionNoneZ } from '../structs/Result_TransactionNoneZ.mjs';
import { ChannelTypeFeatures } from '../structs/ChannelTypeFeatures.mjs';
import { EntropySource } from '../structs/EntropySource.mjs';
import { TxCreationKeys } from '../structs/TxCreationKeys.mjs';
import { BuiltCommitmentTransaction } from '../structs/BuiltCommitmentTransaction.mjs';
import { Result_CVec_ECDSASignatureZNoneZ } from '../structs/Result_CVec_ECDSASignatureZNoneZ.mjs';
import { Option_usizeZ } from '../structs/Option_usizeZ.mjs';
import { DirectedChannelTransactionParameters } from '../structs/DirectedChannelTransactionParameters.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A wrapper on CommitmentTransaction indicating that the derived fields (the built bitcoin
 * transaction and the transaction creation keys) are trusted.
 *
 * See trust() and verify() functions on CommitmentTransaction.
 *
 * This structure implements Deref.
 */
export declare class TrustedCommitmentTransaction extends CommonBase {
    /**
     * The transaction ID of the built Bitcoin transaction
     */
    txid(): Uint8Array;
    /**
     * The pre-built Bitcoin commitment transaction
     */
    built_transaction(): BuiltCommitmentTransaction;
    /**
     * The pre-calculated transaction creation public keys.
     */
    keys(): TxCreationKeys;
    /**
     * Should anchors be used.
     */
    channel_type_features(): ChannelTypeFeatures;
    /**
     * Get a signature for each HTLC which was included in the commitment transaction (ie for
     * which HTLCOutputInCommitment::transaction_output_index.is_some()).
     *
     * The returned Vec has one entry for each HTLC, and in the same order.
     *
     * This function is only valid in the holder commitment context, it always uses EcdsaSighashType::All.
     */
    get_htlc_sigs(htlc_base_key: Uint8Array, channel_parameters: DirectedChannelTransactionParameters, entropy_source: EntropySource): Result_CVec_ECDSASignatureZNoneZ;
    /**
     * Returns the index of the revokeable output, i.e. the `to_local` output sending funds to
     * the broadcaster, in the built transaction, if any exists.
     *
     * There are two cases where this may return `None`:
     * - The balance of the revokeable output is below the dust limit (only found on commitments
     * early in the channel's lifetime, i.e. before the channel reserve is met).
     * - This commitment was created before LDK 0.0.117. In this case, the
     * commitment transaction previously didn't contain enough information to locate the
     * revokeable output.
     */
    revokeable_output_index(): Option_usizeZ;
    /**
     * Helper method to build an unsigned justice transaction spending the revokeable
     * `to_local` output to a destination script. Fee estimation accounts for the expected
     * revocation witness data that will be added when signed.
     *
     * This method will error if the given fee rate results in a fee greater than the value
     * of the output being spent, or if there exists no revokeable `to_local` output on this
     * commitment transaction. See [`Self::revokeable_output_index`] for more details.
     *
     * The built transaction will allow fee bumping with RBF, and this method takes
     * `feerate_per_kw` as an input such that multiple copies of a justice transaction at different
     * fee rates may be built.
     */
    build_to_local_justice_tx(feerate_per_kw: bigint, destination_script: Uint8Array): Result_TransactionNoneZ;
}
