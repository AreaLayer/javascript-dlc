import { BestBlock } from '../structs/BestBlock.mjs';
import { OutputSweeper } from '../structs/OutputSweeper.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A Tuple
 */
export class TwoTuple_BestBlockOutputSweeperZ extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.C2Tuple_BestBlockOutputSweeperZ_free);
    }
    /**
     *
     */
    get_a() {
        const ret = bindings.C2Tuple_BestBlockOutputSweeperZ_get_a(this.ptr);
        const ret_hu_conv = new BestBlock(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     *
     */
    get_b() {
        const ret = bindings.C2Tuple_BestBlockOutputSweeperZ_get_b(this.ptr);
        const ret_hu_conv = new OutputSweeper(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Creates a new C2Tuple_BestBlockOutputSweeperZ from the contained elements.
     */
    static constructor_new(a, b_best_block, b_broadcaster, b_fee_estimator, b_chain_data_source, b_output_spender, b_change_destination_source, b_kv_store, b_logger) {
        const ret = bindings.C2Tuple_BestBlockOutputSweeperZ_new(CommonBase.get_ptr_of(a), bindings.OutputSweeper_new(CommonBase.get_ptr_of(b_best_block), CommonBase.get_ptr_of(b_broadcaster), CommonBase.get_ptr_of(b_fee_estimator), CommonBase.get_ptr_of(b_chain_data_source), CommonBase.get_ptr_of(b_output_spender), CommonBase.get_ptr_of(b_change_destination_source), CommonBase.get_ptr_of(b_kv_store), CommonBase.get_ptr_of(b_logger)));
        const ret_hu_conv = new TwoTuple_BestBlockOutputSweeperZ(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        ;
        CommonBase.add_ref_from(ret_hu_conv, b_broadcaster);
        CommonBase.add_ref_from(ret_hu_conv, b_fee_estimator);
        CommonBase.add_ref_from(ret_hu_conv, b_chain_data_source);
        CommonBase.add_ref_from(ret_hu_conv, b_output_spender);
        CommonBase.add_ref_from(ret_hu_conv, b_change_destination_source);
        CommonBase.add_ref_from(ret_hu_conv, b_kv_store);
        CommonBase.add_ref_from(ret_hu_conv, b_logger);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=TwoTuple_BestBlockOutputSweeperZ.mjs.map