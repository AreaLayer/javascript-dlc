import { ChannelManager } from '../structs/ChannelManager.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A Tuple
 */
export class TwoTuple_ThirtyTwoBytesChannelManagerZ extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.C2Tuple_ThirtyTwoBytesChannelManagerZ_free);
    }
    /**
     *
     */
    get_a() {
        const ret = bindings.C2Tuple_ThirtyTwoBytesChannelManagerZ_get_a(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     *
     */
    get_b() {
        const ret = bindings.C2Tuple_ThirtyTwoBytesChannelManagerZ_get_b(this.ptr);
        const ret_hu_conv = new ChannelManager(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Creates a new C2Tuple_ThirtyTwoBytesChannelManagerZ from the contained elements.
     */
    static constructor_new(a, b_fee_est, b_chain_monitor, b_tx_broadcaster, b_router, b_logger, b_entropy_source, b_node_signer, b_signer_provider, b_config, b_params, b_current_timestamp) {
        const ret = bindings.C2Tuple_ThirtyTwoBytesChannelManagerZ_new(bindings.encodeUint8Array(bindings.check_arr_len(a, 32)), bindings.ChannelManager_new(CommonBase.get_ptr_of(b_fee_est), CommonBase.get_ptr_of(b_chain_monitor), CommonBase.get_ptr_of(b_tx_broadcaster), CommonBase.get_ptr_of(b_router), CommonBase.get_ptr_of(b_logger), CommonBase.get_ptr_of(b_entropy_source), CommonBase.get_ptr_of(b_node_signer), CommonBase.get_ptr_of(b_signer_provider), CommonBase.get_ptr_of(b_config), CommonBase.get_ptr_of(b_params), b_current_timestamp));
        const ret_hu_conv = new TwoTuple_ThirtyTwoBytesChannelManagerZ(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, b_fee_est);
        CommonBase.add_ref_from(ret_hu_conv, b_chain_monitor);
        CommonBase.add_ref_from(ret_hu_conv, b_tx_broadcaster);
        CommonBase.add_ref_from(ret_hu_conv, b_router);
        CommonBase.add_ref_from(ret_hu_conv, b_logger);
        CommonBase.add_ref_from(ret_hu_conv, b_entropy_source);
        CommonBase.add_ref_from(ret_hu_conv, b_node_signer);
        CommonBase.add_ref_from(ret_hu_conv, b_signer_provider);
        ;
        ;
        return ret_hu_conv;
    }
}
//# sourceMappingURL=TwoTuple_ThirtyTwoBytesChannelManagerZ.mjs.map