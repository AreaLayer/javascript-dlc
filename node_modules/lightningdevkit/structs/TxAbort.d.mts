import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_TxAbortDecodeErrorZ } from '../structs/Result_TxAbortDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A tx_abort message which signals the cancellation of an in-progress transaction negotiation.
 */
export declare class TxAbort extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * Message data
     *
     * Returns a copy of the field.
     */
    get_data(): Uint8Array;
    /**
     * Message data
     */
    set_data(val: Uint8Array): void;
    /**
     * Constructs a new TxAbort given each field
     */
    static constructor_new(channel_id_arg: ChannelId, data_arg: Uint8Array): TxAbort;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TxAbort
     */
    clone(): TxAbort;
    /**
     * Generates a non-cryptographic 64-bit hash of the TxAbort.
     */
    hash(): bigint;
    /**
     * Checks if two TxAborts contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TxAbort): boolean;
    /**
     * Serialize the TxAbort object into a byte array which can be read by TxAbort_read
     */
    write(): Uint8Array;
    /**
     * Read a TxAbort from a byte array, created by TxAbort_write
     */
    static constructor_read(ser: Uint8Array): Result_TxAbortDecodeErrorZ;
}
