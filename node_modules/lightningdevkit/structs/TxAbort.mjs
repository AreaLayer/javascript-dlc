import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_TxAbortDecodeErrorZ } from '../structs/Result_TxAbortDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A tx_abort message which signals the cancellation of an in-progress transaction negotiation.
 */
export class TxAbort extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.TxAbort_free);
    }
    /**
     * The channel ID
     */
    get_channel_id() {
        const ret = bindings.TxAbort_get_channel_id(this.ptr);
        const ret_hu_conv = new ChannelId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel ID
     */
    set_channel_id(val) {
        bindings.TxAbort_set_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Message data
     *
     * Returns a copy of the field.
     */
    get_data() {
        const ret = bindings.TxAbort_get_data(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Message data
     */
    set_data(val) {
        bindings.TxAbort_set_data(this.ptr, bindings.encodeUint8Array(val));
    }
    /**
     * Constructs a new TxAbort given each field
     */
    static constructor_new(channel_id_arg, data_arg) {
        const ret = bindings.TxAbort_new(CommonBase.get_ptr_of(channel_id_arg), bindings.encodeUint8Array(data_arg));
        const ret_hu_conv = new TxAbort(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.TxAbort_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the TxAbort
     */
    clone() {
        const ret = bindings.TxAbort_clone(this.ptr);
        const ret_hu_conv = new TxAbort(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the TxAbort.
     */
    hash() {
        const ret = bindings.TxAbort_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two TxAborts contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.TxAbort_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the TxAbort object into a byte array which can be read by TxAbort_read
     */
    write() {
        const ret = bindings.TxAbort_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a TxAbort from a byte array, created by TxAbort_write
     */
    static constructor_read(ser) {
        const ret = bindings.TxAbort_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_TxAbortDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=TxAbort.mjs.map