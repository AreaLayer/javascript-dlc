import { Option_ThirtyTwoBytesZ } from '../structs/Option_ThirtyTwoBytesZ.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_TxAddInputDecodeErrorZ } from '../structs/Result_TxAddInputDecodeErrorZ.mjs';
import { TransactionU16LenLimited } from '../structs/TransactionU16LenLimited.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A tx_add_input message for adding an input during interactive transaction construction
 */
export declare class TxAddInput extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * A randomly chosen unique identifier for this input, which is even for initiators and odd for
     * non-initiators.
     */
    get_serial_id(): bigint;
    /**
     * A randomly chosen unique identifier for this input, which is even for initiators and odd for
     * non-initiators.
     */
    set_serial_id(val: bigint): void;
    /**
     * Serialized transaction that contains the output this input spends to verify that it is non
     * malleable.
     */
    get_prevtx(): TransactionU16LenLimited;
    /**
     * Serialized transaction that contains the output this input spends to verify that it is non
     * malleable.
     */
    set_prevtx(val: TransactionU16LenLimited): void;
    /**
     * The index of the output being spent
     */
    get_prevtx_out(): number;
    /**
     * The index of the output being spent
     */
    set_prevtx_out(val: number): void;
    /**
     * The sequence number of this input
     */
    get_sequence(): number;
    /**
     * The sequence number of this input
     */
    set_sequence(val: number): void;
    /**
     * The ID of the previous funding transaction, when it is being added as an input during splicing
     */
    get_shared_input_txid(): Option_ThirtyTwoBytesZ;
    /**
     * The ID of the previous funding transaction, when it is being added as an input during splicing
     */
    set_shared_input_txid(val: Option_ThirtyTwoBytesZ): void;
    /**
     * Constructs a new TxAddInput given each field
     */
    static constructor_new(channel_id_arg: ChannelId, serial_id_arg: bigint, prevtx_arg: TransactionU16LenLimited, prevtx_out_arg: number, sequence_arg: number, shared_input_txid_arg: Option_ThirtyTwoBytesZ): TxAddInput;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TxAddInput
     */
    clone(): TxAddInput;
    /**
     * Generates a non-cryptographic 64-bit hash of the TxAddInput.
     */
    hash(): bigint;
    /**
     * Checks if two TxAddInputs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TxAddInput): boolean;
    /**
     * Serialize the TxAddInput object into a byte array which can be read by TxAddInput_read
     */
    write(): Uint8Array;
    /**
     * Read a TxAddInput from a byte array, created by TxAddInput_write
     */
    static constructor_read(ser: Uint8Array): Result_TxAddInputDecodeErrorZ;
}
