import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_TxAddOutputDecodeErrorZ } from '../structs/Result_TxAddOutputDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A tx_add_output message for adding an output during interactive transaction construction.
 */
export class TxAddOutput extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.TxAddOutput_free);
    }
    /**
     * The channel ID
     */
    get_channel_id() {
        const ret = bindings.TxAddOutput_get_channel_id(this.ptr);
        const ret_hu_conv = new ChannelId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel ID
     */
    set_channel_id(val) {
        bindings.TxAddOutput_set_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * A randomly chosen unique identifier for this output, which is even for initiators and odd for
     * non-initiators.
     */
    get_serial_id() {
        const ret = bindings.TxAddOutput_get_serial_id(this.ptr);
        return ret;
    }
    /**
     * A randomly chosen unique identifier for this output, which is even for initiators and odd for
     * non-initiators.
     */
    set_serial_id(val) {
        bindings.TxAddOutput_set_serial_id(this.ptr, val);
    }
    /**
     * The satoshi value of the output
     */
    get_sats() {
        const ret = bindings.TxAddOutput_get_sats(this.ptr);
        return ret;
    }
    /**
     * The satoshi value of the output
     */
    set_sats(val) {
        bindings.TxAddOutput_set_sats(this.ptr, val);
    }
    /**
     * The scriptPubKey for the output
     */
    get_script() {
        const ret = bindings.TxAddOutput_get_script(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The scriptPubKey for the output
     */
    set_script(val) {
        bindings.TxAddOutput_set_script(this.ptr, bindings.encodeUint8Array(val));
    }
    /**
     * Constructs a new TxAddOutput given each field
     */
    static constructor_new(channel_id_arg, serial_id_arg, sats_arg, script_arg) {
        const ret = bindings.TxAddOutput_new(CommonBase.get_ptr_of(channel_id_arg), serial_id_arg, sats_arg, bindings.encodeUint8Array(script_arg));
        const ret_hu_conv = new TxAddOutput(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.TxAddOutput_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the TxAddOutput
     */
    clone() {
        const ret = bindings.TxAddOutput_clone(this.ptr);
        const ret_hu_conv = new TxAddOutput(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the TxAddOutput.
     */
    hash() {
        const ret = bindings.TxAddOutput_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two TxAddOutputs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.TxAddOutput_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the TxAddOutput object into a byte array which can be read by TxAddOutput_read
     */
    write() {
        const ret = bindings.TxAddOutput_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a TxAddOutput from a byte array, created by TxAddOutput_write
     */
    static constructor_read(ser) {
        const ret = bindings.TxAddOutput_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_TxAddOutputDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=TxAddOutput.mjs.map