import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_TxCompleteDecodeErrorZ } from '../structs/Result_TxCompleteDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A tx_complete message signalling the conclusion of a peer's transaction contributions during
 * interactive transaction construction.
 */
export declare class TxComplete extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * Constructs a new TxComplete given each field
     */
    static constructor_new(channel_id_arg: ChannelId): TxComplete;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TxComplete
     */
    clone(): TxComplete;
    /**
     * Generates a non-cryptographic 64-bit hash of the TxComplete.
     */
    hash(): bigint;
    /**
     * Checks if two TxCompletes contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TxComplete): boolean;
    /**
     * Serialize the TxComplete object into a byte array which can be read by TxComplete_read
     */
    write(): Uint8Array;
    /**
     * Read a TxComplete from a byte array, created by TxComplete_write
     */
    static constructor_read(ser: Uint8Array): Result_TxCompleteDecodeErrorZ;
}
