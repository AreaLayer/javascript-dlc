import { ChannelId } from '../structs/ChannelId.mjs';
import { Option_i64Z } from '../structs/Option_i64Z.mjs';
import { Result_TxInitRbfDecodeErrorZ } from '../structs/Result_TxInitRbfDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A tx_init_rbf message which initiates a replacement of the transaction after it's been
 * completed.
 */
export declare class TxInitRbf extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The locktime of the transaction
     */
    get_locktime(): number;
    /**
     * The locktime of the transaction
     */
    set_locktime(val: number): void;
    /**
     * The feerate of the transaction
     */
    get_feerate_sat_per_1000_weight(): number;
    /**
     * The feerate of the transaction
     */
    set_feerate_sat_per_1000_weight(val: number): void;
    /**
     * The number of satoshis the sender will contribute to or, if negative, remove from
     * (e.g. splice-out) the funding output of the transaction
     */
    get_funding_output_contribution(): Option_i64Z;
    /**
     * The number of satoshis the sender will contribute to or, if negative, remove from
     * (e.g. splice-out) the funding output of the transaction
     */
    set_funding_output_contribution(val: Option_i64Z): void;
    /**
     * Constructs a new TxInitRbf given each field
     */
    static constructor_new(channel_id_arg: ChannelId, locktime_arg: number, feerate_sat_per_1000_weight_arg: number, funding_output_contribution_arg: Option_i64Z): TxInitRbf;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TxInitRbf
     */
    clone(): TxInitRbf;
    /**
     * Generates a non-cryptographic 64-bit hash of the TxInitRbf.
     */
    hash(): bigint;
    /**
     * Checks if two TxInitRbfs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TxInitRbf): boolean;
    /**
     * Serialize the TxInitRbf object into a byte array which can be read by TxInitRbf_read
     */
    write(): Uint8Array;
    /**
     * Read a TxInitRbf from a byte array, created by TxInitRbf_write
     */
    static constructor_read(ser: Uint8Array): Result_TxInitRbfDecodeErrorZ;
}
