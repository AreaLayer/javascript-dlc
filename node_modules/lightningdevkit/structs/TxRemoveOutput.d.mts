import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_TxRemoveOutputDecodeErrorZ } from '../structs/Result_TxRemoveOutputDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A tx_remove_output message for removing an output during interactive transaction construction.
 */
export declare class TxRemoveOutput extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The serial ID of the output to be removed
     */
    get_serial_id(): bigint;
    /**
     * The serial ID of the output to be removed
     */
    set_serial_id(val: bigint): void;
    /**
     * Constructs a new TxRemoveOutput given each field
     */
    static constructor_new(channel_id_arg: ChannelId, serial_id_arg: bigint): TxRemoveOutput;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TxRemoveOutput
     */
    clone(): TxRemoveOutput;
    /**
     * Generates a non-cryptographic 64-bit hash of the TxRemoveOutput.
     */
    hash(): bigint;
    /**
     * Checks if two TxRemoveOutputs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TxRemoveOutput): boolean;
    /**
     * Serialize the TxRemoveOutput object into a byte array which can be read by TxRemoveOutput_read
     */
    write(): Uint8Array;
    /**
     * Read a TxRemoveOutput from a byte array, created by TxRemoveOutput_write
     */
    static constructor_read(ser: Uint8Array): Result_TxRemoveOutputDecodeErrorZ;
}
