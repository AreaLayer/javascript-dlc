import { ChannelId } from '../structs/ChannelId.mjs';
import { Option_ECDSASignatureZ } from '../structs/Option_ECDSASignatureZ.mjs';
import { Result_TxSignaturesDecodeErrorZ } from '../structs/Result_TxSignaturesDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * A tx_signatures message containing the sender's signatures for a transaction constructed with
 * interactive transaction construction.
 */
export declare class TxSignatures extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The TXID
     */
    get_tx_hash(): Uint8Array;
    /**
     * The TXID
     */
    set_tx_hash(val: Uint8Array): void;
    /**
     * The list of witnesses
     *
     * Returns a copy of the field.
     */
    get_witnesses(): Uint8Array[];
    /**
     * The list of witnesses
     */
    set_witnesses(val: Uint8Array[]): void;
    /**
     * Optional signature for the shared input -- the previous funding outpoint -- signed by both peers
     */
    get_shared_input_signature(): Option_ECDSASignatureZ;
    /**
     * Optional signature for the shared input -- the previous funding outpoint -- signed by both peers
     */
    set_shared_input_signature(val: Option_ECDSASignatureZ): void;
    /**
     * Constructs a new TxSignatures given each field
     */
    static constructor_new(channel_id_arg: ChannelId, tx_hash_arg: Uint8Array, witnesses_arg: Uint8Array[], shared_input_signature_arg: Option_ECDSASignatureZ): TxSignatures;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the TxSignatures
     */
    clone(): TxSignatures;
    /**
     * Generates a non-cryptographic 64-bit hash of the TxSignatures.
     */
    hash(): bigint;
    /**
     * Checks if two TxSignaturess contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: TxSignatures): boolean;
    /**
     * Serialize the TxSignatures object into a byte array which can be read by TxSignatures_read
     */
    write(): Uint8Array;
    /**
     * Read a TxSignatures from a byte array, created by TxSignatures_write
     */
    static constructor_read(ser: Uint8Array): Result_TxSignaturesDecodeErrorZ;
}
