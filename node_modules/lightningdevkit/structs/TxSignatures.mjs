import { ChannelId } from '../structs/ChannelId.mjs';
import { Option_ECDSASignatureZ } from '../structs/Option_ECDSASignatureZ.mjs';
import { Result_TxSignaturesDecodeErrorZ } from '../structs/Result_TxSignaturesDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A tx_signatures message containing the sender's signatures for a transaction constructed with
 * interactive transaction construction.
 */
export class TxSignatures extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.TxSignatures_free);
    }
    /**
     * The channel ID
     */
    get_channel_id() {
        const ret = bindings.TxSignatures_get_channel_id(this.ptr);
        const ret_hu_conv = new ChannelId(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * The channel ID
     */
    set_channel_id(val) {
        bindings.TxSignatures_set_channel_id(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * The TXID
     */
    get_tx_hash() {
        const ret = bindings.TxSignatures_get_tx_hash(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * The TXID
     */
    set_tx_hash(val) {
        bindings.TxSignatures_set_tx_hash(this.ptr, bindings.encodeUint8Array(bindings.check_arr_len(val, 32)));
    }
    /**
     * The list of witnesses
     *
     * Returns a copy of the field.
     */
    get_witnesses() {
        const ret = bindings.TxSignatures_get_witnesses(this.ptr);
        const ret_conv_12_len = bindings.getArrayLength(ret);
        const ret_conv_12_arr = new Array(ret_conv_12_len).fill(null);
        for (var m = 0; m < ret_conv_12_len; m++) {
            const ret_conv_12 = bindings.getU32ArrayElem(ret, m);
            const ret_conv_12_conv = bindings.decodeUint8Array(ret_conv_12);
            ret_conv_12_arr[m] = ret_conv_12_conv;
        }
        bindings.freeWasmMemory(ret);
        return ret_conv_12_arr;
    }
    /**
     * The list of witnesses
     */
    set_witnesses(val) {
        bindings.TxSignatures_set_witnesses(this.ptr, bindings.encodeUint32Array(val.map(val_conv_12 => bindings.encodeUint8Array(val_conv_12))));
    }
    /**
     * Optional signature for the shared input -- the previous funding outpoint -- signed by both peers
     */
    get_shared_input_signature() {
        const ret = bindings.TxSignatures_get_shared_input_signature(this.ptr);
        const ret_hu_conv = Option_ECDSASignatureZ.constr_from_ptr(ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Optional signature for the shared input -- the previous funding outpoint -- signed by both peers
     */
    set_shared_input_signature(val) {
        bindings.TxSignatures_set_shared_input_signature(this.ptr, CommonBase.get_ptr_of(val));
    }
    /**
     * Constructs a new TxSignatures given each field
     */
    static constructor_new(channel_id_arg, tx_hash_arg, witnesses_arg, shared_input_signature_arg) {
        const ret = bindings.TxSignatures_new(CommonBase.get_ptr_of(channel_id_arg), bindings.encodeUint8Array(bindings.check_arr_len(tx_hash_arg, 32)), bindings.encodeUint32Array(witnesses_arg.map(witnesses_arg_conv_12 => bindings.encodeUint8Array(witnesses_arg_conv_12))), CommonBase.get_ptr_of(shared_input_signature_arg));
        const ret_hu_conv = new TxSignatures(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.TxSignatures_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the TxSignatures
     */
    clone() {
        const ret = bindings.TxSignatures_clone(this.ptr);
        const ret_hu_conv = new TxSignatures(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the TxSignatures.
     */
    hash() {
        const ret = bindings.TxSignatures_hash(this.ptr);
        return ret;
    }
    /**
     * Checks if two TxSignaturess contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.TxSignatures_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Serialize the TxSignatures object into a byte array which can be read by TxSignatures_read
     */
    write() {
        const ret = bindings.TxSignatures_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a TxSignatures from a byte array, created by TxSignatures_write
     */
    static constructor_read(ser) {
        const ret = bindings.TxSignatures_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_TxSignaturesDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=TxSignatures.mjs.map