import { Result_UntrustedStringDecodeErrorZ } from '../structs/Result_UntrustedStringDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Struct to `Display` fields in a safe way using `PrintableString`
 */
export declare class UntrustedString extends CommonBase {
    /**
     * Serialize the UntrustedString object into a byte array which can be read by UntrustedString_read
     */
    write(): Uint8Array;
    /**
     * Read a UntrustedString from a byte array, created by UntrustedString_write
     */
    static constructor_read(ser: Uint8Array): Result_UntrustedStringDecodeErrorZ;
    get_a(): string;
    set_a(val: string): void;
    /**
     * Constructs a new UntrustedString given each field
     */
    static constructor_new(a_arg: string): UntrustedString;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the UntrustedString
     */
    clone(): UntrustedString;
    /**
     * Checks if two UntrustedStrings contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: UntrustedString): boolean;
    /**
     * Generates a non-cryptographic 64-bit hash of the UntrustedString.
     */
    hash(): bigint;
    /**
     * Get the string representation of a UntrustedString object
     */
    to_str(): string;
}
