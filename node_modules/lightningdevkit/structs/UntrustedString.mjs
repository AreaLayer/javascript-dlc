import { Result_UntrustedStringDecodeErrorZ } from '../structs/Result_UntrustedStringDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * Struct to `Display` fields in a safe way using `PrintableString`
 */
export class UntrustedString extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.UntrustedString_free);
    }
    /**
     * Serialize the UntrustedString object into a byte array which can be read by UntrustedString_read
     */
    write() {
        const ret = bindings.UntrustedString_write(this.ptr);
        const ret_conv = bindings.decodeUint8Array(ret);
        return ret_conv;
    }
    /**
     * Read a UntrustedString from a byte array, created by UntrustedString_write
     */
    static constructor_read(ser) {
        const ret = bindings.UntrustedString_read(bindings.encodeUint8Array(ser));
        const ret_hu_conv = Result_UntrustedStringDecodeErrorZ.constr_from_ptr(ret);
        return ret_hu_conv;
    }
    get_a() {
        const ret = bindings.UntrustedString_get_a(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
    set_a(val) {
        bindings.UntrustedString_set_a(this.ptr, bindings.encodeString(val));
    }
    /**
     * Constructs a new UntrustedString given each field
     */
    static constructor_new(a_arg) {
        const ret = bindings.UntrustedString_new(bindings.encodeString(a_arg));
        const ret_hu_conv = new UntrustedString(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        return ret_hu_conv;
    }
    clone_ptr() {
        const ret = bindings.UntrustedString_clone_ptr(this.ptr);
        return ret;
    }
    /**
     * Creates a copy of the UntrustedString
     */
    clone() {
        const ret = bindings.UntrustedString_clone(this.ptr);
        const ret_hu_conv = new UntrustedString(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
    /**
     * Checks if two UntrustedStrings contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b) {
        const ret = bindings.UntrustedString_eq(this.ptr, CommonBase.get_ptr_of(b));
        CommonBase.add_ref_from(this, b);
        return ret;
    }
    /**
     * Generates a non-cryptographic 64-bit hash of the UntrustedString.
     */
    hash() {
        const ret = bindings.UntrustedString_hash(this.ptr);
        return ret;
    }
    /**
     * Get the string representation of a UntrustedString object
     */
    to_str() {
        const ret = bindings.UntrustedString_to_str(this.ptr);
        const ret_conv = bindings.decodeString(ret);
        return ret_conv;
    }
}
//# sourceMappingURL=UntrustedString.mjs.map