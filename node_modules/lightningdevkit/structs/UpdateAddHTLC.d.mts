import { Option_u64Z } from '../structs/Option_u64Z.mjs';
import { ChannelId } from '../structs/ChannelId.mjs';
import { OnionPacket } from '../structs/OnionPacket.mjs';
import { Result_UpdateAddHTLCDecodeErrorZ } from '../structs/Result_UpdateAddHTLCDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An [`update_add_htlc`] message to be sent to or received from a peer.
 *
 * [`update_add_htlc`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#adding-an-htlc-update_add_htlc
 */
export declare class UpdateAddHTLC extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The HTLC ID
     */
    get_htlc_id(): bigint;
    /**
     * The HTLC ID
     */
    set_htlc_id(val: bigint): void;
    /**
     * The HTLC value in milli-satoshi
     */
    get_amount_msat(): bigint;
    /**
     * The HTLC value in milli-satoshi
     */
    set_amount_msat(val: bigint): void;
    /**
     * The payment hash, the pre-image of which controls HTLC redemption
     */
    get_payment_hash(): Uint8Array;
    /**
     * The payment hash, the pre-image of which controls HTLC redemption
     */
    set_payment_hash(val: Uint8Array): void;
    /**
     * The expiry height of the HTLC
     */
    get_cltv_expiry(): number;
    /**
     * The expiry height of the HTLC
     */
    set_cltv_expiry(val: number): void;
    /**
     * The extra fee skimmed by the sender of this message. See
     * [`ChannelConfig::accept_underpaying_htlcs`].
     *
     * [`ChannelConfig::accept_underpaying_htlcs`]: crate::util::config::ChannelConfig::accept_underpaying_htlcs
     */
    get_skimmed_fee_msat(): Option_u64Z;
    /**
     * The extra fee skimmed by the sender of this message. See
     * [`ChannelConfig::accept_underpaying_htlcs`].
     *
     * [`ChannelConfig::accept_underpaying_htlcs`]: crate::util::config::ChannelConfig::accept_underpaying_htlcs
     */
    set_skimmed_fee_msat(val: Option_u64Z): void;
    /**
     * The onion routing packet with encrypted data for the next hop.
     */
    get_onion_routing_packet(): OnionPacket;
    /**
     * The onion routing packet with encrypted data for the next hop.
     */
    set_onion_routing_packet(val: OnionPacket): void;
    /**
     * Provided if we are relaying or receiving a payment within a blinded path, to decrypt the onion
     * routing packet and the recipient-provided encrypted payload within.
     *
     * Note that the return value (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    get_blinding_point(): Uint8Array;
    /**
     * Provided if we are relaying or receiving a payment within a blinded path, to decrypt the onion
     * routing packet and the recipient-provided encrypted payload within.
     *
     * Note that val (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    set_blinding_point(val: Uint8Array | null): void;
    /**
     * Constructs a new UpdateAddHTLC given each field
     *
     * Note that blinding_point_arg (or a relevant inner pointer) may be NULL or all-0s to represent None
     */
    static constructor_new(channel_id_arg: ChannelId, htlc_id_arg: bigint, amount_msat_arg: bigint, payment_hash_arg: Uint8Array, cltv_expiry_arg: number, skimmed_fee_msat_arg: Option_u64Z, onion_routing_packet_arg: OnionPacket, blinding_point_arg: Uint8Array | null): UpdateAddHTLC;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the UpdateAddHTLC
     */
    clone(): UpdateAddHTLC;
    /**
     * Generates a non-cryptographic 64-bit hash of the UpdateAddHTLC.
     */
    hash(): bigint;
    /**
     * Checks if two UpdateAddHTLCs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: UpdateAddHTLC): boolean;
    /**
     * Serialize the UpdateAddHTLC object into a byte array which can be read by UpdateAddHTLC_read
     */
    write(): Uint8Array;
    /**
     * Read a UpdateAddHTLC from a byte array, created by UpdateAddHTLC_write
     */
    static constructor_read(ser: Uint8Array): Result_UpdateAddHTLCDecodeErrorZ;
}
