import { ChannelId } from '../structs/ChannelId.mjs';
import { Result_UpdateFailHTLCDecodeErrorZ } from '../structs/Result_UpdateFailHTLCDecodeErrorZ.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An [`update_fail_htlc`] message to be sent to or received from a peer.
 *
 * [`update_fail_htlc`]: https://github.com/lightning/bolts/blob/master/02-peer-protocol.md#removing-an-htlc-update_fulfill_htlc-update_fail_htlc-and-update_fail_malformed_htlc
 */
export declare class UpdateFailHTLC extends CommonBase {
    /**
     * The channel ID
     */
    get_channel_id(): ChannelId;
    /**
     * The channel ID
     */
    set_channel_id(val: ChannelId): void;
    /**
     * The HTLC ID
     */
    get_htlc_id(): bigint;
    /**
     * The HTLC ID
     */
    set_htlc_id(val: bigint): void;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the UpdateFailHTLC
     */
    clone(): UpdateFailHTLC;
    /**
     * Generates a non-cryptographic 64-bit hash of the UpdateFailHTLC.
     */
    hash(): bigint;
    /**
     * Checks if two UpdateFailHTLCs contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: UpdateFailHTLC): boolean;
    /**
     * Serialize the UpdateFailHTLC object into a byte array which can be read by UpdateFailHTLC_read
     */
    write(): Uint8Array;
    /**
     * Read a UpdateFailHTLC from a byte array, created by UpdateFailHTLC_write
     */
    static constructor_read(ser: Uint8Array): Result_UpdateFailHTLCDecodeErrorZ;
}
