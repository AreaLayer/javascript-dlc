import { TxOut } from '../structs/TxOut.mjs';
import { OutPoint } from '../structs/OutPoint.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * An unspent transaction output that is available to spend resulting from a successful
 * [`CoinSelection`] attempt.
 */
export declare class Utxo extends CommonBase {
    /**
     * The unique identifier of the output.
     */
    get_outpoint(): OutPoint;
    /**
     * The unique identifier of the output.
     */
    set_outpoint(val: OutPoint): void;
    /**
     * The output to spend.
     */
    get_output(): TxOut;
    /**
     * The output to spend.
     */
    set_output(val: TxOut): void;
    /**
     * The upper-bound weight consumed by the input's full [`TxIn::script_sig`] and [`TxIn::witness`], each
     * with their lengths included, required to satisfy the output's script. The weight consumed by
     * the input's `script_sig` must account for [`WITNESS_SCALE_FACTOR`].
     */
    get_satisfaction_weight(): bigint;
    /**
     * The upper-bound weight consumed by the input's full [`TxIn::script_sig`] and [`TxIn::witness`], each
     * with their lengths included, required to satisfy the output's script. The weight consumed by
     * the input's `script_sig` must account for [`WITNESS_SCALE_FACTOR`].
     */
    set_satisfaction_weight(val: bigint): void;
    /**
     * Constructs a new Utxo given each field
     */
    static constructor_new(outpoint_arg: OutPoint, output_arg: TxOut, satisfaction_weight_arg: bigint): Utxo;
    clone_ptr(): bigint;
    /**
     * Creates a copy of the Utxo
     */
    clone(): Utxo;
    /**
     * Generates a non-cryptographic 64-bit hash of the Utxo.
     */
    hash(): bigint;
    /**
     * Checks if two Utxos contain equal inner contents.
     * This ignores pointers and is_owned flags and looks at the values in fields.
     * Two objects with NULL inner values will be considered "equal" here.
     */
    eq(b: Utxo): boolean;
    /**
     * Returns a `Utxo` with the `satisfaction_weight` estimate for a legacy P2PKH output.
     */
    static constructor_new_p2pkh(outpoint: OutPoint, value: bigint, pubkey_hash: Uint8Array): Utxo;
}
