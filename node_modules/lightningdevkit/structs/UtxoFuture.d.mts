import { NetworkGraph } from '../structs/NetworkGraph.mjs';
import { Result_TxOutUtxoLookupErrorZ } from '../structs/Result_TxOutUtxoLookupErrorZ.mjs';
import { P2PGossipSync } from '../structs/P2PGossipSync.mjs';
import { CommonBase } from './CommonBase.mjs';
/**
 * Represents a future resolution of a [`UtxoLookup::get_utxo`] query resolving async.
 *
 * See [`UtxoResult::Async`] and [`UtxoFuture::resolve`] for more info.
 */
export declare class UtxoFuture extends CommonBase {
    clone_ptr(): bigint;
    /**
     * Creates a copy of the UtxoFuture
     */
    clone(): UtxoFuture;
    /**
     * Builds a new future for later resolution.
     */
    static constructor_new(): UtxoFuture;
    /**
     * Resolves this future against the given `graph` and with the given `result`.
     *
     * This is identical to calling [`UtxoFuture::resolve`] with a dummy `gossip`, disabling
     * forwarding the validated gossip message onwards to peers.
     *
     * Because this may cause the [`NetworkGraph`]'s [`processing_queue_high`] to flip, in order
     * to allow us to interact with peers again, you should call [`PeerManager::process_events`]
     * after this.
     *
     * [`processing_queue_high`]: crate::ln::msgs::RoutingMessageHandler::processing_queue_high
     * [`PeerManager::process_events`]: crate::ln::peer_handler::PeerManager::process_events
     */
    resolve_without_forwarding(graph: NetworkGraph, result: Result_TxOutUtxoLookupErrorZ): void;
    /**
     * Resolves this future against the given `graph` and with the given `result`.
     *
     * The given `gossip` is used to broadcast any validated messages onwards to all peers which
     * have available buffer space.
     *
     * Because this may cause the [`NetworkGraph`]'s [`processing_queue_high`] to flip, in order
     * to allow us to interact with peers again, you should call [`PeerManager::process_events`]
     * after this.
     *
     * [`processing_queue_high`]: crate::ln::msgs::RoutingMessageHandler::processing_queue_high
     * [`PeerManager::process_events`]: crate::ln::peer_handler::PeerManager::process_events
     */
    resolve(graph: NetworkGraph, gossip: P2PGossipSync, result: Result_TxOutUtxoLookupErrorZ): void;
}
