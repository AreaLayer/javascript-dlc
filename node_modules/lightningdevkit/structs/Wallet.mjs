import { CoinSelectionSource } from '../structs/CoinSelectionSource.mjs';
import { CommonBase } from './CommonBase.mjs';
import * as bindings from '../bindings.mjs';
/**
 * A wrapper over [`WalletSource`] that implements [`CoinSelection`] by preferring UTXOs that would
 * avoid conflicting double spends. If not enough UTXOs are available to do so, conflicting double
 * spends may happen.
 */
export class Wallet extends CommonBase {
    /* @internal */
    constructor(_dummy, ptr) {
        super(ptr, bindings.Wallet_free);
    }
    /**
     * Returns a new instance backed by the given [`WalletSource`] that serves as an implementation
     * of [`CoinSelectionSource`].
     */
    static constructor_new(source, logger) {
        const ret = bindings.Wallet_new(CommonBase.get_ptr_of(source), CommonBase.get_ptr_of(logger));
        const ret_hu_conv = new Wallet(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, ret_hu_conv);
        CommonBase.add_ref_from(ret_hu_conv, source);
        CommonBase.add_ref_from(ret_hu_conv, logger);
        return ret_hu_conv;
    }
    /**
     * Constructs a new CoinSelectionSource which calls the relevant methods on this_arg.
     * This copies the `inner` pointer in this_arg and thus the returned CoinSelectionSource must be freed before this_arg is
     */
    as_CoinSelectionSource() {
        const ret = bindings.Wallet_as_CoinSelectionSource(this.ptr);
        const ret_hu_conv = new CoinSelectionSource(null, ret);
        CommonBase.add_ref_from(ret_hu_conv, this);
        return ret_hu_conv;
    }
}
//# sourceMappingURL=Wallet.mjs.map